<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/08/hello-world/"/>
      <url>/2020/08/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>$$<br>x^{y^z}=(1+{\rm e}^x)^{-2xy^w}<br>$$</p><div class="github-widget" data-repo="sukie-sun/sukie-sun.github.io"></div><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="200" src="//music.163.com/outchain/player?type=0&id=883067320&auto=1&height=430">// 歌曲 type=2，歌单 type=0，id 填对应 id</iframe><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#指定文章中关闭目录 `toc: false`</span><span class="token comment" spellcheck="true">#指定文章中关闭版权信息 original: false</span><span class="token comment" spellcheck="true">#指定文章中关闭图片浏览器 fancybox: false</span><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Hello World<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2015-08-19 00:00:00</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">original</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">fancybox</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">&lt;div class="aplayer"  data-id="883067320"   // 歌曲 / 专辑 / 歌单 ID  data-server="netease" // 音乐平台：netease、tencent、xiami、kugou、baidu  data-type="playlist"  // 类型：song、album、playlist、search、artist  data-mode="random"    // 播放模式：random、single、circulation、order  data-autoplay="true"  // 自动播放  ><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人兴趣 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark学习（六）</title>
      <link href="/2019/02/22/Spark(6)/"/>
      <url>/2019/02/22/Spark(6)/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-SparkStreaming简介"><a href="#一、-SparkStreaming简介" class="headerlink" title="一、 SparkStreaming简介"></a>一、 SparkStreaming简介</h1><ul><li><p>SparkStreaming是流式处理框架，是Spark API的扩展，<code>支持</code>可扩展、高吞吐、容错的实时数据处理。</p></li><li><p>实时数据<code>来源</code>：kafka、Flume、Twitter、ZeroMQ、TCP Socket</p></li><li><p>可以使用高级功能的复杂算子来<code>处理</code>流数据：如 map、reduce、join、window</p></li><li><p>处理后的数据可以<code>存放</code>在文件系统、数据库等，方便实时展现</p></li></ul><h1 id="二、SparkStreaming-与-Storm-的区别"><a href="#二、SparkStreaming-与-Storm-的区别" class="headerlink" title="二、SparkStreaming 与 Storm 的区别"></a>二、SparkStreaming 与 Storm 的区别</h1><blockquote><ul><li><p>Storm 是纯实时的流式处理框架，SparkStreaming 是准实时的处理框架（微批处理）。因为微批处理，SparkStreaming 的吞吐量比 Storm 要高。</p></li><li><p>Storm 的事务机制要比 SparkStreaming 的要完善。 </p></li><li><p>Storm 支持动态资源调度。(spark1.2 开始和之后也支持)</p></li><li><p>SparkStreaming 擅长复杂的业务处理，Storm 不擅长复杂的业务处理，擅长简单的汇总型计算</p></li></ul></blockquote><table><thead><tr><th align="center">SparkStreaming</th><th align="center">Storm</th></tr></thead><tbody><tr><td align="center">微批处理，准实时的流式处理框架</td><td align="center">实时计算框架，来一条数据马上处理</td></tr><tr><td align="center">支持动态调整资源</td><td align="center">支持动态调整资源</td></tr><tr><td align="center">支持事务</td><td align="center">支持事务</td></tr><tr><td align="center">支持复杂的业务场景</td><td align="center">处理场景相对简单一些</td></tr></tbody></table><h1 id="三、SparkStreaming的详情"><a href="#三、SparkStreaming的详情" class="headerlink" title="三、SparkStreaming的详情"></a>三、SparkStreaming的详情</h1><h2 id="1、运行流程"><a href="#1、运行流程" class="headerlink" title="1、运行流程"></a>1、运行流程</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0ff16n6p0j30rp08075q.jpg"></p><blockquote><p>SparkStreaming会启动receive task一直接受数据，每个batchInterval的时间周期，就会把数据变成一个batch，然后进一步封装成RDD，最后变成DStream ,用户操作DStream 时，可以使用一系列算子： map、flatmap、filter。。。。。</p></blockquote><blockquote><p><code>情况：</code></p><p>1、batchInterval为5s ，计算这批数据的时间为3s ，则此时 0—5s，在结束数据；5—10s，一边接收数据，一边处理上一批数据；依次类推。</p><p>2、batchInterval为5s ，计算这批数据的时间为6s ，则此时0—5s，在接收数据；5—10s，一边接收第二批数据，一边处理第一批数据；10—11s,一边接收第三批数据，一边处理第一批数据，第二批数据等待计算，就会造成数据堆积，如果SparkStreaming的数据存储是仅在内存中，就会发生OOM；如果设置StorageLevel 包含 disk, 则内存存放不下的数据会溢写至 disk, 加大延迟</p></blockquote><blockquote><p><code>注意；</code></p><ul><li>receiver task 是 7*24 小时一直在执行</li></ul></blockquote><h2 id="2、SparkStreaming-代码"><a href="#2、SparkStreaming-代码" class="headerlink" title="2、SparkStreaming 代码"></a>2、SparkStreaming 代码</h2><h3 id="（1）关于SparkStreaming-框架我们必须要知道的几点"><a href="#（1）关于SparkStreaming-框架我们必须要知道的几点" class="headerlink" title="（1）关于SparkStreaming 框架我们必须要知道的几点"></a>（1）关于SparkStreaming 框架我们必须要知道的几点</h3><blockquote><p><code>注意：</code></p><ul><li><p>receiver模式下接收数据，local的模拟线程必须大于等于2：</p><ul><li>一个线程用receiver的数据接收</li><li>一个线程用于执行job</li></ul></li><li><p>Duration时间设置就是我们能接受的延迟度，需要根据集群的资源情况以及监控每一个job的执行时间来调节出最佳时间。</p></li><li><p>创建JavaStreamingContext有两种方式：SparkConf 、 SparkContext</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//     JavaSparkContext  →   JavaStreamingContext  </span>JavaStreamingContext jsc <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">,</span>Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//    JavaStreamingContext    →    JavaSparkContext</span><span class="token keyword">final</span> JavaSparkContext sparkContext <span class="token operator">=</span> jsc<span class="token punctuation">.</span><span class="token function">sparkContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>所有的代码逻辑完成以后，必须要有一个ouput opertion类算子</p></li><li><p>JavaStreamingContext.start()   ，Streaming框架便启动，之后，就不能再次添加业务逻辑</p></li><li><p>JavaStreamingContext.stop()   ，无参的stop( )  会把SparkContext一同关闭；stop(false) , 只会关闭StreamContext ,SparkContext依然存在</p></li><li><p>JavaStreamingContext.stop()停止之后不能再调用 start</p></li></ul></blockquote><h3 id="（2）代码举例：WordCount"><a href="#（2）代码举例：WordCount" class="headerlink" title="（2）代码举例：WordCount"></a>（2）代码举例：WordCount</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>Accumulator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>VoidFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span>Broadcast<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>Durations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaReceiverInputDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaStreamingContext<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountOnline</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**     The master URL to connect to,      such as "local" to run locally with one thread,      "local[4]" to run locally with 4 cores,       or "spark://master:7077" to run on a Spark standalone cluster.   */</span>         <span class="token keyword">final</span> SparkConf conf <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"WordCountOnline"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 在创建streamingContext的时候 设置batch Interval         * 创建streamingContext有两种方式：conf， context         */</span><span class="token comment" spellcheck="true">//    final JavaStreamingContext jsc = </span><span class="token comment" spellcheck="true">//             new JavaStreamingContext(conf, Durations.seconds(5));</span>        JavaSparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建StreamContext，及间隔时间：每个5秒处理数据        </span>        JavaStreamingContext jsc <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">,</span>Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//        final JavaSparkContext sparkContext = jsc.sparkContext();</span><span class="token comment" spellcheck="true">//设置监听节点及端口，接收从这个节点的这个port输入的数据，最后封装成DStream</span><span class="token comment" spellcheck="true">//避免端口被占用        </span>        JavaReceiverInputDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> lines <span class="token operator">=</span>                                    jsc<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"node00"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//切割每一行数据</span>        JavaDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span>             lines<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> ones <span class="token operator">=</span>             words<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给每个单词计为1</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//累加，并指定分区数</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> counts <span class="token operator">=</span>             ones<span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>Integer i1<span class="token punctuation">,</span> Integer i2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> i1 <span class="token operator">+</span> i2<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//outputoperator类的算子   </span><span class="token comment" spellcheck="true">//         counts.print();</span>counts<span class="token punctuation">.</span><span class="token function">foreachRDD</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoidFunction</span><span class="token operator">&lt;</span>JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> pairRDD<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           pairRDD<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoidFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> tuple<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tuple ---- "</span><span class="token operator">+</span>tuple <span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//框架启动必须调用start</span>         jsc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等待spark程序被终止</span>         jsc<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个期间可用于一些扫尾操作，如获取SparkContext，如果直接stop，就无法实现了        </span><span class="token comment" spellcheck="true">//任务执行结束</span>        jsc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stop====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）代码运行"><a href="#（3）代码运行" class="headerlink" title="（3）代码运行"></a>（3）代码运行</h3><p>在Linux系统中：</p><ul><li>启动socket server 服务：node00</li></ul><pre class="line-numbers language-shell"><code class="language-shell">yum install nc -ync -lk 9999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在该节点上输入输入数据 （避免端口被占用）</li></ul><blockquote><p>在Windows端运行代码，便能接收到数据，从而执行运算处理</p></blockquote><h3 id="广播黑名单："><a href="#广播黑名单：" class="headerlink" title="广播黑名单："></a>广播黑名单：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sxt<span class="token punctuation">.</span>java<span class="token punctuation">.</span>sparkstreaming<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>VoidFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span>Broadcast<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>Durations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaReceiverInputDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaStreamingContext<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 过滤黑名单（使用广播变量）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransformOperator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"transform"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaStreamingContext jsc <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span>Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模拟黑名单</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> blackList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blackList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//广播黑名单    </span>        <span class="token keyword">final</span> Broadcast<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> broadcastList <span class="token operator">=</span>            jsc<span class="token punctuation">.</span><span class="token function">sparkContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>blackList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//接受socket数据源: 1 zhangsan     2  lisi       3   wangwu</span>        JavaReceiverInputDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> nameList <span class="token operator">=</span>             jsc<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"node01"</span><span class="token punctuation">,</span> <span class="token number">7777</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> pairNameList <span class="token operator">=</span>             nameList<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对DStream使用transform算子，在算子内部实现RDD到RDD的转换</span>        JavaDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> transFormResult <span class="token operator">=</span> pairNameList<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">,</span>JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> nameRDD<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> filter <span class="token operator">=</span>                    nameRDD<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>                    <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> v1<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//得到广播变量</span>                        List<span class="token operator">&lt;</span>String<span class="token operator">></span> blackList <span class="token operator">=</span> broadcastList<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token keyword">return</span> <span class="token operator">!</span>blackList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> filter<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> v1<span class="token punctuation">)</span>                            <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> v1<span class="token punctuation">.</span>_2<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transFormResult<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="统计累计值："><a href="#统计累计值：" class="headerlink" title="统计累计值："></a>统计累计值：</h3><p>从程序启动，到当前 ， 所有批次数据的累加值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>VoidFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>Durations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaReceiverInputDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaStreamingContext<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span>Optional<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpdateStateByKeyOperator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"UpdateStateByKeyDemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaStreamingContext jsc <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置checkpoint目录</span><span class="token comment" spellcheck="true">//         jsc.checkpoint("hdfs://shsxt/spark/checkpoint");</span>        jsc<span class="token punctuation">.</span><span class="token function">checkpoint</span><span class="token punctuation">(</span><span class="token string">"./checkpoint"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 数据格式：   hello shsxt     hello bjsxt*/</span>        JavaReceiverInputDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> lines <span class="token operator">=</span>             jsc<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"node00"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span>             lines<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> ones <span class="token operator">=</span>             words<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//updateStateByKey  更新key值状态</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> counts <span class="token operator">=</span>ones<span class="token punctuation">.</span><span class="token function">updateStateByKey</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">,</span> Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">,</span> Optional<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>                    <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>              List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> values<span class="token punctuation">,</span> Optional<span class="token operator">&lt;</span>Integer<span class="token operator">></span> state<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">/**                         * values:经过分组最后 这个key所对应的value  [1,1,1,1,1]                         * state:这个key在前一个批次的状态                         */</span>                        Integer updateValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//如果存在值，便获取</span>                            updateValue <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>updateValue <span class="token operator">+</span> <span class="token string">" ========  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            updateValue <span class="token operator">+=</span> value<span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>updateValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//output operator</span>        counts<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        counts.foreachRDD(new VoidFunction&lt;JavaPairRDD&lt;String, Integer>>() &amp;#123;</span><span class="token comment" spellcheck="true">//            @Override</span><span class="token comment" spellcheck="true">// public void call(JavaPairRDD&lt;String, Integer> pairRDD) throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//                System.out.println(pairRDD.getNumPartitions());</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//                pairRDD.collect();</span><span class="token comment" spellcheck="true">//            &amp;#125;</span><span class="token comment" spellcheck="true">//        &amp;#125;);</span>        jsc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意：</code></p><blockquote><p>Optional 类</p><ul><li>Java 8 引入的类</li><li>主要用于解决空指针异常的问题</li><li>从本质上说，这是一个包含有可选值的包装类，意味着Optional 类既可以包含有对象，也可以为空</li></ul></blockquote><h2 id="3、SparkStreaming算子操作"><a href="#3、SparkStreaming算子操作" class="headerlink" title="3、SparkStreaming算子操作"></a>3、SparkStreaming算子操作</h2><h3 id="1、ouput-opertion类算子"><a href="#1、ouput-opertion类算子" class="headerlink" title="1、ouput opertion类算子"></a>1、ouput opertion类算子</h3><ul><li><blockquote><p><strong>foreachRDD</strong></p><p>参数：RDD    返回值：无</p><ul><li><p>foreachRDD可以遍历得到DStream中的RDD</p></li><li><p>可以对RDD使用RDD的Transformation类算子进行转化</p></li><li><p>但是在这个算子内 <strong>必须对抽取出来的RDD执行Action类算子</strong>，代码才能执行</p></li><li><p>在这个算子<strong>内</strong>，RDD算子<strong>外</strong>执行的代码是在Driver端执行，RDD算子<strong>内</strong>的代码是在Executor中执行。</p><p><strong>print</strong></p></li></ul></blockquote></li></ul><h3 id="2、transformation类算子"><a href="#2、transformation类算子" class="headerlink" title="2、transformation类算子"></a>2、transformation类算子</h3><ul><li><blockquote><p><strong>transform</strong></p><p>参数：RDD   返回：另一RDD</p><p>transform算子可将DStream做RDD到RDD的任意操作</p><ul><li>在这个算子<strong>内</strong>，RDD算子<strong>外</strong>执行的代码是在Driver端执行，RDD算子<strong>内</strong>的代码是在Executor中执行。</li><li></li></ul><p><strong>updateStateByKey</strong></p><ul><li><p>此算子为SparkStreaming中每一个key维护一个state，state可以是任意类型，也可以是自定义对象，更新函数也可以是自定义</p></li><li><p>与reduceByKey相似的地方就是会先按key进行分组</p></li><li><p>通过更新函数对该 key 的状态不断更新，对于每个新的 batch 而言，SparkStreaming 会在使用 updateStateByKey 的时候为已经存在的 key 进行 state 的状态更新。</p></li><li><p>如果要不断的更新每个key的state，就一定涉及到了状态的保存和容错，这个时候就需要开启checkpoint机制和功能</p></li><li><p>有何用？全面的广告点击分析，统计广告点击流量，统计这一天的车流量，统计点击量</p></li></ul></blockquote></li></ul><h3 id="3、注意"><a href="#3、注意" class="headerlink" title="3、注意"></a>3、注意</h3><ul><li><h4 id="使用到-updateStateByKey-要开启-checkpoint-机制和功能。"><a href="#使用到-updateStateByKey-要开启-checkpoint-机制和功能。" class="headerlink" title="使用到 updateStateByKey 要开启 checkpoint 机制和功能。"></a>使用到 updateStateByKey 要开启 checkpoint 机制和功能。</h4></li></ul><pre><code>//设置checkpoint目录: // 落地到本地磁盘  jsc.checkpoint(&quot;./checkpoint&quot;);//保存在hdfs  jsc.checkpoint(&quot;hdfs://shsxt/spark/checkpoint&quot;);</code></pre><ul><li><h4 id="多久会将内存中的数据-每一个key所对应的状态-写入到磁盘一份？"><a href="#多久会将内存中的数据-每一个key所对应的状态-写入到磁盘一份？" class="headerlink" title="多久会将内存中的数据(每一个key所对应的状态)写入到磁盘一份？"></a>多久会将内存中的数据(每一个key所对应的状态)写入到磁盘一份？</h4><blockquote><p>如果batchInterval设置的时间小于10秒，那么10秒写入磁盘一份。</p><p>如果 batchInterval 设置的时间大于 10 秒，那么就会 batchInterval时间间隔写入磁盘一份。</p><p>这样做是为了防止频繁的写HDFS</p></blockquote></li></ul><h3 id="4、窗口操作"><a href="#4、窗口操作" class="headerlink" title="4、窗口操作"></a>4、窗口操作</h3><h4 id="1-窗口操作理解图："><a href="#1-窗口操作理解图：" class="headerlink" title="(1)窗口操作理解图："></a>(1)窗口操作理解图：</h4><p><img src="http://spark.apache.org/docs/latest/img/streaming-dstream-window.png"></p><p>假设每隔 5s 1 个 batch,上图中窗口长度为 15s，窗口滑动间隔 10s。</p><ul><li>窗口长度和滑动间隔必须是 batchInterval 的整数倍。如果不是整数倍会检测报错。</li></ul><blockquote><p>用于计算最近一段时间的数据</p></blockquote><h4 id="2-优化后的-window-窗口操作示意图："><a href="#2-优化后的-window-窗口操作示意图：" class="headerlink" title="(2)优化后的 window 窗口操作示意图："></a>(2)优化后的 window 窗口操作示意图：</h4><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0fh4r65nej30g507b0vo.jpg"></p><ul><li>优化后的 window 操作要保存状态所以要设置 checkpoint 路径，没有优化的 window 操作可以不设置 checkpoint 路径</li></ul><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="(3)代码实现"></a>(3)代码实现</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>Durations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaReceiverInputDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaStreamingContext<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基于滑动窗口的热点搜索词实时统计</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowOperator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"WindowHotWord"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         JavaStreamingContext jssc <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置日志级别为WARN</span>        jssc<span class="token punctuation">.</span><span class="token function">sparkContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLogLevel</span><span class="token punctuation">(</span><span class="token string">"WARN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 注意：         *  没有优化的窗口函数可以不设置checkpoint目录         *  优化的窗口函数必须设置checkpoint目录                  */</span><span class="token comment" spellcheck="true">//      jssc.checkpoint("hdfs://node1:9000/spark/checkpoint");</span>           jssc<span class="token punctuation">.</span><span class="token function">checkpoint</span><span class="token punctuation">(</span><span class="token string">"./checkpoint"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaReceiverInputDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> searchLogsDStream <span class="token operator">=</span>                            jssc<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"node00"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//word    1</span>        JavaDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> searchWordsDStream <span class="token operator">=</span>             searchLogsDStream<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String t<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t <span class="token operator">+</span> <span class="token string">"*************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将搜索词映射为(searchWord, 1)的tuple格式</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> searchWordPairDStream <span class="token operator">=</span>             searchWordsDStream<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span>                                <span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>                    <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String searchWord<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span>searchWord<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 每隔10秒，计算最近60秒内的数据，         * 那么这个窗口大小就是60秒，里面有12个rdd，在没有计算之前，这些rdd是不会进行计算的。         * 那么在计算的时候会将这12个rdd聚合起来，然后一起执行reduceByKeyAndWindow操作 ，         * reduceByKeyAndWindow是针对窗口操作的而不是针对DStream操作的。         */</span><span class="token comment" spellcheck="true">// JavaPairDStream&lt;String, Integer> searchWordCountsDStream =</span><span class="token comment" spellcheck="true">//        searchWordPairDStream.reduceByKeyAndWindow(</span><span class="token comment" spellcheck="true">//                 new Function2&lt;Integer, Integer, Integer>() &amp;#123;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//                    private static final long serialVersionUID = 1L;</span><span class="token comment" spellcheck="true">//                    @Override</span><span class="token comment" spellcheck="true">//                    public Integer call(Integer v1, Integer v2) throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//                        return v1 + v2;</span><span class="token comment" spellcheck="true">//                    &amp;#125;</span><span class="token comment" spellcheck="true">//        &amp;#125;, Durations.minutes(30), Durations.seconds(60));</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        JavaPairDStream&lt;String, Integer> searchWordCountsDStream =</span><span class="token comment" spellcheck="true">//            searchWordPairDStream.reduceByKeyAndWindow(</span><span class="token comment" spellcheck="true">//        new Function2&lt;Integer, Integer, Integer>() &amp;#123;</span><span class="token comment" spellcheck="true">//                @Override</span><span class="token comment" spellcheck="true">//                public Integer call(Integer v1, Integer v2) throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//                    System.out.println(v1 + " : " + v2);</span><span class="token comment" spellcheck="true">//                    return v1 + v2;</span><span class="token comment" spellcheck="true">//                &amp;#125;</span><span class="token comment" spellcheck="true">//            &amp;#125;,Durations.seconds(15),Durations.seconds(5));</span>               <span class="token comment" spellcheck="true">// 窗口时间               滑块时间     </span>        <span class="token comment" spellcheck="true">//window窗口操作优化：</span>        <span class="token comment" spellcheck="true">//将划出串窗口的数据排除，将新划入窗口的数据添加</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> searchWordCountsDStream <span class="token operator">=</span>          searchWordPairDStream<span class="token punctuation">.</span><span class="token function">reduceByKeyAndWindow</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>Integer v1<span class="token punctuation">,</span> Integer v2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"v1:"</span> <span class="token operator">+</span> v1 <span class="token operator">+</span> <span class="token string">" v2:"</span> <span class="token operator">+</span> v2 <span class="token operator">+</span> <span class="token string">"  ++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>Integer v1<span class="token punctuation">,</span> Integer v2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"v1:"</span> <span class="token operator">+</span> v1 <span class="token operator">+</span> <span class="token string">" v2:"</span> <span class="token operator">+</span> v2 <span class="token operator">+</span> <span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> v1 <span class="token operator">-</span> v2<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          searchWordCountsDStream<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jssc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jssc<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jssc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>reduceByKeyAndWindow</li></ul><blockquote><p>reduceByKeyAndWindow是针对窗口操作的而不是针对DStream操作的。</p></blockquote><h2 id="5-Driver-HA（Standalone-或者-Mesos）"><a href="#5-Driver-HA（Standalone-或者-Mesos）" class="headerlink" title="5. Driver HA（Standalone 或者 Mesos）"></a>5. Driver HA（Standalone 或者 Mesos）</h2><p>代码举例：</p><h3 id="产生文件："><a href="#产生文件：" class="headerlink" title="产生文件："></a>产生文件：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 此复制文件的程序是模拟在data目录下动态生成相同格式的txt文件，用于给sparkstreaming 中 textFileStream提供输入流。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyFile_data</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">copyFile</span><span class="token punctuation">(</span>       <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"./data/scores.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"./dataTest/"</span><span class="token operator">+</span>uuid<span class="token operator">+</span><span class="token string">"----words.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span>File fromFile<span class="token punctuation">,</span> File toFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FileInputStream ins <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fromFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>toFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> ins<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ins<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理数据："><a href="#处理数据：" class="headerlink" title="处理数据："></a>处理数据：</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>Durations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaStreamingContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaStreamingContextFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>dstream<span class="token punctuation">.</span>DStream<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** *  Spark standalone or Mesos with cluster deploy mode only: *  在提交application的时候  添加 --supervise 选项  如果Driver挂掉 会自动启动一个Driver */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparkStreamingOnHDFS</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> SparkConf conf <span class="token operator">=</span>       <span class="token keyword">new</span>  <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"SparkStreamingOnHDFS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//      final String checkpointDirectory =</span>        <span class="token string">"hdfs://shsxt/spark/SparkStreaming/CheckPoint2017"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String checkpointDirectory <span class="token operator">=</span> <span class="token string">"./checkpoint"</span><span class="token punctuation">;</span>        JavaStreamingContextFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContextFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> JavaStreamingContext <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token function">createContext</span><span class="token punctuation">(</span>checkpointDirectory<span class="token punctuation">,</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//getOrCreate() 该方法会先到checkpointDirectory的文件中检查是否有checkpoint记录，如果没有就会让 factory 去调用 create() 来创建JavaStreamingContext ；如果存在就执行checkpoint的任务</span>        JavaStreamingContext jsc <span class="token operator">=</span> JavaStreamingContext<span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span>checkpointDirectory<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> JavaStreamingContext         <span class="token function">createContext</span><span class="token punctuation">(</span>String checkpointDirectory<span class="token punctuation">,</span>SparkConf conf<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// If you do not see this printed, that means the StreamingContext has been loaded</span><span class="token comment" spellcheck="true">// from the new checkpoint</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Creating new context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SparkConf sparkConf <span class="token operator">=</span> conf<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Create the context with a 1 second batch size</span>        JavaStreamingContext ssc <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContext</span><span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        ssc.sparkContext().setLogLevel("WARN");</span>        <span class="token comment" spellcheck="true">/**         *  checkpoint 保存：         *        1.配置信息         *        2.DStream操作逻辑         *        3.job的执行进度         *      4.offset         */</span>        ssc<span class="token punctuation">.</span><span class="token function">checkpoint</span><span class="token punctuation">(</span>checkpointDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**         * 监控的是HDFS上的一个目录，监控文件数量的变化     文件内容如果追加监控不到。         * 只监控文件夹下新增的文件，减少的文件时监控不到的，文件的内容有改动也监控不到。         */</span><span class="token comment" spellcheck="true">//        JavaDStream&lt;String> lines = </span><span class="token comment" spellcheck="true">//        ssc.textFileStream("hdfs://node1:9000/spark/sparkstreaming");</span>        JavaDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> lines <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">textFileStream</span><span class="token punctuation">(</span><span class="token string">"./dataTest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span>             lines<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> ones <span class="token operator">=</span>             words<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> counts <span class="token operator">=</span>             ones<span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>Integer i1<span class="token punctuation">,</span> Integer i2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> i1 <span class="token operator">+</span> i2<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        counts.print();</span>        DStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> dstream <span class="token operator">=</span> counts<span class="token punctuation">.</span><span class="token function">dstream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dstream<span class="token punctuation">.</span><span class="token function">saveAsTextFiles</span><span class="token punctuation">(</span><span class="token string">"./data/write/xxxxx"</span><span class="token punctuation">,</span><span class="token string">"yyyyyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ssc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>注意</code></strong></p><ul><li><p>因为 SparkStreaming 是 7*24 小时运行，Driver 只是一个简单的进程，有可能挂掉，所以实现 Driver 的 HA 就有必要</p></li><li><p>如果使用的 Client 模式就无法实现 Driver HA ，这里针对的是 cluster 模式</p></li><li><p>Yarn 平台 cluster 模式提交任务，AM(AplicationMaster)相当于 Driver，如果挂掉会自动启动 AM</p></li><li><p>这里所说的 DriverHA 针对的是 Spark standalone 和 Mesos 资源调度的情况下</p></li></ul><p>实现 Driver 的高可用有两个**<code>步骤</code>**：</p><ul><li><p>第一：提交任务层面，在提交任务的时候加上选项 –supervise,当 Driver挂掉的时候会自动重启 Driver。</p></li><li><p>第二：代码层面，使用 JavaStreamingContext.getOrCreate（checkpoint路径，JavaStreamingContextFactory）</p></li><li><p>Driver 中元数据包括：</p><ol><li>创建应用程序的配置信息。</li><li>DStream 的操作逻辑</li><li>job 中没有完成的批次数据，也就是 job 的执行进度。</li></ol></li></ul><h2 id="6、SparkStreaming-Kafka"><a href="#6、SparkStreaming-Kafka" class="headerlink" title="6、SparkStreaming+Kafka"></a>6、SparkStreaming+Kafka</h2><h3 id="（1）receiver-模式"><a href="#（1）receiver-模式" class="headerlink" title="（1）receiver 模式"></a>（1）receiver 模式</h3><h4 id="receiver-模式原理图"><a href="#receiver-模式原理图" class="headerlink" title="receiver 模式原理图"></a>receiver 模式原理图</h4><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0g5e9n7b7j315j0ywn1a.jpg"></p><h4 id="receiver-模式理解："><a href="#receiver-模式理解：" class="headerlink" title="receiver 模式理解："></a>receiver 模式理解：</h4><blockquote><p>1.在 SparkStreaming 程序运行起来后，Executor 中会有 receivertasks 接收 kafka 推送过来的数据。数据会被持久化，默认级别为MEMORY_AND_DISK_SER_2,这个级别也可以修改。</p><p>2.receiver task对接收过来的数据进行存储和备份，这个过程会有节点之间的数据传输。</p><p>3.备份完成后去 zookeeper 中更新消费偏移量，然后向 Driver 中的 receiver tracker 汇报数据的位置。最后 Driver 根据数据本地化将 task 分发到不同节点上执行</p></blockquote><blockquote><p> 数据本地化原则：将task分配到data所在节点</p></blockquote><h4 id="receiver-模式中存在的问题："><a href="#receiver-模式中存在的问题：" class="headerlink" title="receiver 模式中存在的问题："></a>receiver 模式中存在的问题：</h4><p><strong><em>场景一：</em></strong></p><blockquote><p>1、当 Driver 进程挂掉后，Driver 下的 Executor 都会被杀掉，当更新完 zookeeper 消费偏移量的时Driver 如果挂掉了，就会存在找不到数据的问题，相当于丢失数据。如何解决这个问题？</p><p>2、开启**<code>WAL</code>**(write ahead log)<em>预写日志机制</em>， 在接受过来数据备份到其他节点的时候，同时备份到 HDFS 上一份（我们需要将接收来的数据的持久化级别降级到 MEMORY_AND_DISK），这样就能保证数据的安全性。</p><p>3、不过，因为写 HDFS 比较消耗性能，要在备份完数据之后才能进行更新 zookeeper 以及汇报位置等，这样会增加 job 的执行时间，这样对于任务的执行提高了延迟度</p></blockquote><p><strong><em>场景二：</em></strong></p><blockquote><p>开启了WAL机制</p><p>若数据接收完后（50~100），也将数据备份到另一节点和HDFS上，正准备更新偏移量（100）的时候，driver挂掉了，重启后，就会到HDFS上去获取未计算的数据，然后，检查偏移量（50），再根据偏移量去消费topic。这就出现了重复消费的现象</p></blockquote><p><strong><code>*术语解释：*</code></strong></p><blockquote><p>SparkStreaming的receive模式能保证 at least模型，只能保证至少消费一次，不能保证仅被消费一次</p><p>exactly-once模型   能保证仅被消费一次，较理想的模型可以避免重复消费，direct模式可以实现，但是输出不能保证</p></blockquote><h4 id="receiver-的并行度设置："><a href="#receiver-的并行度设置：" class="headerlink" title="receiver 的并行度设置："></a>receiver 的并行度设置：</h4><blockquote><p>1、receiver 的并行度是由 spark.streaming.blockInterval 来决定的，默认为200ms,</p><p>2、假设 batchInterval 为 5s,那么每隔 blockInterval 就会产生一个 block,这里就对应每批次产生 RDD 的 partition,这样 5 秒产生的这个 Dstream 中的这个 RDD 的 partition 为 25 个，并行度就是25。</p><p>3、如果想提高并行度，可以减少 blockInterval 的数值，但是最好不要低于 50ms。</p></blockquote><h4 id="receiver-模式代码："><a href="#receiver-模式代码：" class="headerlink" title="receiver 模式代码："></a>receiver 模式代码：</h4><h5 id="产生数据："><a href="#产生数据：" class="headerlink" title="产生数据："></a>产生数据：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> kafka<span class="token punctuation">.</span>javaapi<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>Producer<span class="token punctuation">;</span><span class="token keyword">import</span> kafka<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>KeyedMessage<span class="token punctuation">;</span><span class="token keyword">import</span> kafka<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>ProducerConfig<span class="token punctuation">;</span><span class="token keyword">import</span> kafka<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringEncoder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>producer<span class="token punctuation">.</span>KafkaProducer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向kafka中生产数据</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyProducer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// sparkstreaming  storm  flink 两三年后变成主流  流式处理，可能更复杂，数据处理性能要非常好</span>    <span class="token keyword">private</span> String topic<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//发送给Kafka的数据,topic</span>    <span class="token keyword">private</span> Producer<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> producerForKafka<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyProducer</span><span class="token punctuation">(</span>String topic<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>topic <span class="token operator">=</span> topic<span class="token punctuation">;</span>        Properties conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"metadata.broker.list"</span><span class="token punctuation">,</span> <span class="token string">"node01:9092,node02:9092,node03:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"serializer.class"</span><span class="token punctuation">,</span> StringEncoder<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"acks"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producerForKafka <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerConfig</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          counter<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// String value = "shsxt" + counter;</span>            String value <span class="token operator">=</span> <span class="token string">"shsxt"</span>          KeyedMessage<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyedMessage</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            producerForKafka<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token string">" - -- -- --- -- - -- - -"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hash partitioner 当有key时，则默认通过key 取hash后 ，对partition_number 取余数</span><span class="token comment" spellcheck="true">//            producerForKafka.send(new KeyedMessage&lt;Integer, String>(topic,22,userLog));</span><span class="token comment" spellcheck="true">//            每2条数据暂停2秒</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> counter <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">MyProducer</span><span class="token punctuation">(</span><span class="token string">"sk1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">MyProducer</span><span class="token punctuation">(</span><span class="token string">"sk2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> kafka<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringDecoder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>StorageLevel<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>Durations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairReceiverInputDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaStreamingContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>KafkaUtils<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//receiver 模式并行度是由blockInterval决定的</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparkStreamingOnKafkaReceiver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         conf<span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"SparkStreamingOnKafkaReceiver"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启预写日志 WAL机制</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"spark.streaming.receiver.writeAheadLog.enable"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaStreamingContext jsc <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">checkpoint</span><span class="token punctuation">(</span><span class="token string">"./receivedata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> topicConsumerConcurrency <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//设置读取的topic和接受数据的线程数</span>        topicConsumerConcurrency<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sk1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        topicConsumerConcurrency<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sk2"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 第一个参数是StreamingContext         * 第二个参数是ZooKeeper集群信息         （接受Kafka数据的时候会从Zookeeper中获得Offset等元数据信息）         * 第三个参数是Consumer Group 消费者组         * 第四个参数是消费的Topic以及并发读取Topic中Partition的线程数         *         * 注意：         * KafkaUtils.createStream 使用五个参数的方法，设置receiver的存储级别         */</span><span class="token comment" spellcheck="true">//        JavaPairReceiverInputDStream&lt;String,String> lines = KafkaUtils.createStream(</span><span class="token comment" spellcheck="true">//                jsc,</span><span class="token comment" spellcheck="true">//                "node3:2181,node4:2181,node5:2181",</span><span class="token comment" spellcheck="true">//                "MyFirstConsumerGroup", </span><span class="token comment" spellcheck="true">//                topicConsumerConcurrency,</span><span class="token comment" spellcheck="true">//                StorageLevel.MEMORY_AND_DISK());</span>        JavaPairReceiverInputDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> lines <span class="token operator">=</span>            KafkaUtils<span class="token punctuation">.</span><span class="token function">createStream</span><span class="token punctuation">(</span>                jsc<span class="token punctuation">,</span>                <span class="token string">"node01:2181,node02:2181,node03:2181"</span><span class="token punctuation">,</span>                <span class="token string">"MyFirstConsumerGroup"</span><span class="token punctuation">,</span>                topicConsumerConcurrency<span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span>               lines<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>      <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> tuple<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>tuple<span class="token punctuation">.</span>_2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> pairs <span class="token operator">=</span>             words<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> wordsCount <span class="token operator">=</span>             pairs<span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//对相同的Key，进行Value的累计（包括Local和Reducer级别同时Reduce）</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>Integer v1<span class="token punctuation">,</span> Integer v2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wordsCount<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="运行代码："><a href="#运行代码：" class="headerlink" title="运行代码："></a>运行代码：</h5><p>Linux端</p><ul><li>启动zookeeper：3台</li></ul><pre class="line-numbers language-shell"><code class="language-shell">zkServer.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动kafka：3台</li></ul><p>在kafka的解压路径下的/bin目录下</p><pre class="line-numbers language-shell"><code class="language-shell"> kafka-server-start.sh ../config/server.properties <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>终止kafka：</p><pre><code> kafka-server-stop.sh</code></pre><h3 id="（2）Driect-模式"><a href="#（2）Driect-模式" class="headerlink" title="（2）Driect 模式"></a>（2）Driect 模式</h3><h4 id="Driect-模式原理图"><a href="#Driect-模式原理图" class="headerlink" title="Driect 模式原理图"></a>Driect 模式原理图</h4><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0hviwdqgkj30my0ba3z2.jpg"></p><h4 id="Direct-模式理解："><a href="#Direct-模式理解：" class="headerlink" title="Direct 模式理解："></a>Direct 模式理解：</h4><blockquote><p>SparkStreaming+kafka 的 Driect 模式就是将 kafka 看成存数据的一方，不是被动接收数据，而是主动去取数据。拉取数据后先进行计算，成功后再更新偏移量</p><p>消费者偏移量也不是用 zookeeper 来管理，而是 SparkStreaming 内部对消费者偏移量自动来维护，默认消费偏移量是在内存中，当然如果设置了checkpoint 目录，那么消费偏移量也会保存在 checkpoint 中。当然也可以实现用 zookeeper 来管理</p></blockquote><h4 id="Direct-模式并行度设置："><a href="#Direct-模式并行度设置：" class="headerlink" title="Direct 模式并行度设置："></a>Direct 模式并行度设置：</h4><blockquote><p>Direct 模式的并行度是由读取的 kafka 中 topic 的 partition 数决定的。</p><p>可以在sparksteaming中使用算子改变分区数，如reartition</p></blockquote><h4 id="Direct-模式代码："><a href="#Direct-模式代码：" class="headerlink" title="Direct 模式代码："></a>Direct 模式代码：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>FlatMapFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>Durations<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairDStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaStreamingContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaStreamingContextFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>dstream<span class="token punctuation">.</span>DStream<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * *  Spark standalone or Mesos with cluster deploy mode only: *  在提交application的时候  添加 --supervise 选项  如果Driver挂掉 会自动启动一个Driver * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparkStreamingOnHDFS</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"SparkStreamingOnHDFS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        final String checkpointDirectory = "hdfs://shsxt/spark/SparkStreaming/CheckPoint2017";</span>        <span class="token keyword">final</span> String checkpointDirectory <span class="token operator">=</span> <span class="token string">"./checkpoint"</span><span class="token punctuation">;</span>        JavaStreamingContextFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContextFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> JavaStreamingContext <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token function">createContext</span><span class="token punctuation">(</span>checkpointDirectory<span class="token punctuation">,</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        JavaStreamingContext jsc <span class="token operator">=</span>             JavaStreamingContext<span class="token punctuation">.</span><span class="token function">getOrCreate</span><span class="token punctuation">(</span>checkpointDirectory<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> JavaStreamingContext         <span class="token function">createContext</span><span class="token punctuation">(</span>String checkpointDirectory<span class="token punctuation">,</span>SparkConf conf<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// If you do not see this printed, that means the StreamingContext has</span>        <span class="token comment" spellcheck="true">// been loaded</span>        <span class="token comment" spellcheck="true">// from the new checkpoint</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Creating new context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SparkConf sparkConf <span class="token operator">=</span> conf<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Create the context with a 1 second batch size</span>        JavaStreamingContext ssc <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">JavaStreamingContext</span><span class="token punctuation">(</span>sparkConf<span class="token punctuation">,</span> Durations<span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        ssc.sparkContext().setLogLevel("WARN");</span>        <span class="token comment" spellcheck="true">/**         *  checkpoint 保存：         *        1.配置信息         *        2.DStream操作逻辑         *        3.job的执行进度         *      4.offset         */</span>        ssc<span class="token punctuation">.</span><span class="token function">checkpoint</span><span class="token punctuation">(</span>checkpointDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/**         * 监控的是HDFS上的一个目录，监控文件数量的变化     文件内容如果追加监控不到。         * 只监控文件夹下新增的文件，减少的文件时监控不到的，文件的内容有改动也监控不到。         */</span><span class="token comment" spellcheck="true">//        JavaDStream&lt;String> lines = ssc.textFileStream("hdfs://node1:9000/spark/sparkstreaming");</span>        JavaDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> lines <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">textFileStream</span><span class="token punctuation">(</span><span class="token string">"./dataTest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaDStream<span class="token operator">&lt;</span>String<span class="token operator">></span> words <span class="token operator">=</span>             lines<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> ones <span class="token operator">=</span>             words<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairDStream<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> counts <span class="token operator">=</span>            ones<span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>Integer i1<span class="token punctuation">,</span> Integer i2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> i1 <span class="token operator">+</span> i2<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        counts.print();</span>        DStream<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> dstream <span class="token operator">=</span> counts<span class="token punctuation">.</span><span class="token function">dstream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dstream<span class="token punctuation">.</span><span class="token function">saveAsTextFiles</span><span class="token punctuation">(</span><span class="token string">"./data/write/xxxxx"</span><span class="token punctuation">,</span><span class="token string">"yyyyyy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ssc<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、相关配置"><a href="#7、相关配置" class="headerlink" title="7、相关配置"></a>7、相关配置</h2><p>预写日志:（receive模式中）</p><pre><code>spark.streaming.receiver.writeAheadLog.enable 默认 false 没有开启</code></pre><p>blockInterval:（receive模式中）</p><pre><code>spark.streaming.blockInterval 默认 200ms</code></pre><p>反压机制: （设置自动调整每一批次的数据量的理想范围，但调整的比较慢）</p><pre><code>spark.streaming.backpressure.enabled 默认 false</code></pre><p>每一批次接收数据速率:（receive模式中）</p><pre><code>spark.streaming.receiver.maxRate 默认没有设置</code></pre><p>每一分区接收数据速率 :（  direct模式）</p><pre><code>spark.streaming.kafka.maxRatePerpartition   默认没有设置</code></pre><h2 id="8、如何优雅的关闭Spark-Streaming作业"><a href="#8、如何优雅的关闭Spark-Streaming作业" class="headerlink" title="8、如何优雅的关闭Spark Streaming作业"></a>8、如何优雅的关闭Spark Streaming作业</h2><pre><code>spark.streaming.stopGracefullyOnShutdown  设置成true</code></pre><p>执行命令：</p><pre class="line-numbers language-shell"><code class="language-shell">kill -15/sigterm driverpid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark框架 </tag>
            
            <tag> SparkStreaming </tag>
            
            <tag> 流式处理框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark学习（五）</title>
      <link href="/2019/02/21/Spark(5)/"/>
      <url>/2019/02/21/Spark(5)/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Spark"><a href="#一、Spark" class="headerlink" title="一、Spark"></a>一、Spark</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>基于 Spark 计算框架之上且兼容 Hive 语法的 SQL 执行引擎，</p><h2 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h2><ul><li>基于 Spark 的特性</li></ul><p>由于底层的计算采用了 Spark，性能比 MapReduce 的 Hive 普遍快 2 倍以上，当数据全部 load 在内存的话，将快 10 倍以上，因此 Shark 可以作为交互式查询应用服务来使用。</p><ul><li>基于 Hive的特性</li></ul><p>Shark 是完全兼容 Hive的语法，表结构以及UDF函数等，已有的HiveSql可以直接进行迁移至Shark上。 Shark 底层依赖于 Hive 的解析器，查询优化器。</p><ul><li>缺点</li></ul><p>由于 Shark 的整体设计架构对 Hive 的依赖性太强，难以支持其长远发展，比如不能和 Spark的其他组件进行很好的集成，无法满足 Spark 的一栈式解决大数据处理的需求。</p><h1 id="二、SparkSql"><a href="#二、SparkSql" class="headerlink" title="二、SparkSql"></a>二、SparkSql</h1><h2 id="1、SparkSQL介绍"><a href="#1、SparkSQL介绍" class="headerlink" title="1、SparkSQL介绍"></a>1、SparkSQL介绍</h2><p>Hive 是 Shark 的前身，Shark 是 SparkSQL 的前身</p><p>SparkSQL 特点</p><ul><li><p>其完全脱离了 Hive 的限制。</p></li><li><p>SparkSQL支持查询原生的RDD。</p><p>RDD是Spark平台的核心概念，是 Spark 能够高效的处理大数据的各种场景的基础。</p></li><li><p>能够在 Scala 中写 SQL 语句。</p></li></ul><p>支持简单的 SQL 语法检查，能够在Scala中写Hive语句访问Hive数据，并将结果取回作为RDD使用。</p><h2 id="2、Spark-on-Hive-和-Hive-on-Spark"><a href="#2、Spark-on-Hive-和-Hive-on-Spark" class="headerlink" title="2、Spark on Hive 和 Hive on Spark"></a>2、Spark on Hive 和 Hive on Spark</h2><p>**<code>Spark on Hive</code>**：</p><p> Hive 只作为储存角色，Spark 负责 sql 解析优化，执行。</p><p>数据源在hive上，解析引擎是sparksql，执行任务是spark</p><p>**<code>Hive on Spark</code>**：</p><p>Hive 即作为存储又负责 sql 的解析优化，Spark 负责执行。</p><p>数据源在hive上，解析引擎是hive，执行任务是spark</p><h2 id="3、DataFrame"><a href="#3、DataFrame" class="headerlink" title="3、DataFrame"></a>3、DataFrame</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0e3717grfj30dq07amzi.jpg"></p><ul><li><p>分布式数据容器</p></li><li><p>DataFrame 的底层封装的是 RDD，只不过 RDD 的泛型是 Row 类型。</p></li><li><p>相当于RDD+schema  （数据+数据的结构信息）</p></li><li><p>与 Hive 类似，DataFrame 也支持嵌套数据类型（struct、array 和 map）</p></li><li><p>从 API 易用性的角度上 看， DataFrame API提供的是一套高层的关系操作，比函数式的 RDD API 要更加友好，门槛更低。</p></li></ul><h2 id="4、SparkSql-的数据源"><a href="#4、SparkSql-的数据源" class="headerlink" title="4、SparkSql 的数据源"></a>4、SparkSql 的数据源</h2><p> JSON 类型的字符串，JDBC、Parquent、Hive，HBASE、HDFS </p><h2 id="5、SparkSql底层架构"><a href="#5、SparkSql底层架构" class="headerlink" title="5、SparkSql底层架构"></a>5、SparkSql底层架构</h2><p>sql——&gt;逻辑计划——&gt;优化逻辑计划——&gt;物理计划——&gt;RDD（Spark任务）</p><h2 id="6、谓词下推"><a href="#6、谓词下推" class="headerlink" title="6、谓词下推"></a>6、谓词下推</h2><p><code>sql</code>:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> table1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>table2<span class="token punctuation">.</span>score <span class="token keyword">from</span> table1 <span class="token keyword">join</span> table2 <span class="token keyword">on</span> table1<span class="token punctuation">.</span>id<span class="token operator">=</span>table2<span class="token punctuation">.</span>id <span class="token keyword">where</span> table1<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">50</span> <span class="token operator">and</span> table2<span class="token punctuation">.</span>score <span class="token operator">></span> <span class="token number">90</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>执行顺序</code> </p><p> join:t1,t2<br>过滤：where : t1.age&gt;50,t2.score&gt;90<br>列裁剪：from:  select:</p><p><strong><code>谓词下推</code></strong><br>先各自过滤：where<br>然后列裁剪：t1:name,id  ;  t2:score,id<br>join</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0e98ac1j9j30df09vt9h.jpg" alt="谓词下推"></p><h1 id="三、创建DataFrame的几种方式"><a href="#三、创建DataFrame的几种方式" class="headerlink" title="三、创建DataFrame的几种方式"></a>三、创建DataFrame的几种方式</h1><h2 id="1、读取Json格式文件创建DataFrame"><a href="#1、读取Json格式文件创建DataFrame" class="headerlink" title="1、读取Json格式文件创建DataFrame"></a>1、读取Json格式文件创建DataFrame</h2><p><code>注意：</code></p><blockquote><p>1、json文件中不能嵌套json格式的内容</p><p>2、读取json文件格式的两种方式：</p><p>3、dataFrame.show( )默认显示前20行数据，使用dataFrame.show(行数）可显示指定行数的数据</p><p>4、将DataFrame转换成RDD：</p><p>​          Java: df.javaRDD( )  </p><p>​         Scala: df.rdd</p><p>5、显示DataFrame的Schema信息（树形的形式）：df.printSchema(  )</p><p>6、dataFrame自带API操作dataFrame ,不常用</p><p>7、使用sql查询：</p><p>​         a，将DataFrame注册临时表： df.registerTemptable(“mytable”)   </p><p>​         b，使用sql： sqlContext.sql(“sql语句”)</p><p>8、df中的数据加载过之后，显示时，会默认将列按ASCII码进行排序</p></blockquote><p><code>Java：</code></p><pre class="line-numbers language-java"><code class="language-java">SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"jsonfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SparkContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建SQLContext（实现了序列化）</span>SQLContext sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件格式：&amp;#123;"name":"zhangsan","age": 18&amp;#125;</span><span class="token comment" spellcheck="true">//读取json文件的两种方式,得到DataFrame（底层是RDD）</span>DataFrame df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"./data/jsonfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DataFrame df = sqlContext.read().json("./data/jsonfile");</span><span class="token comment" spellcheck="true">//显示df中的内容的两种情况（以二维表显示，空值用null代替，列自动按ASCII码排序）</span>df<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>df<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//df转换成RDD</span><span class="token comment" spellcheck="true">//RDD&lt;ROW> rdd = df.rdd()</span>JavaRDD<span class="token operator">&lt;</span>Row<span class="token operator">></span> javaRDD <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">javaRDD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示数据结构信息</span>df<span class="token punctuation">.</span><span class="token function">printSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自带操作DataFrame的API</span><span class="token comment" spellcheck="true">//select name from table</span>df<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//select name ,age+10 as addage from table</span>df<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>df<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">alias</span><span class="token punctuation">(</span><span class="token string">"addage"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//select name ,age from table where age>19</span>df<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>df<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//select age,count(*) from table group by age</span>df<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用SQL查询</span><span class="token comment" spellcheck="true">//将DataFrame注册成临时的一张表，这张表相当于临时注册到内存中，是逻辑上的表，不会雾化到磁盘</span>df<span class="token punctuation">.</span><span class="token function">registerTempTable</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DataFrame sqlDF <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"sekect * from table where name like 'zhang&amp;'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sqlDF<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Scala:</code></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token keyword">val</span> context <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token keyword">val</span> sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> SQlContext<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//读取json文件</span><span class="token keyword">val</span> df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token string">"./data/jsonfile"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//val df = sqlContext.read.format("json").load("./data/jsonfile)</span><span class="token comment" spellcheck="true">//将df转化成RDD</span><span class="token comment" spellcheck="true">//val rdd = df.rdd</span>df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>de<span class="token punctuation">.</span>printSchema<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//select * from table</span>df<span class="token punctuation">.</span>select<span class="token punctuation">(</span>df<span class="token punctuation">.</span>col<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//select name from table where age>19</span>df<span class="token punctuation">.</span>select<span class="token punctuation">(</span>df<span class="token punctuation">.</span>col<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>df<span class="token punctuation">.</span>col<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>where<span class="token punctuation">(</span>df<span class="token punctuation">.</span>col<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gt<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//select count(*) from table group by age</span>df<span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span>df<span class="token punctuation">.</span>col<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用sql </span><span class="token comment" spellcheck="true">//注册临时表</span>df<span class="token punctuation">.</span>registerTempTable<span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token keyword">val</span> result <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select * from table"</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、通过Json格式的RDD创建DataFrame"><a href="#2、通过Json格式的RDD创建DataFrame" class="headerlink" title="2、通过Json格式的RDD创建DataFrame"></a>2、通过Json格式的RDD创建DataFrame</h2><p><strong><code>Java</code></strong></p><pre class="line-numbers language-java"><code class="language-java">SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"jsonRdd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JavaSparkContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>SQLContext sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建RDD</span>JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> nameRDD <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;'name','zs','age','18'&amp;#125;"</span><span class="token punctuation">,</span><span class="token string">"&amp;#123;\"name\",\"ls\",\"age\",\"21\"&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> scoreRDD <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;'name':'zs','score':'90'&amp;#125;"</span><span class="token punctuation">,</span><span class="token string">"&amp;#123;\"name\":\"ls\",\"score\":\"88\"&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将jsonRDD转换成DataFrame</span>DataFrame namedf <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>nameRDD<span class="token punctuation">)</span><span class="token punctuation">;</span>DataFrame scoredf <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>scoreRDD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为df注册临时表</span>namedf<span class="token punctuation">.</span><span class="token function">registerTempTable</span><span class="token punctuation">(</span><span class="token string">"nameTable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scoredf<span class="token punctuation">.</span><span class="token function">registerTempTable</span><span class="token punctuation">(</span><span class="token string">"scoreTable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用sql查询</span>DataFrame df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select nameTable.name,nameTable.age,"</span><span class="token operator">+</span>                             <span class="token string">"scoretable.score from nameTable join scoreTabel"</span><span class="token operator">+</span>                              <span class="token string">"on nameTable.name = scoreTable.name "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>df<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Scala</code></strong></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"jsonRdd"</span><span class="token punctuation">)</span><span class="token keyword">val</span> context <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token keyword">val</span> sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> SQLContext<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建RDD</span><span class="token keyword">val</span> nameRDD <span class="token operator">=</span> context<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span> <span class="token string">"&amp;#123;'name','zs','age','18'&amp;#125;"</span><span class="token punctuation">,</span><span class="token string">"&amp;#123;\"name\",\"ls\",\"age\",\"21\"&amp;#125;"</span><span class="token punctuation">)</span><span class="token keyword">val</span> scoreRDD <span class="token operator">=</span> context<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>                                                     <span class="token string">"&amp;#123;'name':'zs','score':'90'&amp;#125;"</span><span class="token punctuation">,</span><span class="token string">"&amp;#123;\"name\":\"ls\",\"score\":\"88\"&amp;#125;"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取dataFrame</span><span class="token keyword">val</span> namedf <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>json<span class="token punctuation">(</span>nameRDD<span class="token punctuation">)</span><span class="token keyword">val</span> scoredf <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>json<span class="token punctuation">(</span>scoreRDD<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//为DataFrame指定临时表</span>namedf<span class="token punctuation">.</span>registerTempTable<span class="token punctuation">(</span><span class="token string">"nameTable"</span><span class="token punctuation">)</span>scoredf<span class="token punctuation">.</span>registerTempTable<span class="token punctuation">(</span><span class="token string">"scoreTable"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//使用sql</span><span class="token keyword">val</span> df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select nameTable.name,nameTable.age,"</span><span class="token operator">+</span>                         <span class="token string">"scoretable.score from nameTable join scoreTabel"</span><span class="token operator">+</span>                         <span class="token string">"on nameTable.name = scoreTable.name "</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、非Json格式的文件创建DataFrame"><a href="#3、非Json格式的文件创建DataFrame" class="headerlink" title="3、非Json格式的文件创建DataFrame"></a>3、非Json格式的文件创建DataFrame</h2><h3 id="1）通过反射的方式将非json格式的RDD转换成DataFrame（不推荐）"><a href="#1）通过反射的方式将非json格式的RDD转换成DataFrame（不推荐）" class="headerlink" title="1）通过反射的方式将非json格式的RDD转换成DataFrame（不推荐）"></a>1）通过反射的方式将非json格式的RDD转换成DataFrame（不推荐）</h3><ul><li>自定义类要实现序列化</li><li>自定义类的访问级别是public</li><li>RDD转换成DataFrame后会根据映射按ASCII码排序</li><li>将DataFrame转换成RDD时，获取字段的范式有两种：<ul><li>1）row.getInt(0）；df.getString(1) 通过下标获取，返回Row类型的数据，注意列顺序问题（不推荐）</li><li>2）row.getAs(“列名”)  通过列名获取对应列值（推荐）</li></ul></li></ul><p><strong><code>Java</code></strong>:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bd<span class="token punctuation">.</span>java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>dataframe<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String id <span class="token punctuation">;</span>    <span class="token keyword">private</span>  String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>        <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Person [id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"RDD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JavaSparkContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>SQLContext sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取RDD（文件格式：1,zhangsan,18）</span>JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> lineRDD <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"./data/person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反射</span>JavaRDD<span class="token operator">&lt;</span>Person<span class="token operator">></span> personRDD <span class="token operator">=</span>     lineRDD<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Funcation</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Person <span class="token function">call</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            person<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            person<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            person<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> person<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*传入Person.class后，sqlContext就通过反射的方式创建DataFrame因为在底层通过反射的方式可以获得Person类的所有field，再结合RDD，即可创建DataFrame*/</span><span class="token comment" spellcheck="true">//将RDD转换成DataFram</span>DataFrame df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token punctuation">(</span>personRDD<span class="token punctuation">,</span>Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>df<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>df<span class="token punctuation">.</span><span class="token function">printSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span><span class="token function">registerTempTable</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DataFrame sqldf <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select * from table"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sqldf<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将DataFrame转换成RDD（两种方式）</span><span class="token comment" spellcheck="true">//因为排序的原因：df中列的顺序变为：age ， id ， name</span>JavaRDD<span class="token operator">&lt;</span>Row<span class="token operator">></span> javaRDD <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">javaRDD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JavaRDD<span class="token operator">&lt;</span>Person<span class="token operator">></span> map <span class="token operator">=</span>     javaRDD<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>Row<span class="token punctuation">,</span>Person<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Person <span class="token function">call</span><span class="token punctuation">(</span>Row row<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        p.setId(row.getString(1));</span><span class="token comment" spellcheck="true">//        p.setName(row.getString(2));</span><span class="token comment" spellcheck="true">//        p.setAge(row.getInt(0));</span>        p<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>row<span class="token punctuation">.</span><span class="token function">getAs</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>row<span class="token punctuation">.</span><span class="token function">getAs</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span>row<span class="token punctuation">.</span><span class="token function">getAs</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoidFunction</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Scala</code></strong></p><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span> conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"rddreflect"</span><span class="token punctuation">)</span> <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span> <span class="token keyword">val</span> sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> SQLContext<span class="token punctuation">(</span>sc<span class="token punctuation">)</span> <span class="token keyword">val</span> lineRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"./data/person"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//文件格式：1,zhangsan,18</span><span class="token comment" spellcheck="true">//将RDD转换成DataFrame</span><span class="token keyword">val</span> personRDD <span class="token operator">=</span> linRDD<span class="token punctuation">.</span>map<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">val</span> person <span class="token operator">=</span> Person<span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Intger<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> person<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将personRDD转化成DataFrame                     </span><span class="token keyword">val</span> df <span class="token operator">=</span> personRDD<span class="token punctuation">.</span>toDF<span class="token punctuation">(</span><span class="token punctuation">)</span> df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将DataFrame转换成RDD</span><span class="token keyword">val</span> rdd <span class="token operator">=</span> df<span class="token punctuation">.</span>rdd<span class="token keyword">val</span> personRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>map<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   Person<span class="token punctuation">(</span>x<span class="token punctuation">.</span>getAs<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span>getAs<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>x<span class="token punctuation">.</span>getAs<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> personRDD<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>context<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）动态创建Schema，将非json格式RDD转成DataFrame"><a href="#2）动态创建Schema，将非json格式RDD转成DataFrame" class="headerlink" title="2）动态创建Schema，将非json格式RDD转成DataFrame"></a>2）动态创建Schema，将非json格式RDD转成DataFrame</h3><p><strong><code>Java</code></strong></p><pre class="line-numbers language-java"><code class="language-java">SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"rddStruct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JavaSparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>SQLContext sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> lineRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"./data/person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文件格式：1,zhangsan,18</span><span class="token comment" spellcheck="true">//将RDD转换成DataFrame</span><span class="token comment" spellcheck="true">//将RDD转成Row类型的RDD</span><span class="token keyword">final</span> JavaRDD<span class="token operator">&lt;</span>Row<span class="token operator">></span> rowRDD <span class="token operator">=</span>    lineRDD<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Row<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Row <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             val row <span class="token operator">=</span> RowFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>             s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>             s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> row<span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态创建DataFrame的的元数据（Schema），字段的来源：字符串或外部数据库</span>List<span class="token operator">&lt;</span>StructField<span class="token operator">></span> asList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>    DataTypes<span class="token punctuation">.</span><span class="token function">createStructField</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>DataTypes<span class="token punctuation">.</span>StringType<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    DataTypes<span class="token punctuation">.</span><span class="token function">createStructField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>DataTypes<span class="token punctuation">.</span>StringType<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>，    DataTypes<span class="token punctuation">.</span>createStructField（<span class="token string">"age"</span><span class="token punctuation">,</span>DataTypes<span class="token punctuation">.</span>IntegerType<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StructType schema <span class="token operator">=</span> DataTypes<span class="token punctuation">.</span><span class="token function">createStructType</span><span class="token punctuation">(</span>asList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取DataFrame</span>DataFrame df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">createDataFrame</span><span class="token punctuation">(</span>rowRDD<span class="token punctuation">,</span>schema<span class="token punctuation">)</span><span class="token punctuation">;</span>df<span class="token punctuation">.</span><span class="token function">printSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>df<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将dataframe转换成RDD</span><span class="token comment" spellcheck="true">//JavaRDD&lt;Row> javaRDD = df.javaRDD();</span><span class="token comment" spellcheck="true">//    javaRDD.foreach(new VoidFunction&lt;Row>() &amp;#123;</span><span class="token comment" spellcheck="true">//            private static final long serialVersionUID = 1L;</span><span class="token comment" spellcheck="true">//            @Override</span><span class="token comment" spellcheck="true">//            public void call(Row row) throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//                System.out.println(row.getString(0));</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//                System.out.println(row);</span><span class="token comment" spellcheck="true">//            &amp;#125;</span><span class="token comment" spellcheck="true">//        &amp;#125;);</span>context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Scala</code></strong></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"rddStruct"</span><span class="token punctuation">)</span><span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token keyword">val</span> sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> SQLContext<span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token keyword">val</span> lineRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"./data/person"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//文件格式：1,zhangsan,18</span><span class="token comment" spellcheck="true">//将RDD转换成RowRDD</span><span class="token keyword">val</span> rowRDD <span class="token operator">=</span> lineRDD<span class="token punctuation">.</span>map<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> split <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>    RowFactory<span class="token punctuation">.</span>create<span class="token punctuation">(</span>split<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>split<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Integer<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span>split<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取schema</span><span class="token keyword">val</span> schema <span class="token operator">=</span> StructType<span class="token punctuation">(</span>List<span class="token punctuation">(</span>StructField<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>StringType，<span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>StructField<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>StringType<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>StructField<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>IntegerType<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>createDataFrame<span class="token punctuation">(</span>rowRDD<span class="token punctuation">,</span>shema<span class="token punctuation">)</span>df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>printSchema<span class="token punctuation">(</span><span class="token punctuation">)</span>                      context<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、读取parquet文件创建DataFrame"><a href="#4、读取parquet文件创建DataFrame" class="headerlink" title="4、读取parquet文件创建DataFrame"></a>4、读取parquet文件创建DataFrame</h2><p><strong><code>注意：</code></strong></p><ul><li><p>可以将 DataFrame 存储成 parquet 文件。保存成 parquet 文件的方式有两种</p></li><li><pre><code>df.write().mode(SaveMode.Overwrite)format(&quot;parquet&quot;).save(&quot;./sparksql/parquet&quot;);df.write().mode(SaveMode.Overwrite).parquet(&quot;./sparksql/parquet&quot;);</code></pre></li><li><p>SaveMode 指定文件保存时的模式。</p></li><li><blockquote><p>Overwrite：覆盖<br>Append：追加<br>ErrorIfExists：如果存在就报错<br>Ignore：如果存在就忽略</p></blockquote></li></ul><p><strong><code>Java</code></strong></p><pre class="line-numbers language-java"><code class="language-java">SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"parquet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JavaSparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>SQLContext sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> jsonRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"./data/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取json格式的文件</span>DataFrame df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>jsonRDD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sqlContext.read().format("json").load("./spark/json");</span>df<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** * 将DataFrame保存成parquet文件， * SaveMode指定存储文件时的保存模式: *  Overwrite：覆盖 *     Append:追加 *  ErrorIfExists:如果存在就报错 *     Ignore:如果存在就忽略 */</span><span class="token comment" spellcheck="true">// 保存成parquet文件有以下两种方式：</span>df<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mode</span><span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Overwrite<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parquet</span><span class="token punctuation">(</span><span class="token string">"./sparksql/parquet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//df.write().mode(SaveMode.Overwrite).format("parquet").save("data/parquet");</span> <span class="token comment" spellcheck="true">/**  * 加载parquet文件成DataFrame      * 加载parquet文件有以下两种方式：      */</span>  load <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parquet</span><span class="token punctuation">(</span><span class="token string">"data/parquet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//     DataFrame load = sqlContext.read().format("parquet").load("data/parquet");</span>load<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Scala</code></strong></p><pre class="line-numbers language-scala"><code class="language-scala">    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"parquet"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token keyword">val</span> sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> SQLContext<span class="token punctuation">(</span>sc<span class="token punctuation">)</span>    <span class="token keyword">val</span> jsonRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/json"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>json<span class="token punctuation">(</span>jsonRDD<span class="token punctuation">)</span>    df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**      * 将DF保存为parquet文件      */</span>    df<span class="token punctuation">.</span>write<span class="token punctuation">.</span>mode<span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Overwrite<span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"parquet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"data/parquet"</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>write<span class="token punctuation">.</span>mode<span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Overwrite<span class="token punctuation">)</span><span class="token punctuation">.</span>parquet<span class="token punctuation">(</span><span class="token string">"data/parquet"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 读取parquet文件     */</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>parquet<span class="token punctuation">(</span><span class="token string">"data/parquet"</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"parquet"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"data/parquet"</span><span class="token punctuation">)</span>    result<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、读取JDBC中的数据创建DataFrame（MySQL为例）"><a href="#5、读取JDBC中的数据创建DataFrame（MySQL为例）" class="headerlink" title="5、读取JDBC中的数据创建DataFrame（MySQL为例）"></a>5、读取JDBC中的数据创建DataFrame（MySQL为例）</h2><p>两种方式创建 DataFrame</p><p><strong><code>Java</code></strong></p><pre class="line-numbers language-java"><code class="language-java">        SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         *     配置join或者聚合操作shuffle数据时分区的数量         */</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"spark.sql.shuffle.partitions"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaSparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        SQLContext sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 第一种方式读取MySql数据库表，加载为DataFrame         */</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/spark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dbtable"</span><span class="token punctuation">,</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataFrame person <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">registerTempTable</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 第二种方式读取MySql数据表加载为DataFrame         */</span>        DataFrameReader reader <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/spark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span> <span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token string">"dbtable"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataFrame score <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        score<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        score<span class="token punctuation">.</span><span class="token function">registerTempTable</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataFrame result <span class="token operator">=</span>               sqlContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select person.id,person.name,person.age,score.score "</span>                        <span class="token operator">+</span> <span class="token string">"from person,score "</span>                        <span class="token operator">+</span> <span class="token string">"where person.name = score.name  and score.score> 90"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">registerTempTable</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DataFrame df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select id,name,age,score from result where ag>18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        df<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 将DataFrame结果保存到Mysql中         */</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * SaveMode:         * Overwrite：覆盖         * Append:追加         * ErrorIfExists:如果存在就报错         * Ignore:如果存在就忽略         *         */</span>        result<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mode</span><span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Append<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">jdbc</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/spark"</span><span class="token punctuation">,</span> <span class="token string">"result2"</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----Finish----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>Scala</code></strong></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>        <span class="token keyword">val</span> sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> SQLContext<span class="token punctuation">(</span>sc<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/**         * 第一种方式读取Mysql数据库表创建DF         */</span>        <span class="token keyword">val</span> options <span class="token operator">=</span> <span class="token keyword">new</span> HashMap<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        options<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"jdbc:mysql://192.168.100.111:3306/spark"</span><span class="token punctuation">)</span>        options<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span>        options<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span>        options<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">)</span>        options<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"dbtable"</span><span class="token punctuation">,</span><span class="token string">"person"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> person <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>options<span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>        person<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        person<span class="token punctuation">.</span>registerTempTable<span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/**         * 第二种方式读取Mysql数据库表创建DF         */</span>        <span class="token keyword">val</span> reader <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>read<span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"jdbc"</span><span class="token punctuation">)</span>        reader<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"jdbc:mysql://192.168.100.111:3306/spark"</span><span class="token punctuation">)</span>        reader<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span>        reader<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span>        reader<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"1234"</span><span class="token punctuation">)</span>        reader<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">"dbtable"</span><span class="token punctuation">,</span> <span class="token string">"score"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> score <span class="token operator">=</span> reader<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>        score<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        score<span class="token punctuation">.</span>registerTempTable<span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> result <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select person.id,person.name,score.score from                                        person,score where person.name = score.name"</span><span class="token punctuation">)</span>        result<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/**         * 将数据写入到Mysql表中         */</span>        <span class="token keyword">val</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> Properties<span class="token punctuation">(</span><span class="token punctuation">)</span>        properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span>        properties<span class="token punctuation">.</span>setProperty<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">)</span>        result<span class="token punctuation">.</span>write<span class="token punctuation">.</span>mode<span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Append<span class="token punctuation">)</span><span class="token punctuation">.</span>               jdbc<span class="token punctuation">(</span><span class="token string">"jdbc:mysql://192.168.100.111:3306/spark"</span><span class="token punctuation">,</span> <span class="token string">"result"</span><span class="token punctuation">,</span> properties<span class="token punctuation">)</span>                sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、读取Hive中的数据加载成DataFrame"><a href="#6、读取Hive中的数据加载成DataFrame" class="headerlink" title="6、读取Hive中的数据加载成DataFrame"></a>6、读取Hive中的数据加载成DataFrame</h2><ul><li><blockquote><p> HiveContext 是 SQLContext 的子类，连接 Hive 建议使用HiveContext</p></blockquote></li><li><blockquote><p>由于本地没有 Hive 环境，要提交到集群运行，提交命令：</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit--master spark://node00:7077,node01:7077--executor-cores 1--executor-memory 1G--total-executor-cores 1--class com.bd.sparksql.dataframe.CreateDFFromHive/usr/soft/spark-test.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul><h3 id="代码详情"><a href="#代码详情" class="headerlink" title="代码详情"></a>代码详情</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a><code>Java</code></h4><pre class="line-numbers language-java"><code class="language-java">SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"hive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JavaSparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//HiveContext是SQLContext的子类。（2.0之后就将两个类就合成一个类了）</span>HiveContext hiveContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HiveContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于操作Hive上的数据</span><span class="token comment" spellcheck="true">//创建实例库</span>hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"CREATE database spark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//切换实例库</span>hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"USE spark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除已存在的表</span>hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS student_infos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在hive中创建student_infos表</span>hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS student_infos (name STRING,age INT) row format delimited fields terminated by '\t' "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//从本地加载数据到表中</span>hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"load data local inpath '/root/student_infos' into table student_infos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS student_scores"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS student_scores (name STRING, score INT) row format delimited fields terminated by '\t'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"LOAD DATA "</span>                <span class="token operator">+</span> <span class="token string">"LOCAL INPATH '/root/student_scores'"</span>                <span class="token operator">+</span> <span class="token string">"INTO TABLE student_scores"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 查询表生成DataFrame         */</span><span class="token comment" spellcheck="true">//        DataFrame df = hiveContext.table("student_infos");//第二种读取Hive表加载DF方式</span>DataFrame goodStudentsDF <span class="token operator">=</span> hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"SELECT si.name, si.age, ss.score "</span>                <span class="token operator">+</span> <span class="token string">"FROM student_infos si "</span>                <span class="token operator">+</span> <span class="token string">"JOIN student_scores ss "</span>                <span class="token operator">+</span> <span class="token string">"ON si.name=ss.name "</span>                <span class="token operator">+</span> <span class="token string">"WHERE ss.score>=80"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将df注册成临时表，才能使用sql</span>        goodStudentsDF<span class="token punctuation">.</span><span class="token function">registerTempTable</span><span class="token punctuation">(</span><span class="token string">"goodstudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataFrame result <span class="token operator">=</span> hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select * from goodstudent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 将结果保存到hive表 good_student_infos         */</span>        hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS good_student_infos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        goodStudentsDF<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mode</span><span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Overwrite<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saveAsTable</span><span class="token punctuation">(</span><span class="token string">"good_student_infos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DataFrame table <span class="token operator">=</span> hiveContext<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string">"good_student_infos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Row<span class="token punctuation">[</span><span class="token punctuation">]</span> goodStudentRows <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Row goodStudentRow <span class="token operator">:</span> goodStudentRows<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>go odStudentRow<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a><code>Scala</code></h4><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"HiveSource"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * HiveContext是SQLContext的子类。     */</span>    <span class="token keyword">val</span> hiveContext <span class="token operator">=</span> <span class="token keyword">new</span> HiveContext<span class="token punctuation">(</span>sc<span class="token punctuation">)</span>    hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"use spark"</span><span class="token punctuation">)</span>    hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"drop table if exists student_infos"</span><span class="token punctuation">)</span>    hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"create table if not exists student_infos (name string,age int) row format  delimited fields terminated by '\t'"</span><span class="token punctuation">)</span>    hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"load data local inpath '/root/test/student_infos' into table student_infos"</span><span class="token punctuation">)</span>    hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"drop table if exists student_scores"</span><span class="token punctuation">)</span>    hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"create table if not exists student_scores (name string,score int) row format delimited fields terminated by '\t'"</span><span class="token punctuation">)</span>    hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"load data local inpath '/root/test/student_scores' into table student_scores"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> df <span class="token operator">=</span> hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select si.name,si.age,ss.score from student_infos si,student_scores ss where si.name = ss.name"</span><span class="token punctuation">)</span>    hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"drop table if exists good_student_infos"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 将结果写入到hive表中     */</span>    df<span class="token punctuation">.</span>write<span class="token punctuation">.</span>mode<span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Overwrite<span class="token punctuation">)</span><span class="token punctuation">.</span>saveAsTable<span class="token punctuation">(</span><span class="token string">"good_student_infos"</span><span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关于序列化你要知道的！！"><a href="#关于序列化你要知道的！！" class="headerlink" title="关于序列化你要知道的！！"></a>关于序列化你要知道的！！</h1><h1 id="四、Spark-On-Hive-的配置"><a href="#四、Spark-On-Hive-的配置" class="headerlink" title="四、Spark On Hive 的配置"></a>四、Spark On Hive 的配置</h1><h2 id="Hive配置：-（在Linux端）"><a href="#Hive配置：-（在Linux端）" class="headerlink" title="**Hive配置：**（在Linux端）"></a>**<code>Hive配置：</code>**（在Linux端）</h2><h3 id="（1）在Spark客户端配置Spark-On-Hive"><a href="#（1）在Spark客户端配置Spark-On-Hive" class="headerlink" title="（1）在Spark客户端配置Spark  On  Hive"></a>（1）在Spark客户端配置Spark  On  Hive</h3><p>在Spark客户端安装包下spark-1.6.0/conf路径下创建hive-site.xml：</p><p>编辑内容：配置hive的metastore路径（即hive服务端的IP）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.uris<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>thrift://192.168.11.131:9083<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）启动-zookeeper-集群，启动-HDFS-集群。"><a href="#（2）启动-zookeeper-集群，启动-HDFS-集群。" class="headerlink" title="（2）启动 zookeeper 集群，启动 HDFS 集群。"></a>（2）启动 zookeeper 集群，启动 HDFS 集群。</h3><pre class="line-numbers language-shell"><code class="language-shell">zkServer.sh start  (3台)start-all.sh       (任一台)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>注意：</code></p><blockquote><p>由于我们这里是使用Spark作为计算框架 所以不需要启动yarn</p><p>启动yarn是在使用MapReduce作为计算框架时</p></blockquote><h3 id="（3）启动spark服务（在spark解压目录的-sbin路径下）"><a href="#（3）启动spark服务（在spark解压目录的-sbin路径下）" class="headerlink" title="（3）启动spark服务（在spark解压目录的/sbin路径下）"></a>（3）启动spark服务（在spark解压目录的/sbin路径下）</h3><pre class="line-numbers language-shell"><code class="language-shell">./start-all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（4）启动mysql服务"><a href="#（4）启动mysql服务" class="headerlink" title="（4）启动mysql服务"></a>（4）启动mysql服务</h3><p>(mysql  :node00     hive  ：服务端：node02    ； 客户端 ： node01)</p><ul><li>检查mysql服务是否启动：</li></ul><blockquote><p>命令：</p><pre><code>chkconfig</code></pre><p>显示：</p><blockquote><p>mysqld             0:off    1:off    2:off    3:off    4:off    5:off    6:off</p></blockquote><p>没有启动</p></blockquote><ul><li>启动mysql服务</li></ul><blockquote><p>命令：</p><pre><code>[root@node00 conf]# service mysqld startStarting mysqld:                                           [  OK  ]</code></pre></blockquote><ul><li>登录mysql</li></ul><blockquote><pre><code>[root@node00 conf]# mysql -u root -pEnter password: 123456mysql&gt; </code></pre></blockquote><h3 id="（5）启动-Hive服务端"><a href="#（5）启动-Hive服务端" class="headerlink" title="（5）启动 Hive服务端"></a>（5）启动 Hive服务端</h3><p>启动 Hive 的 metastore 服务</p><pre class="line-numbers language-shell"><code class="language-shell">#后台启动hive服务端hive --service metastore &#启动打印服务日志Start Hive MetaStore Server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（6）打开hive交互式页面-在任一台"><a href="#（6）打开hive交互式页面-在任一台" class="headerlink" title="（6）打开hive交互式页面(在任一台)"></a>（6）打开hive交互式页面(在任一台)</h3><pre><code>hive</code></pre><p>创建数据库spark</p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">database</span> spark<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="（7）启动-SparkShell"><a href="#（7）启动-SparkShell" class="headerlink" title="（7）启动 SparkShell"></a>（7）启动 SparkShell</h3><p>读取 Hive 中的表总数，对比 hive 中查询同一表查询总数测试时间。</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-shell--master spark://node3:7077  ,node01:7077--executor-cores 1--executor-memory 1g--total-executor-cores 1import org.apache.spark.sql.hive.HiveContextval hc = new HiveContext(sc)hc.sql("show databases").showhc.sql("user spark").showhc.sql("select count(*) from spark.ods_cps_data").show./spark-shell--master spark://node3:7077  --executor-cores 1--executor-memory 1g--total-executor-cores 1import org.apache.spark.sql.hive.HiveContextval hc = new HiveContext(sc)hc.sql("show databases").showhc.sql("user spark").showhc.sql("select count(*) from spark.ods_cps_data").show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>注意</code></strong></p><blockquote><p>如果使用 Spark on Hive 查询数据时，出现错误：</p><pre><code>Cause by: java.net.UknownHostException： XXX</code></pre><p>找不到 HDFS 集群路径，要在客户端机器 conf/spark-env.sh 中设置HDFS 的 路 径 ：</p><pre><code>HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</code></pre></blockquote><h2 id="spark-On-hive：（在windows端）"><a href="#spark-On-hive：（在windows端）" class="headerlink" title="spark On hive：（在windows端）"></a><strong>spark On hive</strong>：（在windows端）</h2><h3 id="1、配置文件："><a href="#1、配置文件：" class="headerlink" title="1、配置文件："></a>1、<code>配置文件：</code></h3><p>在项目中新建文件夹conf（标记为资源文件）：</p><p>添加一下三个配置文件:（其中hive-site.xml文件用于连接hive 服务端， 其余两个文件用于连接hdfs）</p><ul><li><h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token comment" spellcheck="true">&lt;!--  Licensed under the Apache License, Version 2.0 (the "License");  you may not use this file except in compliance with the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License. See accompanying LICENSE file.--></span><span class="token comment" spellcheck="true">&lt;!-- Put site-specific property overrides in this file. --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.nameservices<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Sukie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.namenodes.Sukie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>nn1,nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.Sukie.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node00:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.Sukie.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node00:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.Sukie.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node00:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.Sukie.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node00:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/var/hadoop/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.fsdataset.volume.choosing.policy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.hdfs.server.datanode.fsdataset.AvailableSpaceVolumeChoosingPolicy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.shared.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>qjournal://node1:8485;node2:8485;node3:8485/Sukie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.journalnode.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/var/jn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.client.failover.proxy.provider.shsxt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.methods<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>sshfence<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.ssh.private-key-files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/.ssh/id_rsa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.automatic-failover.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.max.xcievers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>4096<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.balance.bandwidthPerSec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10485760<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.socket.timeout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>900000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.handler.count<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.handler.count<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.socket.write.timeout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1800000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token comment" spellcheck="true">&lt;!--  Licensed under the Apache License, Version 2.0 (the "License");  you may not use this file except in compliance with the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License. See accompanying LICENSE file.--></span><span class="token comment" spellcheck="true">&lt;!-- Put site-specific property overrides in this file. --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://Sukie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ha.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node1:2181,node2:2181,node3:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/var/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h4 id="hive-site-xml"><a href="#hive-site-xml" class="headerlink" title="hive-site.xml"></a>hive-site.xml</h4></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.uris<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>thrift://192.168.11.131:9083<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、本地运行"><a href="#2、本地运行" class="headerlink" title="2、本地运行"></a>2、本地运行</h3><p><code>注意bug</code></p><blockquote><p>一、若需要将上面类打包到Linux系统上运行时，代码中conf.setMaster(“local”）中setMaster(“local”)就不需要了</p><p>否则会报错：</p><p>xxxxxx</p></blockquote><blockquote><p>二、OOM(内存溢出)</p><p>Edit Configurations  —&gt;添加VM options的配置</p></blockquote><pre><code>-Xms800m -Xmx800m  -XX:PermSize=64M -XX:MaxNewSize=256m -XX:MaxPermSize=128m</code></pre><blockquote><p>三、java.io.IOException: Failed to delete: C:\Users\SunRise\AppData\Local\Temp\spark-64f2b5a7-f8b8-4da4-b1af-137bb278e3a4</p><p>临时目录 删除失败，不影响程序的正常运行</p></blockquote><blockquote><p>四、org.apache.hadoop.hive.ql.metadata.HiveException: copyFiles: error while checking/creating destination directory!!</p><p>数据加载失败，远程连接拒绝：因为我把core-site.xml  、 hdfs-site.xml  这两个资源文件删除了。</p><p>配置这两个作为资源文件时，注意在使用textFile( )时要取消，因为要避免从hdfs上拿文件</p></blockquote><h3 id="3、打包在Linux上运行"><a href="#3、打包在Linux上运行" class="headerlink" title="3、打包在Linux上运行"></a>3、打包在Linux上运行</h3><ul><li><h4 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h4></li></ul><blockquote><p>1、点击Project Structure—&gt;Artifacts—&gt; ‘+’—&gt;JAR—&gt;如图：所使用的的Spark包就不用打进去了，因为Linux中也有。</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0hfk3nqwfj30qg0g20tt.jpg"></p><p>2、点击Build—&gt;Build Project ,之后就会在指定路径下生成对应的jar包</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0hfjxuoi5j30vo0bxjsy.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0hfkaf6rej30r40czq4l.jpg"></p><p>3、将生成的jar包放在Linux系统上对应的Spark客户端节点上</p></blockquote><p><code>注意bug</code></p><ul><li><p>如果打包项目的时候，没有将hive-site.xml文件打包进去，运行时，会报错，说数据库不存在</p></li><li><blockquote><p>解决方法：将它打包进去，或者将该文件放在spark解压目录的conf路径下</p></blockquote></li></ul><p>启动spark，</p><pre><code>./start-all.sh</code></pre><p>启动提交前提：</p><ul><li>zookeeper集群启动</li><li>hdfs集群启动</li><li>hive服务端启动</li><li>spark集群启动</li></ul><p>启动提交（在node00上，保证要有，两个文件，+  运行jar包）</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit --master spark://node00:7077 --class com.bd.spark.java.sparkstream.CreateDFFromHive /usr/soft/spark-test.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行结果：</p><blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0hg723i9kj30qf0e50u8.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0hg5sximqj30qf0e5dhq.jpg"></p></blockquote><h1 id="五、悬而未决"><a href="#五、悬而未决" class="headerlink" title="五、悬而未决"></a>五、悬而未决</h1><h2 id="1、关于序列化的问题你要知道的"><a href="#1、关于序列化的问题你要知道的" class="headerlink" title="1、关于序列化的问题你要知道的"></a>1、关于序列化的问题你要知道的</h2><pre><code>测试java中以下几种情况下不被序列化的问题：1.反序列化时serializable 版本号不一致时会导致不能反序列化。2.子类中实现了serializable接口，父类中没有实现，父类中的变量不能被序列化,序列化后父类中的变量会得到null。注意：父类实现serializable接口,子类没有实现serializable接口时，子类可以正常序列化3.被关键字transient修饰的变量不能被序列化。4.静态变量不能被序列化，属于类，不属于方法和对象，所以不能被序列化。</code></pre><h2 id="2、储存-DataFrame"><a href="#2、储存-DataFrame" class="headerlink" title="2、储存 DataFrame"></a>2、储存 DataFrame</h2><ul><li><p>将 DataFrame 存储为 parquet 文件。</p></li><li><p>将 DataFrame 存储到 JDBC 数据库。</p></li><li><p>将 DataFrame 存储到 Hive 表。</p></li></ul><h1 id="六、自定义函数UDF和UDAF"><a href="#六、自定义函数UDF和UDAF" class="headerlink" title="六、自定义函数UDF和UDAF"></a>六、自定义函数UDF和UDAF</h1><h2 id="1、UDF-用户自定义函数"><a href="#1、UDF-用户自定义函数" class="headerlink" title="1、UDF:用户自定义函数"></a>1、UDF:用户自定义函数</h2><p><code>Java</code></p><pre class="line-numbers language-java"><code class="language-java">包：<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataFrame<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Row<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>RowFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>UDF1<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>UDF2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>DataTypes<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>StructField<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>StructType<span class="token punctuation">;</span> main<span class="token operator">:</span>SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"udf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaSparkContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        SQLContext sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> paraRDD <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"zs1"</span><span class="token punctuation">,</span><span class="token string">"ls12"</span><span class="token punctuation">,</span><span class="token string">"ww123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//rowRDD</span>        JavaRDD<span class="token operator">&lt;</span>Row<span class="token operator">></span> rowRDD <span class="token operator">=</span> paraRDD<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Row<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Row <span class="token function">call</span><span class="token punctuation">(</span>String v1<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> RowFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//schema</span>        List<span class="token operator">&lt;</span>StructField<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>StructField<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>DataTypes<span class="token punctuation">.</span><span class="token function">createStructField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>DataTypes<span class="token punctuation">.</span>StringType<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StructType schema <span class="token operator">=</span> DataTypes<span class="token punctuation">.</span><span class="token function">createStructType</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//DataFrame</span>        DataFrame df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">createDataFrame</span><span class="token punctuation">(</span>rowRDD<span class="token punctuation">,</span>schema<span class="token punctuation">)</span><span class="token punctuation">;</span>        df<span class="token punctuation">.</span><span class="token function">registerTempTable</span><span class="token punctuation">(</span><span class="token string">"names"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//udf</span>      sqlContext<span class="token punctuation">.</span><span class="token function">udf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"StringLen"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">UDF1</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>DataTypes<span class="token punctuation">.</span>IntegerType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//udf2</span>      sqlContext<span class="token punctuation">.</span><span class="token function">udf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"StringLens"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UDF2</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> Integer s2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>s2<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>DataTypes<span class="token punctuation">.</span>IntegerType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//使用sql</span>    sqlContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select name ,StringLens(name,100) as length from names"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Scala</code></p><pre class="line-numbers language-scala"><code class="language-scala">    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"udf"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> context <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token keyword">val</span> sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> SQLContext<span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> context<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>Array<span class="token punctuation">(</span><span class="token string">"zs1"</span><span class="token punctuation">,</span><span class="token string">"ls12"</span><span class="token punctuation">,</span><span class="token string">"ww123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">val</span> rowRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     RowFactory<span class="token punctuation">.</span>create<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> field <span class="token operator">=</span> Array<span class="token punctuation">(</span>DataTypes<span class="token punctuation">.</span>createStructField<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>DataTypes<span class="token punctuation">.</span>StringType<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> schema <span class="token operator">=</span> DataTypes<span class="token punctuation">.</span>createStructType<span class="token punctuation">(</span>field<span class="token punctuation">)</span>    <span class="token keyword">val</span> df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>createDataFrame<span class="token punctuation">(</span>rowRDD<span class="token punctuation">,</span>schema<span class="token punctuation">)</span>    df<span class="token punctuation">.</span>registerTempTable<span class="token punctuation">(</span><span class="token string">"names"</span><span class="token punctuation">)</span>    sqlContext<span class="token punctuation">.</span>udf<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">"StringLen"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      x<span class="token punctuation">.</span>length    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    sqlContext<span class="token punctuation">.</span>udf<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">"StringLens"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span>y<span class="token operator">:</span>Integer<span class="token punctuation">)</span><span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      x<span class="token punctuation">.</span>length<span class="token operator">+</span>y    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>   sqlContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select name , StringLen(name) from names"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sqlContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select name,StringLens(name,100)from names"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    context<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、UDAF-用户自定义聚合函数"><a href="#2、UDAF-用户自定义聚合函数" class="headerlink" title="2、UDAF:用户自定义聚合函数"></a>2、UDAF:用户自定义聚合函数</h2><ul><li><blockquote><p> 实现 UDAF 函数如果要自定义类要实现UserDefinedAgg regateFunction 类</p></blockquote></li></ul><p>功能：实现统计相同值得个数</p><p>数据：</p><pre><code>     *     zhangsan     *     zhangsan     *     lisi     *     lisi     *     wangwu     *     wangwu     *     zhangsan     *     *     select count(*)  from user group by name</code></pre><p><code>Java</code></p><pre class="line-numbers language-java"><code class="language-java">        SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"udaf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaSparkContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        SQLContext sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定了两个分区</span> JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> rdd <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span>       Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span>                <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"wangwu"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaRDD<span class="token operator">&lt;</span>Row<span class="token operator">></span> rowRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Row<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Row <span class="token function">call</span><span class="token punctuation">(</span>String v1<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> RowFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>StructField<span class="token operator">></span> field <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>DataTypes<span class="token punctuation">.</span><span class="token function">createStructField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>DataTypes<span class="token punctuation">.</span>StringType<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StructType schema <span class="token operator">=</span> DataTypes<span class="token punctuation">.</span><span class="token function">createStructType</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        DataFrame df  <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span><span class="token function">createDataFrame</span><span class="token punctuation">(</span>rowRDD<span class="token punctuation">,</span> schema<span class="token punctuation">)</span><span class="token punctuation">;</span>        df<span class="token punctuation">.</span><span class="token function">registerTempTable</span><span class="token punctuation">(</span><span class="token string">"names"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sqlContext<span class="token punctuation">.</span><span class="token function">udf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"CountString"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserDefinedAggregateFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//select name ,StringCount(name) as number from user group by name</span>            <span class="token comment" spellcheck="true">//初始化一个内部的自己定义的值,在Aggregate之前每组数据的初始化结果</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span>MutableAggregationBuffer buffer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//初始化buffer第0位置的元素为0</span>                buffer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"buffer initialize ----"</span><span class="token operator">+</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 更新 可以认为一个一个地将组内的字段值传递进来 实现拼接的逻辑             * buffer.getInt(0)获取的是上一次聚合后的值             * 相当于map端的combiner，combiner就是对每一个map task的处理结果进行一次小聚合             * 大聚和发生在reduce端.             * 这里即是:在进行聚合的时候，每当有新的值进来，对分组后的聚合如何进行计算             */</span>            <span class="token comment" spellcheck="true">//相当于分区内</span>            <span class="token comment" spellcheck="true">//buffer1:表示上一次的累加值   buffer2:本次传进来的值</span>            <span class="token comment" spellcheck="true">//将函数输入的参数理解为一行（Row）</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>MutableAggregationBuffer buffer<span class="token punctuation">,</span> Row arg1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class buffer :"</span><span class="token operator">+</span>buffer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-------"</span><span class="token operator">+</span>buffer<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class  arg1:"</span><span class="token operator">+</span>arg1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-------"</span><span class="token operator">+</span>arg1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>buffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"update----buffer:"</span><span class="token operator">+</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",arg1:"</span><span class="token operator">+</span>arg1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**             * 合并 update操作，             可能是针对一个分组内的部分数据，在某个节点上发生的              但是可能一个分组内的数据，会分布在多个节点上处理             * 此时就要用merge操作，将各个节点上分布式拼接好的串，合并起来             * buffer1.getInt(0) : 大聚合的时候 上一次聚合后的值             * buffer2.getInt(0) : 本次计算传入进来的update的结果             * 这里即是：最后在分布式节点完成后需要进行全局级别的Merge操作             */</span>            <span class="token comment" spellcheck="true">//相当于分区之间</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>MutableAggregationBuffer buffer1<span class="token punctuation">,</span> Row buffer2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class buffer1 :"</span><span class="token operator">+</span>buffer1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"----"</span><span class="token operator">+</span>buffer1<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class buffer2 :"</span><span class="token operator">+</span>buffer2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"----"</span><span class="token operator">+</span>buffer2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer1<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>buffer1<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>buffer2<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"merge：b1:"</span><span class="token operator">+</span>buffer1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",buffer2:"</span><span class="token operator">+</span>buffer2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//指定输入字段的字段及类型</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> StructType <span class="token function">inputSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> DataTypes<span class="token punctuation">.</span><span class="token function">createStructType</span><span class="token punctuation">(</span>                        Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>DataTypes<span class="token punctuation">.</span><span class="token function">createStructField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>DataTypes<span class="token punctuation">.</span>StringType<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 在进行聚合操作的时候所要处理的数据的结果的类型</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> StructType <span class="token function">bufferSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> DataTypes<span class="token punctuation">.</span><span class="token function">createStructType</span><span class="token punctuation">(</span>                       Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>DataTypes<span class="token punctuation">.</span><span class="token function">createStructField</span><span class="token punctuation">(</span><span class="token string">"buffer"</span><span class="token punctuation">,</span>DataTypes<span class="token punctuation">.</span>IntegerType<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//指定UDAF函数计算后返回的结果类型</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> DataType <span class="token function">dataType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> DataTypes<span class="token punctuation">.</span>IntegerType<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//最后返回一个和DataType的类型要一致的类型，返回UDAF最后的计算结果</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">evaluate</span><span class="token punctuation">(</span>Row buffer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//确保一致性 一般用true,用以标记针对给定的一组输入，UDAF是否总是生成相同的结果。</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deterministic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select name , CountString(name) from names"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Scala</code></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkContext<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Row<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>RowFactory<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLContext<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>expressions<span class="token punctuation">.</span>MutableAggregationBuffer<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>expressions<span class="token punctuation">.</span>UserDefinedAggregateFunction<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>DataType<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>DataTypes<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>IntegerType<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>StringType<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types<span class="token punctuation">.</span>StructType<span class="token keyword">class</span> MyUDAF <span class="token keyword">extends</span> UserDefinedAggregateFunction  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 为每个分组的数据执行初始化值</span>  <span class="token keyword">def</span> initialize<span class="token punctuation">(</span>buffer<span class="token operator">:</span> MutableAggregationBuffer<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     buffer<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 每个组，有新的值进来的时候，进行分组对应的聚合值的计算</span>  <span class="token keyword">def</span> update<span class="token punctuation">(</span>buffer<span class="token operator">:</span> MutableAggregationBuffer<span class="token punctuation">,</span> input<span class="token operator">:</span> Row<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> buffer<span class="token punctuation">.</span>getAs<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 最后merger的时候，在各个节点上的聚合值，要进行merge，也就是合并</span>  <span class="token keyword">def</span> merge<span class="token punctuation">(</span>buffer1<span class="token operator">:</span> MutableAggregationBuffer<span class="token punctuation">,</span> buffer2<span class="token operator">:</span> Row<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    buffer1<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> buffer1<span class="token punctuation">.</span>getAs<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>buffer2<span class="token punctuation">.</span>getAs<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输入数据的类型</span>  <span class="token keyword">def</span> inputSchema<span class="token operator">:</span> StructType <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    DataTypes<span class="token punctuation">.</span>createStructType<span class="token punctuation">(</span>        Array<span class="token punctuation">(</span>DataTypes<span class="token punctuation">.</span>createStructField<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> StringType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 聚合操作时，所处理的数据的类型</span>  <span class="token keyword">def</span> bufferSchema<span class="token operator">:</span> StructType <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    DataTypes<span class="token punctuation">.</span>createStructType<span class="token punctuation">(</span>        Array<span class="token punctuation">(</span>DataTypes<span class="token punctuation">.</span>createStructField<span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> IntegerType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 最终函数返回值的类型</span>  <span class="token keyword">def</span> dataType<span class="token operator">:</span> DataType <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    DataTypes<span class="token punctuation">.</span>IntegerType  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 最后返回一个最终的聚合值   要和dataType的类型一一对应</span>  <span class="token keyword">def</span> evaluate<span class="token punctuation">(</span>buffer<span class="token operator">:</span> Row<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Any</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    buffer<span class="token punctuation">.</span>getAs<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保证数据一致性</span>  <span class="token keyword">def</span> deterministic<span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token boolean">true</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> UDAF <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"udaf"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token keyword">val</span> sqlContext <span class="token operator">=</span> <span class="token keyword">new</span> SQLContext<span class="token punctuation">(</span>sc<span class="token punctuation">)</span>    <span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>Array<span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token string">"wangwu"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> rowRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span>map <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>RowFactory<span class="token punctuation">.</span>create<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">val</span> schema <span class="token operator">=</span>DataTypes<span class="token punctuation">.</span>createStructType<span class="token punctuation">(</span>        Array<span class="token punctuation">(</span>DataTypes<span class="token punctuation">.</span>createStructField<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> StringType<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> df <span class="token operator">=</span> sqlContext<span class="token punctuation">.</span>createDataFrame<span class="token punctuation">(</span>rowRDD<span class="token punctuation">,</span> schema<span class="token punctuation">)</span>    df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>registerTempTable<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * 注册一个udaf函数     */</span>    sqlContext<span class="token punctuation">.</span>udf<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">"StringCount"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> MyUDAF<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sqlContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"select name ,StringCount(name) from user group by name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、开窗函数-基于Hive的开窗函数"><a href="#七、开窗函数-基于Hive的开窗函数" class="headerlink" title="七、开窗函数(基于Hive的开窗函数)"></a>七、开窗函数(基于Hive的开窗函数)</h1><p><strong><code>注意：</code></strong></p><ul><li><p>row_number() 开窗函数是按照某个字段分组，然后取另一字段的前几个的值，相当于 分组取 topN</p></li><li><p>如果 SQL 语句里面使用到了开窗函数，那么这个 SQL 语句必须使用HiveContext 来执行，HiveContext 默认情况下在本地无法创建。</p></li><li><p>开窗函数格式：</p><pre class="line-numbers language-sql"><code class="language-sql">row_number<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">over</span> <span class="token punctuation">(</span>partitin <span class="token keyword">by</span> XXX <span class="token keyword">order</span> <span class="token keyword">by</span> XXX<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><code>Java</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataFrame<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SaveMode<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>HiveContext<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * row_number()开窗函数： * 主要是按照某个字段分组，然后取另一字段的前几个的值，相当于 分组取topN group by .... order by  .... limit 0, 5 ; * row_number() over (partition by xxx order by xxx desc) xxx * 注意： * 如果SQL语句里面使用到了开窗函数，那么这个SQL语句必须使用HiveContext来执行 * @author root * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RowNumberWindowFun</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//-Xms800m -Xmx800m  -XX:PermSize=64M -XX:MaxNewSize=256m -XX:MaxPermSize=128m</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"windowfun"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaSparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"spark.sql.shuffle.partitions"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HiveContext hiveContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HiveContext</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>        hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"use spark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"drop table if exists sales"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>            <span class="token string">"create table if not exists sales (riqi string,leibie string,jine Int) "</span>            <span class="token operator">+</span> <span class="token string">"row format delimited fields terminated by '\t'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span>            <span class="token string">"load data local inpath './data/sales.txt' into table sales"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 开窗函数格式：         * 【 row_number() over (partition by XXX order by XXX) as rank】         * 注意：rank 从1开始         */</span>        <span class="token comment" spellcheck="true">/**         * 以类别分组，按每种类别金额降序排序，显示 【日期，种类，金额】 结果，如：         *          * 1 A 100         * 2 B 200         * 3 A 300         * 4 B 400         * 5 A 500         * 6 B 600         * 排序后：         * 5 A 500  --rank 1         * 3 A 300  --rank 2          * 1 A 100  --rank 3         * 6 B 600  --rank 1         * 4 B 400    --rank 2         * 2 B 200  --rank 3         *         * 2018 A 400     1         * 2017 A 500     2         * 2016 A 550     3         *         *         * 2016 A 550     1         * 2017 A 500     2         * 2018 A 400     3         *         */</span><span class="token comment" spellcheck="true">//无法取前三</span><span class="token comment" spellcheck="true">//hiveContext.sql("select riqi,leibie,jine,"</span><span class="token comment" spellcheck="true">//             + "row_number() over (partition by leibie order by jine desc) rank "</span><span class="token comment" spellcheck="true">//             + "from sales").show();</span>        DataFrame result <span class="token operator">=</span> hiveContext<span class="token punctuation">.</span><span class="token function">sql</span><span class="token punctuation">(</span><span class="token string">"select riqi,leibie,jine,rank from ( select riqi,leibie,jine,"</span>    <span class="token operator">+</span> <span class="token string">"row_number() over (partition by leibie order by jine desc) rank from sales) t"</span><span class="token operator">+</span> <span class="token string">"where t.rank&lt;=3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 将结果保存到hive表sales_result         */</span>        result<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mode</span><span class="token punctuation">(</span>SaveMode<span class="token punctuation">.</span>Overwrite<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">saveAsTable</span><span class="token punctuation">(</span><span class="token string">"sales_result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Scala</code></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkContext<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>HiveContext<span class="token keyword">object</span> RowNumberWindowFun <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"windowfun"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token keyword">val</span> hiveContext <span class="token operator">=</span> <span class="token keyword">new</span> HiveContext<span class="token punctuation">(</span>sc<span class="token punctuation">)</span>    hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"use spark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span><span class="token string">"drop table if exists sales"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span>       <span class="token string">"create table if not exists sales (riqi string,leibie string,jine Int) "</span>       <span class="token operator">+</span> <span class="token string">"row format delimited fields terminated by '\t'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span>            <span class="token string">"load data local inpath '/root/test/sales' into table sales"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 开窗函数格式：         * 【 rou_number() over (partitin by XXX order by XXX) 】         */</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> hiveContext<span class="token punctuation">.</span>sql<span class="token punctuation">(</span>        <span class="token string">"select riqi,leibie,jine from (select riqi,leibie,jine,"</span>                <span class="token operator">+</span><span class="token string">"row_number() over (partition by leibie order by jine desc) rank"</span>        <span class="token operator">+</span> <span class="token string">"from sales) t where t.rank&lt;=3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SparkSql </tag>
            
            <tag> 不同数据源 </tag>
            
            <tag> 封装RDD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark学习（四）</title>
      <link href="/2019/02/19/Spark(4)/"/>
      <url>/2019/02/19/Spark(4)/</url>
      
        <content type="html"><![CDATA[<h1 id="一、广播变量"><a href="#一、广播变量" class="headerlink" title="一、广播变量"></a>一、广播变量</h1><h2 id="1、广播变量理解图"><a href="#1、广播变量理解图" class="headerlink" title="1、广播变量理解图"></a>1、广播变量理解图</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0cxiwpy6gj30fy0h2tax.jpg"></p><h2 id="2、广播变量的使用"><a href="#2、广播变量的使用" class="headerlink" title="2、广播变量的使用"></a>2、广播变量的使用</h2><p>Java:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bd<span class="token punctuation">.</span>java<span class="token punctuation">.</span>core<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>VoidFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span>Broadcast<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 广播变量： * 1.不能将一个RDD使用广播变量广播出去，因为RDD是不存数据的，可以将RDD的结果广播出去。 * 2.广播变量只能在Driver端定义，不能在Executor端定义。 * 3.在Driver端可以修改广播变量的值，在Executor端不能修改广播变量的值。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BroadCast</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"broadcast"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaSparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//List中已经实现了序列化，可以用于跨网络传输</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"hello bjsxt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//广播变量将list广播出去</span>        <span class="token keyword">final</span> Broadcast<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> broadCastList <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> lines <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"data/word.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Boolean <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                       <span class="token comment" spellcheck="true">//匿名内部类中使用的变量必须使用final修饰</span>                <span class="token keyword">return</span> broadCastList<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoidFunction</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>String t<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Scala:</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"brocast"</span><span class="token punctuation">)</span><span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token string">"hello xasxt"</span><span class="token punctuation">)</span><span class="token keyword">val</span> broadCast <span class="token operator">=</span> sc<span class="token punctuation">.</span>broadcast<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token keyword">val</span> lineRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"./words.txt"</span><span class="token punctuation">)</span>lineRDD<span class="token punctuation">.</span>filter <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>broadCast<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    broadCast<span class="token punctuation">.</span>value<span class="token punctuation">.</span>contains<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>foreach <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> println<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h2><blockquote><ul><li>为什么使用广播变量</li></ul><ul><li>能不能将一个 RDD 使用广播变量广播出去？<br>不能，因为RDD是不存储数据的。可以将RDD的结果广播出去。</li><li>广播变量只能在 Driver 端定义，在Executor端使用，不能在 Executor 端定义。</li><li>在 Driver 端可以修改广播变量的值，在 Executor 端无法修改广播变量的值</li><li>代码中，算子内部执行是在Executor端，其余的在Driver端</li><li>系列化：用于机器之间跨网络传输时，要将文件序列化到磁盘才可完成传输</li><li>内存大会频繁的gc（垃圾回收）就会卡顿，如果内存还不够，就会报oom（内存溢出）</li></ul></blockquote><h1 id="二、累加器"><a href="#二、累加器" class="headerlink" title="二、累加器"></a>二、累加器</h1><h2 id="1、累加器理解图"><a href="#1、累加器理解图" class="headerlink" title="1、累加器理解图"></a>1、累加器理解图</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0da58qfv9j30m40c4q9q.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0da61a9htj30lx0ebn4i.jpg"></p><h2 id="2、累加器的使用"><a href="#2、累加器的使用" class="headerlink" title="2、累加器的使用"></a>2、累加器的使用</h2><p>Java：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bd<span class="token punctuation">.</span>java<span class="token punctuation">.</span>core<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>Accumulator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>VoidFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 累加器在Driver端定义赋初始值和读取，在Executor端累加。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccumulatorOperator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"accumulator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaSparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取累加器：初始值为0</span>        <span class="token keyword">final</span> Accumulator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> accumulator <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">accumulator</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"data/word.txt"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoidFunction</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>String t<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                accumulator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//不能再Executor端获取accumulator.value()来触发累加</span><span class="token comment" spellcheck="true">//                System.out.println(accumulator.value());</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// accumulator.value 写法只能在driver端，excutor端的task只能用accumulator的写法来查看数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Scala:</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"accumulator"</span><span class="token punctuation">)</span><span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token keyword">val</span> accumulator <span class="token operator">=</span> sc<span class="token punctuation">.</span>accumulator<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*val count = 0sc.textFile("./words.txt").foreach &amp;#123; x =>&amp;#123;count+=1println("count:"+count)&amp;#125;&amp;#125; //結果count打印为0 ， 因为count未能序列化，无法实现跨网络传输*/</span>sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"./words.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>accumulator<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>println<span class="token punctuation">(</span>accumulator<span class="token punctuation">.</span>value<span class="token punctuation">)</span>sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意：</code></p><ul><li>累加器在Driver端定义赋初始值，累加器只能在Driver端读取，在 Excutor 端更新。</li></ul><h1 id="三、SparkShuffle"><a href="#三、SparkShuffle" class="headerlink" title="三、SparkShuffle"></a>三、SparkShuffle</h1><h2 id="1、SparkShuffle-概念"><a href="#1、SparkShuffle-概念" class="headerlink" title="1、SparkShuffle 概念"></a>1、SparkShuffle 概念</h2><p>reduceByKey 会将上一个 RDD 中的每一个 key 对应的所有 value 聚合成一个 value，然后生成一个新的 RDD，元素类型是&lt;key,value&gt;对的形式，这样每一个 key 对应一个聚合起来的 value。</p><p><strong><code>问题</code>：</strong>聚合之前，每一个 key 对应的 value 不一定都是在一个 partition中，也不太可能在同一个节点上，因为 RDD 是分布式的弹性的数据集，RDD 的 partition 极有可能分布在各个节点上。</p><p><strong><code>如何聚合？</code></strong></p><ul><li>– – <strong>Shuffle Write</strong> ：上一个 stage 的每个 map task 就必须保证将自己处理的当前分区的数据相同的 key 写入一个分区文件中，可能会写入多个不同的分区文件中。</li><li>– – <strong>Shuffle Read</strong> ：reduce task 就会从上一个 stage 的所有 task 所在的机器上寻找属于自己的那些分区文件，这样就可以保证每一个 key 所对应的 value 都会汇聚到同一个节点上去处理和聚合。</li><li>Spark 中有两种 Shuffle 类型，HashShuffle 和 SortShuffle，Spark1.2之<code>前</code>是 <code>HashShuffle</code> 默认的分区器是 HashPartitioner，Spark1.2 引入<code>SortShuffle</code> 默认的分区器是 RangePartitioner。</li></ul><h2 id="2、HashShuffle"><a href="#2、HashShuffle" class="headerlink" title="2、HashShuffle"></a>2、HashShuffle</h2><h3 id="1-gt-普通机制"><a href="#1-gt-普通机制" class="headerlink" title="1&gt; 普通机制"></a>1&gt; <strong>普通机制</strong></h3><ul><li>普通机制示意图</li></ul><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0dax2jtxwj30qv0enwqa.jpg"></p><ul><li><p>执行流程<br>a) 每一个 map task 将不同结果写到不同的 buffer 中，每个buffer 的大小为 **<code>32K</code>**。buffer 起到数据缓存的作用。</p><p>b) 每个 buffer 文件最后对应一个磁盘小文件。</p><p>c) reduce task 来拉取对应的磁盘小文件。</p></li><li><p>总结<br>① .map task 的计算结果会根据分区器（默认是hashPartitioner）来决定写入到哪一个磁盘小文件中去。<br>ReduceTask 会去 Map 端拉取相应的磁盘小文件。<br>② .产生的磁盘小文件的个数：M（map task 的个数）*R（reduce task 的个数）</p></li><li><p>存在的问题<br> 产生的磁盘小文件过多，会导致以下问题：<br> a) 在 Shuffle Write 过程中会产生很多写磁盘小文件的对象。<br> b) 在 Shuffle Read 过程中会产生很多读取磁盘小文件的对象。<br> c) 在JVM堆内存中对象过多会造成频繁的gc,gc还无法解决运行所需要的内存 的话，就会 OOM。<br> d) 在数据传输过程中会有频繁的网络通信，频繁的网络通信出现通信故障的可能性大大增加，一旦网络通信出现了故障会导致 shuffle file cannot find 由于这个错误导致的 task 失败，TaskScheduler 不负责重试，由 DAGScheduler 负责重试 Stage。</p></li></ul><h3 id="2-gt-合并机制"><a href="#2-gt-合并机制" class="headerlink" title="2&gt; 合并机制"></a>2&gt; 合并机制</h3><p> 合并机制示意图</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0db1l3k43j30sd0euwov.jpg"></p><ul><li>总结<br>产生磁盘小文件的个数：C(core 的个数)*R（reduce 的个数）</li></ul><h2 id="3、SortShuffle"><a href="#3、SortShuffle" class="headerlink" title="3、SortShuffle"></a>3、SortShuffle</h2><h3 id="1-gt-普通机制-1"><a href="#1-gt-普通机制-1" class="headerlink" title="1&gt; 普通机制"></a>1&gt; 普通机制</h3><p> 普通机制示意图</p><p><img src="../images/sortShuffle%E6%99%AE%E9%80%9A%E6%9C%BA%E5%88%B6.jpg"></p><ul><li>执行流程</li></ul><p>a) map task 的计算结果会写入到一个内存数据结构里面，内存数据结构默认是 5M<br>b) 在 shuffle 的时候会有一个定时器，不定期的去估算这个内存结构的大小，当内存结构中的数据超过 5M 时，比如现在内存结构中的数据为 5.01M，那么他会申请 5.01*2-5=5.02M 内存给内存数据结构。<br>c) 如果申请成功不会进行溢写，如果申请不成功，这时候会发生溢写磁盘。<br>d) 在溢写之前内存结构中的数据会进行排序分区<br>e) 然后开始溢写磁盘，写磁盘是以batch的形式去写，一个batch是 1 万条数据，<br>f) map task 执行完成后，会将这些磁盘小文件合并成一个大的磁盘文件，同时生成一个索引文件。<br>g) reduce task 去 map 端拉取数据的时候，首先解析索引文件，根据索引文件再去拉取对应的数据。</p><ul><li>总结<br>产生磁盘小文件的个数： 2*M（map task 的个数）</li></ul><h3 id="2-gt-bypass-机制"><a href="#2-gt-bypass-机制" class="headerlink" title="2&gt;bypass 机制"></a>2&gt;bypass 机制</h3><p> bypass机制示意图</p><p>![](../images/sortShuffle byPass机制.jpg)</p><p> 总结<br>① .bypass 运行机制的触发条件如下：<br>shuffle  reduce  task 的 数 量 小 于  spark.shuffle.sort.bypassMergeThreshold 的参数值。这个 值默认是 200。<br>② .产生的磁盘小文件为：2*M（map task 的个数）</p><h2 id="4、Shuffle-文件寻址"><a href="#4、Shuffle-文件寻址" class="headerlink" title="4、Shuffle 文件寻址"></a>4、Shuffle 文件寻址</h2><h3 id="1-MapOutputTracker"><a href="#1-MapOutputTracker" class="headerlink" title="1)MapOutputTracker"></a>1)MapOutputTracker</h3><h3 id="2-BlockManager"><a href="#2-BlockManager" class="headerlink" title="2) BlockManager"></a>2) BlockManager</h3><h1 id="四、Spark-内存管理"><a href="#四、Spark-内存管理" class="headerlink" title="四、Spark 内存管理"></a>四、Spark 内存管理</h1><h2 id="1、静态内存管理分布图"><a href="#1、静态内存管理分布图" class="headerlink" title="1、静态内存管理分布图"></a>1、静态内存管理分布图</h2><h2 id="2、统一内存管理分布图"><a href="#2、统一内存管理分布图" class="headerlink" title="2、统一内存管理分布图"></a>2、统一内存管理分布图</h2><h2 id="3、reduce-中-OOM-如何处理？"><a href="#3、reduce-中-OOM-如何处理？" class="headerlink" title="3、reduce 中 OOM 如何处理？"></a>3、reduce 中 OOM 如何处理？</h2><h1 id="五、Shuffle-调优"><a href="#五、Shuffle-调优" class="headerlink" title="五、Shuffle  调优"></a>五、Shuffle  调优</h1><h2 id="1、SparkShuffle-调优配置项如何使用？"><a href="#1、SparkShuffle-调优配置项如何使用？" class="headerlink" title="1、SparkShuffle 调优配置项如何使用？"></a>1、SparkShuffle 调优配置项如何使用？</h2>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 广播 </tag>
            
            <tag> 累加器 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark学习（三）</title>
      <link href="/2019/02/18/Spark(3)/"/>
      <url>/2019/02/18/Spark(3)/</url>
      
        <content type="html"><![CDATA[<h1 id="案例一、统计网站-pv-和-uv统计"><a href="#案例一、统计网站-pv-和-uv统计" class="headerlink" title="案例一、统计网站 pv 和 uv统计"></a>案例一、统计网站 pv 和 uv统计</h1><h2 id="0、概念理解"><a href="#0、概念理解" class="headerlink" title="0、概念理解"></a>0、概念理解</h2><p><code>PV</code> 是网站分析的一个术语，用以衡量网站用户访问的网页的数量。</p><p>对于广告主，PV 值可预期它可以带来多少广告收入。一般来说，PV 与来访者的数量成正比，但是 PV 并不直接决定页面的真实来访者数量，如同一个来访者通过不断的刷新页面，也可以制造出非常高的 PV。</p><h2 id="1、什么是-PV-值"><a href="#1、什么是-PV-值" class="headerlink" title="1、什么是 PV 值"></a>1、什么是 PV 值</h2><p>PV （page view ）即页面浏览量或点击量，是衡量一个网站或网页用户访问量。</p><p>PV 值就是所有访问者在 24 小时（0 点到 24 点）内看了某个网站多少个页面或某个网页多少次。</p><p>PV 是指页面刷新的次数，每一次页面刷新，就算做一次 PV 流量。</p><h2 id="2、什么是UV-值"><a href="#2、什么是UV-值" class="headerlink" title="2、什么是UV 值"></a>2、什么是UV 值</h2><p>UV （unique visitor ）即独立访客数，指访问某个站点或点击某个网页的不同 IP 地址的人数。</p><p>在同一天内，UV  只记录第一次进入网站的具有独立IP  的访问者，在同一天内再次访问该网站则不计数。</p><p>UV 提供了一定时间内不同观众数量的统计指标，而没有反应出网站的全面活动。</p><p><code>PV</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bd<span class="token punctuation">.</span>java<span class="token punctuation">.</span>core<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Function2<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>VoidFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>deploy<span class="token punctuation">.</span>master<span class="token punctuation">.</span>Master<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPV</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SparkConf sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sparkConf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"pv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaSparkContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> lineRDD <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"./data/pvuvdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**求每个页面 PV         * 文件每一行的内容115.77.12.186    安徽    2017-10-10    1512012307084    5641635304912151098    www.suning.com         */</span>        <span class="token comment" spellcheck="true">//方法一：mapToPair().reduceByKey().foeach()</span>     lineRDD<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String line<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>Integer v1<span class="token punctuation">,</span> Integer v2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoidFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> tuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//方法二:  mapToPair().groupByKey().foeach()</span>     JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> groupByKeyRDD <span class="token operator">=</span>         lineRDD<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String line<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    groupByKeyRDD<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoidFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">>>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> tuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> iterator <span class="token operator">=</span> tuple2<span class="token punctuation">.</span>_2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   count<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"url : "</span> <span class="token operator">+</span> tuple2<span class="token punctuation">.</span>_1 <span class="token operator">+</span> <span class="token string">" value: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//方法三： mapToPair().countByKey()-->对map遍历</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span>         lineRDD<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String line<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// url,1</span>               <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key : "</span> <span class="token operator">+</span> key  <span class="token operator">+</span> <span class="token string">"   value :"</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>UV</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bd<span class="token punctuation">.</span>java<span class="token punctuation">.</span>core<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>VoidFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>broadcast<span class="token punctuation">.</span>Broadcast<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>deploy<span class="token punctuation">.</span>master<span class="token punctuation">.</span>Master<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span>DAGScheduler<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestUV</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SparkConf sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sparkConf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"uv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaSparkContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> lineRDD <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"./data/pvuvdata"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/**求每个网站 UV： 用IP唯一标识用户 ，注意去重         * 文件每一行的内容115.77.12.186    安徽    2017-10-10    1512012307084    5641635304912151098    www.suning.com         */</span>        <span class="token comment" spellcheck="true">//方法一：mapToPair().groupByKey().foreach()</span>        JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>String<span class="token operator">>></span> rdd1 <span class="token operator">=</span>             lineRDD<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                String url <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                String ip <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rdd1<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoidFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>String<span class="token operator">>>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>String<span class="token operator">>></span> tuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//set:无序，不可重复，所以它可以自动去重</span>                HashSet<span class="token operator">&lt;</span>Object<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> tuple2<span class="token punctuation">.</span>_2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">.</span>_1  <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方法二：mapToPair().ditinct().countByKey()-->遍历map</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span>             lineRDD<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                String url <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                String ip <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">countByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key : "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"   value :"</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>-------------------------------------------------------------------------------------</code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sxt<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>core<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> PVUV <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>        conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"pvuv"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>        <span class="token keyword">val</span> records <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/pvuvdata"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//pv</span>        records<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">val</span> fields <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>            <span class="token punctuation">(</span>fields<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//uv</span>        <span class="token keyword">val</span> result<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> records<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">val</span> fields <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>            <span class="token punctuation">(</span>fields<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fields<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groupByKey<span class="token punctuation">(</span><span class="token punctuation">)</span>        result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">val</span> key <span class="token operator">=</span> x<span class="token punctuation">.</span>_1            <span class="token keyword">val</span> iteratable <span class="token operator">=</span> x<span class="token punctuation">.</span>_2            println<span class="token punctuation">(</span><span class="token string">"key : "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">" size : "</span> <span class="token operator">+</span> iteratable<span class="token punctuation">.</span>toSet<span class="token punctuation">.</span>size<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bd<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>core<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> PVUV2 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">// "local[4]"  指定本地以及使用的核数     </span>        conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[4]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"pvuv"</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> context <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>        <span class="token keyword">val</span> linesRDD <span class="token operator">=</span> context<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"data/pvuvdata"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//pv</span>        <span class="token comment" spellcheck="true">//(www.jd.com,1000)</span>        linesRDD<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">val</span> fields<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>            <span class="token punctuation">(</span>fields<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x <span class="token operator">+</span> y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//uv</span>        <span class="token comment" spellcheck="true">//(www.taobao.com,10.20.30.18)</span>        <span class="token keyword">val</span> groupRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> Iterable<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> linesRDD<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">val</span> fields <span class="token operator">=</span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span>            <span class="token punctuation">(</span>fields<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fields<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groupByKey<span class="token punctuation">(</span><span class="token punctuation">)</span>        groupRDD<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">val</span> key  <span class="token operator">=</span> x<span class="token punctuation">.</span>_1            <span class="token keyword">val</span> size <span class="token operator">=</span> x<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>toSet<span class="token punctuation">.</span>size            <span class="token punctuation">(</span>key<span class="token punctuation">,</span>size<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="案例二：二次排序"><a href="#案例二：二次排序" class="headerlink" title="案例二：二次排序"></a>案例二：二次排序</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bd<span class="token punctuation">.</span>java<span class="token punctuation">.</span>core<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondSortKey</span>  <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>SecondSortKey<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> first<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> second<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> first<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirst</span><span class="token punctuation">(</span><span class="token keyword">int</span> first<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> second<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSecond</span><span class="token punctuation">(</span><span class="token keyword">int</span> second<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SecondSortKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> first<span class="token punctuation">,</span> <span class="token keyword">int</span> second<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>SecondSortKey o1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o1<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 5     6</span>            <span class="token comment" spellcheck="true">// this  &lt; o1</span>            <span class="token comment" spellcheck="true">// 6   5</span>            <span class="token comment" spellcheck="true">// this > o1</span>            <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*if(getSecond() - o1.getSecond() == 0) &amp;#123;                return getThree() - o1.getThree();            &amp;#125;else &amp;#123;                return getSecond() - o1.getSecond();            &amp;#125;*/</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span>  o1<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bd<span class="token punctuation">.</span>java<span class="token punctuation">.</span>core<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>VoidFunction<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondKeyTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SparkConf sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sparkConf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"SecondarySortTest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> JavaSparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> secondRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"./data/secondSort.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*文件内容格式         * 1 3         * 1 4         * 2 3         */</span>        <span class="token comment" spellcheck="true">//maptoPair -->sortByKey -->foreach</span>        JavaPairRDD<span class="token operator">&lt;</span>SecondSortKey<span class="token punctuation">,</span> String<span class="token operator">></span> secRDD <span class="token operator">=</span>             secondRDD<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> SecondSortKey<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>SecondSortKey<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String line<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SecondSortKey secondSortKey <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SecondSortKey</span><span class="token punctuation">(</span>                    Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>                                     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>secondSortKey<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      secRDD<span class="token punctuation">.</span><span class="token function">sortByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoidFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>SecondSortKey<span class="token punctuation">,</span> String<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>SecondSortKey<span class="token punctuation">,</span> String<span class="token operator">></span> tuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="案例三：分组取topN"><a href="#案例三：分组取topN" class="headerlink" title="案例三：分组取topN"></a>案例三：分组取topN</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sxt<span class="token punctuation">.</span>java<span class="token punctuation">.</span>core<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>PairFunction<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>VoidFunction<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopN</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SparkConf conf<span class="token punctuation">;</span>        conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local[5]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"TopOps"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaSparkContext sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//hdfs://shsxt/wc.txt</span>        JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> linesRDD <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"data/scores.txt"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> List n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      linesRDD.count();</span><span class="token comment" spellcheck="true">/*a 86 a 58  b 78*/</span>        JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> pairRDD <span class="token operator">=</span>         linesRDD<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/**                     *                     */</span>                 <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>                 <span class="token annotation punctuation">@Override</span>                 <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        String<span class="token punctuation">[</span><span class="token punctuation">]</span> splited <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        String clazzName <span class="token operator">=</span> splited<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        Integer score <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>splited<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span>clazzName<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> groupByKeyRDD <span class="token operator">=</span>pairRDD<span class="token punctuation">.</span><span class="token function">groupByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     groupByKeyRDD<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">VoidFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">>>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/**                     *                     */</span>                    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>                    <span class="token annotation punctuation">@Override</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> tuple<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        String clazzName <span class="token operator">=</span> tuple<span class="token punctuation">.</span>_1<span class="token punctuation">;</span>                        Iterator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> iterator <span class="token operator">=</span> tuple<span class="token punctuation">.</span>_2<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tuple<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//取前三：大的放前，小的后移</span>                        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> top3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            Integer score <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> top3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span>top3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                    top3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> score<span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> top3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                                        top3<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> top3<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                                    top3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> score<span class="token punctuation">;</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class Name:"</span> <span class="token operator">+</span> clazzName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer sscore <span class="token operator">:</span> top3<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sscore<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//     groupByKeyRDD.foreach(new VoidFunction&lt;Tuple2&lt;String, Iterable&lt;Integer>>>() &amp;#123;</span><span class="token comment" spellcheck="true">//            @Override</span><span class="token comment" spellcheck="true">//     public void call(Tuple2&lt;String, Iterable&lt;Integer>> tuple2) throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//                String key  = tuple2._1;</span><span class="token comment" spellcheck="true">//                Iterator&lt;Integer> iterator = tuple2._2.iterator();</span><span class="token comment" spellcheck="true">//                List list = IteratorUtils.toList(iterator);</span><span class="token comment" spellcheck="true">//                Collections.sort(list);</span><span class="token comment" spellcheck="true">//                for(int i=0;i&lt;Math.min(3,list.size());i++)&amp;#123;</span><span class="token comment" spellcheck="true">//                    // list.size = 3  list.get(2)</span><span class="token comment" spellcheck="true">//                    System.out.println(key + " " +  list.get(list.size()-i-1));</span><span class="token comment" spellcheck="true">//                &amp;#125;</span><span class="token comment" spellcheck="true">//            &amp;#125;</span><span class="token comment" spellcheck="true">//        &amp;#125;);</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>-----------------------------------------------------------------------------------</code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sxt<span class="token punctuation">.</span>scala<span class="token punctuation">.</span>core<span class="token comment" spellcheck="true">/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Computes the PageRank of URLs from an input file. Input file should * be in format of: * URL         neighbor URL * URL         neighbor URL * URL         neighbor URL * ... * where URL and their neighbors are separated by space(s). */</span><span class="token keyword">object</span> SparkPageRank <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    if (args.length &lt; 1) &amp;#123;</span>    <span class="token comment" spellcheck="true">//      System.err.println("Usage: SparkPageRank &lt;file> &lt;iter>")</span>    <span class="token comment" spellcheck="true">//      System.exit(1)</span>    <span class="token comment" spellcheck="true">//    &amp;#125;</span>    <span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"PageRank"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[1]"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> iters <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//    val iters = if (args.length > 0) args(1).toInt else 10</span>    <span class="token keyword">val</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span>    <span class="token keyword">val</span> lines <span class="token operator">=</span> ctx<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"page.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//根据边关系数据生成 邻接表 如：(1,(2,3,4,5)) (2,(1,5))..</span>    <span class="token keyword">val</span> links <span class="token operator">=</span> lines<span class="token punctuation">.</span>map<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> s <span class="token keyword">=></span>      <span class="token keyword">val</span> parts <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span>      <span class="token punctuation">(</span>parts<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parts<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groupByKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cache<span class="token punctuation">(</span><span class="token punctuation">)</span>    links<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// (1,1.0) (2,1.0)..</span>    <span class="token keyword">var</span> ranks <span class="token operator">=</span> links<span class="token punctuation">.</span>mapValues<span class="token punctuation">(</span>v <span class="token keyword">=></span> <span class="token number">1.0</span><span class="token punctuation">)</span>    ranks<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to iters<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// (1,((2,3,4,5), 1.0))</span>      <span class="token keyword">val</span> contribs <span class="token operator">=</span> links<span class="token punctuation">.</span>join<span class="token punctuation">(</span>ranks<span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>flatMap<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token punctuation">(</span>urls<span class="token punctuation">,</span> rank<span class="token punctuation">)</span> <span class="token keyword">=></span>        <span class="token keyword">val</span> size <span class="token operator">=</span> urls<span class="token punctuation">.</span>size        urls<span class="token punctuation">.</span>map<span class="token punctuation">(</span>url <span class="token keyword">=></span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> rank <span class="token operator">/</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      ranks <span class="token operator">=</span> contribs<span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">.</span>mapValues<span class="token punctuation">(</span><span class="token number">0.15</span> <span class="token operator">+</span> <span class="token number">0.85</span> <span class="token operator">*</span> _<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> output <span class="token operator">=</span> ranks<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//    output.foreach(tup => println(tup._1 + " has rank: " + tup._2 + "."))</span>    ctx<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参数解释：spark-submit"><a href="#参数解释：spark-submit" class="headerlink" title="参数解释：spark-submit"></a>参数解释：spark-submit</h1><p>spark-submit -h</p><p>–master  （优先使用代码中的配置）</p><p>–name    （指定APPname）</p><p>–deploy mode  （默认为client，指定运行模式）</p><p>–jars （可以用来为代码添加所需要的jar包依赖）</p><p>IDEA代码打包：BUILD（注意避免jar包过大，可）</p><p>–files （添加代码所需的文件）</p><p>–conf （PROP=value）</p><p>–driver-memory</p><p>–executor-memory</p><p>–total-executor-core    （若不指明，就把所有的核均用完）</p><p>–queue</p><p>资源分配：</p><p>yarn  ： 分配到队列中 </p><pre class="line-numbers language-shell"><code class="language-shell">[root@node00 bin]# ./spark-submit -hUsage: spark-submit [options] <app jar | python file> [app arguments]Usage: spark-submit --kill [submission ID] --master [spark://...]Usage: spark-submit --status [submission ID] --master [spark://...]Options:  --master MASTER_URL         spark://host:port, mesos://host:port, yarn, or local.  --deploy-mode DEPLOY_MODE   Whether to launch the driver program locally("client")                               or on one of the worker machines inside the  cluster                                 ("cluster") (Default: client).  --class CLASS_NAME          Your application's main class (for Java / Scala apps).  --name NAME                 A name of your application.  --jars JARS                 Comma-separated (逗号分隔) list of local jars to include                               on the driver and executor classpaths.(Driver 和                                     executor 依赖的第三方 jar 包)  --packages                  Comma-separated list of maven coordinates of jars to                                 include on the driver and executor classpaths. Will                                 search the local maven repo, then maven central and                                 any additional remote repositories given by --                                       repositories. The format for the coordinates should be                               groupId:artifactId:version.  --exclude-packages          Comma-separated list of groupId:artifactId, to exclude                               while resolving the dependencies provided in --                                     packages to avoid dependency conflicts.  --repositories              Comma-separated list of additional remote repositories                               to search for the maven coordinates given with --                                   packages.  --py-files PY_FILES         Comma-separated list of .zip, .egg, or .py files to                                 place on the PYTHONPATH for Python apps.  --files FILES               Comma-separated list of files to be placed in the                                   working directory of each executor.  --conf PROP=VALUE           Arbitrary Spark configuration property.  --properties-file FILE      Path to a file from which to load extra properties. If                               not specified, this will look for conf/spark-                                       defaults.conf.  --driver-memory MEM         Memory for driver (e.g. 1000M, 2G) (Default: 1024M).  --driver-java-options       Extra Java options to pass to the driver.  --driver-library-path       Extra library path entries to pass to the driver.  --driver-class-path         Extra class path entries to pass to the driver. Note                                 that jars added with --jars are automatically included                               in the  classpath.  --executor-memory MEM       Memory per executor (e.g. 1000M, 2G) (Default: 1G).  --proxy-user NAME           User to impersonate when submitting the application.  --help, -h                  Show this help message and exit  --verbose, -v               Print additional debug output  --version,                  Print the version of current Spark Spark standalone with cluster deploy mode only:  --driver-cores NUM          Cores for driver (Default: 1). Spark standalone or Mesos with cluster deploy mode only:  --supervise                 If given, restarts the driver on failure.  --kill SUBMISSION_ID        If given, kills the driver specified.  --status SUBMISSION_ID      If given, requests the status of the driver specified. Spark standalone and Mesos only:  --total-executor-cores NUM  Total cores for all executors. Spark standalone and YARN only:  --executor-cores NUM        Number of cores per executor. (Default: 1 in YARN                                   mode, or all available cores on the worker in                                       standalone mode) YARN-only:  --driver-cores NUM          Number of cores used by the driver, only in cluster                                 mode (Default: 1).  --queue QUEUE_NAME          The YARN queue to submit to (Default: "default").  --num-executors NUM         Number of executors to launch (Default: 2).  --archives ARCHIVES         Comma separated list of archives to be extracted into                               the working directory of each executor.  --principal PRINCIPAL       Principal to be used to login to KDC, while running on                              secure HDFS.  --keytab KEYTAB             The full path to the file that contains the keytab for                               the principal specified above. This keytab will be                                   copied to the node running the Application Master via                               the Secure Distributed Cache, for renewing the login                                 tickets and the delegation tokens periodically.sc.textFile("hdfs://node00:8020/test.txt").flatMap(_.split(" ")).map((_,1)).reduceByKey(_+_).foreach(println)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Spark-Shell"><a href="#Spark-Shell" class="headerlink" title="Spark Shell"></a>Spark Shell</h1><h2 id="1、-概念："><a href="#1、-概念：" class="headerlink" title="1、 概念："></a>1、 概念：</h2><p>SparkShell 是 Spark 自带的一个快速原型开发工具，也可以说是Spark 的 scala REPL(Read-Eval-Print-Loop),即交互式 shell。支持使用 scala 语言来进行 Spark 的交互式编程。</p><h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用:"></a>2、使用:</h2><p>（配置从HDFS上获取文件）</p><p>(1)启动HDFS，上传文件</p><pre class="line-numbers language-shell"><code class="language-shell">zkServer.sh start   (3台)start-all.sh        (任一台)hadoop dfs -put test.txt /   (任一台：将test.txt文件上传至hdfs的根目录)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2)启动standalone集群：在/sbin路径下</p><pre class="line-numbers language-shell"><code class="language-shell">./start-all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(3)在客户端上启动 spark-shell:</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-shell    (local模式：在控制台打印)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-shell --master spark://node00:7077   （client模式：控制台无打印，可通过web页面查看）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（4）运行 wordcount：</p><pre class="line-numbers language-scala"><code class="language-scala">sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"hdfs://Sunrise/test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>_<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、参数解释：spark-shell"><a href="#三、参数解释：spark-shell" class="headerlink" title="三、参数解释：spark-shell"></a>三、参数解释：spark-shell</h2><pre class="line-numbers language-shell"><code class="language-shell">[root@node00 bin]# ./spark-shell -hUsage: ./bin/spark-shell [options]Options:  --master MASTER_URL         spark://host:port, mesos://host:port, yarn, or local.  --deploy-mode DEPLOY_MODE   Whether to launch the driver program locally                                         ("client") or on one of the worker machines inside the                               cluster ("cluster")(Default: client).  --class CLASS_NAME          Your application's main class (for Java / Scala apps).  --name NAME                 A name of your application.  --jars JARS                 Comma-separated list of local jars to include on the                                 driver and executor classpaths.  --packages                  Comma-separated list of maven coordinates of jars to                                 include on the driver and executor classpaths. Will                                 search the local maven repo, then maven central and                                 any additional remote repositories given by --                                       repositories. The format for thecoordinates should be                               groupId:artifactId:version.  --exclude-packages          Comma-separated list of groupId:artifactId, to exclude                               while  resolving the dependencies provided in --                                     packages to avoid dependency conflicts.  --repositories              Comma-separated list of additional remote repositories                               to search for the maven coordinates given with --                                   packages.  --py-files PY_FILES         Comma-separated list of .zip, .egg, or .py files to                                 place on the PYTHONPATH for Python apps.  --files FILES               Comma-separated list of files to be placed in the                                   working directory of each executor.  --conf PROP=VALUE           Arbitrary Spark configuration property.  --properties-file FILE      Path to a file from which to load extra properties. If                               not specified, this will look for conf/spark-                                       defaults.conf.  --driver-memory MEM         Memory for driver (e.g. 1000M, 2G) (Default: 1024M).  --driver-java-options       Extra Java options to pass to the driver.  --driver-library-path       Extra library path entries to pass to the driver.  --driver-class-path         Extra class path entries to pass to the driver. Note                                 that jars added with --jars are automatically included                               in the classpath.  --executor-memory MEM       Memory per executor (e.g. 1000M, 2G) (Default: 1G).  --proxy-user NAME           User to impersonate when submitting the application.  --help, -h                  Show this help message and exit  --verbose, -v               Print additional debug output  --version,                  Print the version of current Spark Spark standalone with cluster deploy mode only:  --driver-cores NUM          Cores for driver (Default: 1). Spark standalone or Mesos with cluster deploy mode only:  --supervise                 If given, restarts the driver on failure.  --kill SUBMISSION_ID        If given, kills the driver specified.  --status SUBMISSION_ID      If given, requests the status of the driver specified. Spark standalone and Mesos only:  --total-executor-cores NUM  Total cores for all executors. Spark standalone and YARN only:  --executor-cores NUM        Number of cores per executor. (Default: 1 in YARN                                   mode, or all available cores on the worker in                                       standalone mode) YARN-only:  --driver-cores NUM          Number of cores used by the driver, only in cluster                                 mode (Default: 1).  --queue QUEUE_NAME          The YARN queue to submit to (Default: "default").  --num-executors NUM         Number of executors to launch (Default: 2).  --archives ARCHIVES         Comma separated list of archives to be extracted into                               the working directory of each executor.  --principal PRINCIPAL       Principal to be used to login to KDC, while running on                              secure HDFS.  --keytab KEYTAB             The full path to the file that contains the keytab for                               the principal specified above. This keytab will be                                   copied to the node running the Application Master via                               the Secure Distributed Cache, for renewing the login                                 tickets and the delegation tokens periodically.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SparkUI"><a href="#SparkUI" class="headerlink" title="SparkUI"></a>SparkUI</h1><h2 id="1、SparkUI-界面介绍"><a href="#1、SparkUI-界面介绍" class="headerlink" title="1、SparkUI 界面介绍"></a>1、SparkUI 界面介绍</h2><p>提交spark：在/bin路径下</p><pre class="line-numbers language-shell"><code class="language-shell"> ./spark-submit --master spark://node00:7077 --name sp --class org.apache.spark.example.SparkPi ../lib/spark-examples-1.6.0-hadoop2.6.0.jar --100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>注意</code>：–name指代的参数在代码中也有配置，所以对同一参数均有配置时，以代码中的配置为主</p><p>浏览器页面访问：node00:8080  </p><p><code>页面显示</code></p><blockquote><p>点击：Application ID列中的值  →  Application  Detail UI  会显示查看不了事件日志</p><h3 id="Event-logging-is-not-enabled"><a href="#Event-logging-is-not-enabled" class="headerlink" title="Event logging is not enabled"></a>Event logging is not enabled</h3><p>No event logs were found for this application! To <a href="http://spark.apache.org/docs/latest/monitoring.html">enable event logging</a>, set spark.eventLog.enabled to true and spark.eventLog.dir to the directory to which your event logs are written.</p></blockquote><h2 id="2、配置-historyServer"><a href="#2、配置-historyServer" class="headerlink" title="2、配置 historyServer"></a>2、配置 historyServer</h2><ul><li>临时配置，对本次提交的应用程序起作用</li></ul><pre class="line-numbers language-shell"><code class="language-shell">./spark-shell --master spark://node00:7077--name myapp1--conf spark.eventLog.enabled=true--conf spark.eventLog.dir=hdfs://Sunrise/spark/test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>停止程序，在 Web Ui 中 Completed Applications 对应的ApplicationID 中能查看 history。</p><ul><li>spark-default.conf 配置文件中配置 HistoryServer，对所有提交的Application 都起作用</li></ul><p>在 客 户 端 节 点 ， 进 入 ../spark-1.6.0/conf/spark-defaults.conf 最后加入:</p><pre><code>#  开启记录事件日志的功能spark.eventLog.enabled true#  设置事件日志存储的目录spark.eventLog.dir hdfs://Sunrise/spark/test#  设置 HistoryServer  加载事件日志的位置spark.history.fs.logDirectory hdfs://Sunrise/spark/test# 日志优化选项, 压缩日志spark.eventLog.compress true</code></pre><ul><li>发送到其他节点（如果节点上没有以上配置，就不会有对应的作用）</li></ul><p>在HDFS上一定要先存在路径/spark/test</p><pre><code>#hdfs集群一定要启动hadoop dfs -mkdir -p /spark/test</code></pre><p><code>页面显示</code></p><blockquote><p>点击：Application ID列中的值  →  Application  Detail UI  就会有显示内容</p></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0d8nkvqzrj310k06zmxl.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0d8r7qsrzj30q50apwgd.jpg"></p><ul><li>启动 HistoryServer：(在/sbin路径下)</li></ul><pre class="line-numbers language-shell"><code class="language-shell">./start-history-server.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（Sunrise在这里是HDFS集群的名字）</p><p>访问 HistoryServer：</p><p>node00:18080,之后所有提交的应用程序运行状况都会被记录。</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0d8t4eeftj30xj079go4.jpg"></p><h1 id="Master-HA"><a href="#Master-HA" class="headerlink" title="Master HA"></a>Master HA</h1><h2 id="1、Master-的高可用原理"><a href="#1、Master-的高可用原理" class="headerlink" title="1、Master 的高可用原理"></a>1、Master 的高可用原理</h2><p>Standalone 集群只有一个 Master，如果 Master 挂了就无法提交应用程序，但不影响正在执行的worker。</p><p>给 Master 进行高可用配置可以使用<strong>fileSystem</strong>(文件系统)和 <strong>zookeeper</strong>（分布式协调服务）。</p><ul><li><p>fileSystem 只有存储功能，可以存储 Master 的元数据信息，用fileSystem 搭建的 Master 高可用，在 Master 失败时，需要我们手动启动另外的备用 Master，这种方式不推荐使用。</p></li><li><p>zookeeper 有选举和存储功能，可以存储 Master 的元素据信息，使用zookeeper 搭建的 Master 高可用，当 Master 挂掉时，备用的 Master会自动切换，推荐使用这种方式搭建 Master 的 HA。</p></li></ul><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0d8unf1yfj30gn0beac3.jpg"></p><h2 id="2、Master-高可用搭建"><a href="#2、Master-高可用搭建" class="headerlink" title="2、Master 高可用搭建"></a>2、Master 高可用搭建</h2><ol><li>在 Spark Master 节点上配置主 Master，配置.spark1.6.0/conf/ spark-env.sh</li></ol><pre class="line-numbers language-sh"><code class="language-sh">export SPARK_DAEMON_JAVA_OPTS="-Dspark.deploy.recoveryMode=ZOOKEEPER-Dspark.deploy.zookeeper.url=node00:2181,node01:2181,node02:2181-Dspark.deploy.zookeeper.dir=/sparkmaster"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>发送到其他 worker 节点上</li></ol><pre class="line-numbers language-shell"><code class="language-shell">scp spark-env.sh node01:`pwd`.......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>找一台节点（非主 Master 节点:node01）配置备用 Master,修改spark-env.sh 配置节点上的 MasterIP</li></ol><pre class="line-numbers language-sh"><code class="language-sh">SPARK_MASTER_IP=192.168.198.130<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>启动集群之前启动 zookeeper 集群：</li></ol><pre><code>zkServer.sh start</code></pre><ol start="5"><li>启动 spark Standalone 集群，启动备用 Master</li></ol><p>node00:(在/sbin路径下)</p><pre><code>./start-all.sh</code></pre><p>node01:</p><pre><code>./start-master.sh</code></pre><ol start="6"><li>打开主 Master 和备用 Master WebUI 页面，观察状态</li></ol><p>主master：</p><blockquote><h3 id="1-6-0-Spark-Master-at-spark-192-168-198-128-7077"><a href="#1-6-0-Spark-Master-at-spark-192-168-198-128-7077" class="headerlink" title=" 1.6.0 Spark Master at spark://192.168.198.128:7077"></a><a href="http://node00:8080/"><img src="http://node00:8080/static/spark-logo-77x50px-hd.png" alt="img"> 1.6.0 </a>Spark Master at spark://192.168.198.128:7077</h3><ul><li><strong>URL:</strong> spark://192.168.198.128:7077</li><li><strong>REST URL:</strong> spark://192.168.198.128:6066 (cluster mode)</li><li><strong>Alive Workers:</strong> 2</li><li><strong>Cores in use:</strong> 2 Total, 0 Used</li><li><strong>Memory in use:</strong> 2.0 GB Total, 0.0 B Used</li><li><strong>Applications:</strong> 0 Running, 6 Completed</li><li><strong>Drivers:</strong> 0 Running, 0 Completed</li><li><strong>Status:</strong> ALIVE</li></ul></blockquote><p>备用master：</p><blockquote><h3 id="1-6-0-Spark-Master-at-spark-192-168-198-130-7077"><a href="#1-6-0-Spark-Master-at-spark-192-168-198-130-7077" class="headerlink" title=" 1.6.0 Spark Master at spark://192.168.198.130:7077"></a><a href="http://node01:8080/"><img src="http://node01:8080/static/spark-logo-77x50px-hd.png" alt="img"> 1.6.0 </a>Spark Master at spark://192.168.198.130:7077</h3><ul><li><strong>URL:</strong> spark://192.168.198.130:7077</li><li><strong>REST URL:</strong> spark://192.168.198.130:6066 (cluster mode)</li><li><strong>Alive Workers:</strong> 0</li><li><strong>Cores in use:</strong> 0 Total, 0 Used</li><li><strong>Memory in use:</strong> 0.0 B Total, 0.0 B Used</li><li><strong>Applications:</strong> 0 Running, 0 Completed</li><li><strong>Drivers:</strong> 0 Running, 0 Completed</li><li><strong>Status:</strong> ALIVE</li></ul></blockquote><ol start="3"><li><p>注意点<br>  主备切换过程中不能提交 Application。<br>  主备切换过程中不影响已经在集群中运行的 Application。因为<br> Spark 是粗粒度资源调度。</p></li><li><p>测试验证<br> 提交 SparkPi 程序，kill 主 Master 观察现象。</p></li></ol><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit --master spark://node00:7077,node01:7077 --class org.apache.spark.examples.SparkPi ../lib/spark-examples-1.6.0-hadoop2.6.0.jar 10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>显示：</code></p><blockquote><p>主备切换有时差，因为也不急</p><p>程序不受影响</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sparkcore应用案例 </tag>
            
            <tag> Spark shell </tag>
            
            <tag> SparkUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark学习（二）</title>
      <link href="/2019/02/17/Spark(2)/"/>
      <url>/2019/02/17/Spark(2)/</url>
      
        <content type="html"><![CDATA[<h1 id="三、集群搭建及测试"><a href="#三、集群搭建及测试" class="headerlink" title="三、集群搭建及测试"></a>三、集群搭建及测试</h1><h2 id="Standalone"><a href="#Standalone" class="headerlink" title="Standalone"></a><strong>Standalone</strong></h2><h3 id="1、下载安装包、解压"><a href="#1、下载安装包、解压" class="headerlink" title="1、下载安装包、解压"></a>1、下载安装包、解压</h3><p><a href="https://archive.apache.org/dist/spark/">Spark历史版本下载</a></p><p><code>注意</code>： 与Hadoop的版本保持对应。</p><p>此处使用： <a href="https://archive.apache.org/dist/spark/spark-1.6.0/spark-1.6.0-bin-hadoop2.6.tgz">spark-1.6.0-bin-hadoop2.6.tgz</a></p><pre class="line-numbers language-shell"><code class="language-shell">tar -zvxf spark-1.6.0-bin-hadoop2.6.tgz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、改名"><a href="#2、改名" class="headerlink" title="2、改名"></a>2、改名</h3><pre><code>mv spark-1.6.0-bin-hadoop2.6 spark-1.6.0</code></pre><h3 id="3、修改slaves"><a href="#3、修改slaves" class="headerlink" title="3、修改slaves"></a>3、修改slaves</h3><p>进入安装包的conf目录下，修改slaves.template文件，添加从节点。并保存。</p><pre class="line-numbers language-shell"><code class="language-shell">#备份cp slaves.template slavesvim slaves<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>常驻进程：master、worker</p></blockquote><p>配置slaves（与worker对应）</p><pre class="line-numbers language-sh"><code class="language-sh">node2node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、修改-spark-env-sh"><a href="#4、修改-spark-env-sh" class="headerlink" title="4、修改 spark-env.sh"></a>4、修改 spark-env.sh</h3><p>改名（备份）</p><pre><code> cp spark-env.sh.template spark-env.sh</code></pre><p>配置spark-env.sh（注意与虚拟机实际配置对应）</p><pre class="line-numbers language-sh"><code class="language-sh">#locally#cluster#YARN client#standalone deploy#配置 java_home 路径JAVA_HOME=/usr/soft/jdk1.8.0_191#master 的 ipSPARK_MASTER_IP=192.168.198.128#提交任务的端口，默认是 7077SPARK_MASTER_PORT=7077#每个 worker 从节点能够支配的 core 的个数SPARK_WORKER_CORES=1#每个 worker 从节点能够支配的内存数SPARK_WORKER_MEMORY=1024m#配置yarnHADOOP_CONF_DIR=/usr/soft/hadoop-2.6.5/etc/hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、其他节点"><a href="#5、其他节点" class="headerlink" title="5、其他节点"></a>5、其他节点</h3><p>将spark解压文件发送到其他两个节点</p><pre class="line-numbers language-shell"><code class="language-shell">[root@node00 soft]# scp -r  spark-1.6.0-bin-hadoop2.6 node2:`pwd`[root@node00 soft]# scp -r  spark-1.6.0-bin-hadoop2.6 node3:`pwd`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6、配置环境变量（可不配，因为bin路径中包含start-all ，该命令与hdfs中的命令会冲突）</p><h3 id="7、启动：-node1"><a href="#7、启动：-node1" class="headerlink" title="7、启动：(node1)"></a>7、启动：(node1)</h3><p>在spark的解压文件的/sbin 目录下</p><pre class="line-numbers language-shell"><code class="language-shell">./start-all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止</p><pre class="line-numbers language-shell"><code class="language-shell">./stop-all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>显示：</p><p>[root@node00 sbin]# ./start-all.sh<br>starting org.apache.spark.deploy.master.Master, logging to /usr/soft/spark-1.6.0-bin-hadoop2.6/logs/spark-root-org.apache.spark.deploymaster.Master-1-node00.out</p><p>node01: starting org.apache.spark.deploy.worker.Worker, logging to /usr/soft/spark-1.6.0-bin-hadoop2.6/logs/spark-root-org.apache.spar.deploy.worker.Worker-1-node01.out</p><p>node02: starting org.apache.spark.deploy.worker.Worker, logging to /usr/soft/spark-1.6.0-bin-hadoop2.6/logs/spark-root-org.apache.spar.deploy.worker.Worker-1-node02.out</p></blockquote><p>查看三台节点的进程</p><p>node00（命令启动的节点）</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">[root@node00 sbin]# jps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2343 Master<br>2408 Jps</p></blockquote><p>nose01(配置的从节点)</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">[root@node01 ~]# jps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2292 Jps<br>2229 Worker</p></blockquote><p>node02(从节点)</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">[root@node02 ~]# jps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6216 Worker<br>6266 Jps</p></blockquote><p><code>注意：</code></p><blockquote><p>Worker在这里不是真正干活的进程，而是相当于Yarn中的NM。</p><p>它是负责管理所在节点资源的、向Master汇报所在节点的信息（如核数、内存数）</p><p>Master： 监控任务、分发任务、回收计算结果 </p></blockquote><h3 id="8、搭建客户端"><a href="#8、搭建客户端" class="headerlink" title="8、搭建客户端"></a>8、搭建客户端</h3><ul><li>将 spark 安装包原封不动的拷贝到一个新的节点上，然后，在新的节点上提交任务即可。</li></ul><p><code>注意：</code><strong>8080</strong> 是Spark WEBUI页面的端口 ； <strong>7077</strong> 是Spark任务提交的端口</p><p>web页面访问：ip:8080</p><ul><li>修改master的WEBUI端口，</li></ul><p>方法一（永久）：通过修改start-master.sh 文件（在/sbin目录下）</p><pre class="line-numbers language-shell"><code class="language-shell">vim  start-master.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到文件内容如下的部分：</p><pre><code>if [ &quot;$SPARK_MASTER_WEBUI_PORT&quot; = &quot;&quot; ]; then  SPARK_MASTER_WEBUI_PORT=8080fi</code></pre><p>方法二：在 Master 节点上导入临时环境变量，只作用于当前进程，重启就无效了。</p><pre class="line-numbers language-shell"><code class="language-shell">[root@node00 sbin]# export SPARK_MASTER_WEBUI_PORT=8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除临时变量</p><pre class="line-numbers language-shell"><code class="language-shell">[root@node00 sbin]# export -n SPARK_MASTER_WEBUI_PORT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div align="center"><img src="/2019/02/17/Spark(2)/standalone.jpg" align="middle" alt="SparkWebUI"></div><h2 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h2><h3 id="1、步骤"><a href="#1、步骤" class="headerlink" title="1、步骤"></a>1、步骤</h3><p><strong>1。2。3。4。5。8。</strong>同standalone</p><p>不用Master和Worker，所以不用第7步，我们使用的是yarn中的RM和NM</p><h3 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h3><p>添加 HADOOP_CONF_DIR配置</p><p><code>（在使用Yarn时，就能找到关于hdfs的所有配置，其中就包括IP 和Port）</code></p><p>方式一：</p><p>编辑spark-env.sh文件</p><p>方式二：</p><pre class="line-numbers language-shell"><code class="language-shell"> export HADOOP_CONF_DIR=/usr/soft/hadoop-2.6.5/etc/hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="测试：求π值"><a href="#测试：求π值" class="headerlink" title="测试：求π值"></a>测试：求π值</h2><p>Pi案例：</p><div align="center"><img src="/2019/02/17/Spark(2)/π.jpg" align="middle" alt="SparkWebUI"></div><h3 id="源码案例："><a href="#源码案例：" class="headerlink" title="源码案例："></a><strong>源码案例：</strong></h3><p>路径：在spark解压路径spark-1.6.0-bin-hadoop2.6中</p><p>spark-1.6.0-bin-hadoop2.6/examples/src/main/scala/org/apache/spark/examples/SparkPi.scala</p><p>原理：随机产生无穷多个点落入如上图形中，求落入圆中的概率：<br>$$<br>概率   p = π<em>r</em>r/(2r*2r)=π<br>$$</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">/* * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * *    http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */</span><span class="token comment" spellcheck="true">// scalastyle:off println</span><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>examples<span class="token keyword">import</span> scala<span class="token punctuation">.</span>math<span class="token punctuation">.</span>random<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>_<span class="token comment" spellcheck="true">/** Computes an approximation to pi */</span><span class="token keyword">object</span> SparkPi <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"Spark Pi"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> spark <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// args 运行时传入的参数   slices 分区数量 (决定task数量)</span>    <span class="token keyword">val</span> slices <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> args<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toInt <span class="token keyword">else</span> <span class="token number">2</span>   <span class="token comment" spellcheck="true">//MaxValue 一个无限大的数   n   随机产生的十万个的数</span>    <span class="token keyword">val</span> n <span class="token operator">=</span> math<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token number">100000L</span> <span class="token operator">*</span> slices<span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">)</span><span class="token punctuation">.</span>toInt <span class="token comment" spellcheck="true">// avoid overflow</span> <span class="token comment" spellcheck="true">//parallelize可以获得RDD  ，将1~n个数字放到RDD中</span> <span class="token comment" spellcheck="true">//val count :[Int] = spark.parallelize(1 until n, slices)     </span>    <span class="token keyword">val</span> count <span class="token operator">=</span> spark<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span><span class="token number">1</span> until n<span class="token punctuation">,</span> slices<span class="token punctuation">)</span><span class="token punctuation">.</span>map <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> i <span class="token keyword">=></span>      <span class="token keyword">val</span> x <span class="token operator">=</span> random <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span>      <span class="token keyword">val</span> y <span class="token operator">=</span> random <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token operator">+</span> y<span class="token operator">*</span>y <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>reduce<span class="token punctuation">(</span>_ <span class="token operator">+</span> _<span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"Pi is roughly "</span> <span class="token operator">+</span> <span class="token number">4.0</span> <span class="token operator">*</span> count <span class="token operator">/</span> n<span class="token punctuation">)</span>    spark<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// scalastyle:on println</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所需使用的jar包：spark-examples-1.6.0-hadoop2.6.0.jar</p><p>位置：解压目录的lib路径下</p><p>在任一节点的/bin路径下上执行如下命令：（node1）</p><h3 id="Standalone-提交命令"><a href="#Standalone-提交命令" class="headerlink" title="Standalone 提交命令:"></a><strong>Standalone</strong> 提交命令:</h3><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit    #提交spark --master spark://node3:7077   #spark主节点的地址和端口 --class org.apache.spark.examples.SparkPi ../lib/spark-examples-1.6.0-hadoop2.6.0.jar 100   # 指明运行的jar包+路径 和 jar包中执行的包名+类名 100 为传入的参数./spark-submit --master spark://node3:7077 --class org.apache.spark.examples.SparkPi ../lib/spark-examples-1.6.0-hadoop2.6.0.jar 100  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>显示：</code></p><p>提交命令的节点（node1主节点）</p><p>会显示执行日志、运算结果</p><pre class="line-numbers language-shell"><code class="language-shell">19/02/13 23:27:31 INFO scheduler.TaskSetManager: Starting task 999.0 in stage 0.0 (TID 999, node02, partition 999,PROCESS_LOCAL, 2158 bytes)19/02/13 23:27:31 INFO scheduler.TaskSetManager: Finished task 995.0 in stage 0.0 (TID 995) in 68 ms on node02 (996/1000)19/02/13 23:27:31 INFO scheduler.TaskSetManager: Finished task 997.0 in stage 0.0 (TID 997) in 131 ms on node01 (997/1000)19/02/13 23:27:31 INFO scheduler.TaskSetManager: Finished task 996.0 in stage 0.0 (TID 996) in 147 ms on node01 (998/1000)19/02/13 23:27:31 INFO scheduler.TaskSetManager: Finished task 999.0 in stage 0.0 (TID 999) in 112 ms on node02 (999/1000)19/02/13 23:27:31 INFO scheduler.TaskSetManager: Finished task 998.0 in stage 0.0 (TID 998) in 115 ms on node02 (1000/1000)19/02/13 23:27:31 INFO scheduler.DAGScheduler: ResultStage 0 (reduce at SparkPi.scala:36) finished in 79.202 s19/02/13 23:27:31 INFO scheduler.TaskSchedulerImpl: Removed TaskSet 0.0, whose tasks have all completed, from pool 19/02/13 23:27:31 INFO scheduler.DAGScheduler: Job 0 finished: reduce at SparkPi.scala:36, took 82.641779 sPi is roughly 3.14148344      #运算结果19/02/13 23:27:32 INFO handler.ContextHandler: stopped o.s.j.s.ServletContextHandler&#123;/metrics/json,null&#125;19/02/13 23:27:32 INFO handler.ContextHandler: stopped o.s.j.s.ServletContextHandler&#123;/stages/stage/kill,null&#125;19/02/13 23:27:32 INFO handler.ContextHandler: stopped o.s.j.s.ServletContextHandler&#123;/api,null&#125;。。。。。。。。。。。。。。。。。。。。。。。。。19/02/13 23:27:32 INFO handler.ContextHandler: stopped o.s.j.s.ServletContextHandler&#123;/jobs/json,null&#125;19/02/13 23:27:32 INFO handler.ContextHandler: stopped o.s.j.s.ServletContextHandler&#123;/jobs,null&#125;19/02/13 23:27:32 INFO ui.SparkUI: Stopped Spark web UI at http://192.168.198.128:404019/02/13 23:27:32 INFO cluster.SparkDeploySchedulerBackend: Shutting down all executors19/02/13 23:27:32 INFO cluster.SparkDeploySchedulerBackend: Asking each executor to shut down19/02/13 23:27:32 INFO spark.MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!19/02/13 23:27:33 INFO storage.MemoryStore: MemoryStore cleared19/02/13 23:27:33 INFO storage.BlockManager: BlockManager stopped19/02/13 23:27:33 INFO storage.BlockManagerMaster: BlockManagerMaster stopped19/02/13 23:27:33 INFO scheduler.OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped!19/02/13 23:27:33 INFO remote.RemoteActorRefProvider$RemotingTerminator: Shutting down remote daemon.19/02/13 23:27:33 INFO remote.RemoteActorRefProvider$RemotingTerminator: Remote daemon shut down; proceeding with flushing remote transports.19/02/13 23:27:34 INFO spark.SparkContext: Successfully stopped SparkContext19/02/13 23:27:34 INFO util.ShutdownHookManager: Shutdown hook called19/02/13 23:27:34 INFO util.ShutdownHookManager: Deleting directory /tmp/spark-f7c2019e-10f4-4b31-9308-5a94603de11319/02/13 23:27:35 INFO util.ShutdownHookManager: Deleting directory /tmp/spark-f7c2019e-10f4-4b31-9308-5a94603de113/httpd-39b8b4b3-9b80-4247-9c7e-ed6bd2dc389f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在命令执行期间：</p><p>在三个节点敲如下命令：jps，会显示：</p><p>node1：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@node1 ~]# jps4903 Jps2343 Master4764 SparkSubmit  #代表是提交spark的节点 (与主从无关)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>node2和node3：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@node2 bin]# jps2229 Worker5096 CoarseGrainedExecutorBackend    #代表是干活的节点 （仅为从节点进程）5167 Jps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果提交命令的节点是从节点（node2），则在该节点上会显示执行日志、运算结果</p><p>则在提交过程中，敲命令：jps  该节点会显示</p><pre class="line-numbers language-shell"><code class="language-shell">[root@node2 ~]# jps5298 CoarseGrainedExecutorBackend  #代表是干活的节点 （仅为从节点进程）2229 Worker5323 Jps5213 SparkSubmit #代表是提交spark的节点 (与主从无关)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="YARN-提交命令："><a href="#YARN-提交命令：" class="headerlink" title="YARN 提交命令："></a><strong>YARN</strong> 提交命令：</h3><p>基于Hadoop ：</p><table><thead><tr><th align="center"></th><th align="center">NN</th><th align="center">DN</th><th align="center">JN</th><th align="center">ZKFC</th><th align="center">ZK</th><th align="center">RM</th><th align="center">NM</th><th align="center">Master</th><th align="center">slave</th></tr></thead><tbody><tr><td align="center">node1</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center">√</td><td align="center"></td><td align="center">√</td></tr><tr><td align="center">node2</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center">√</td></tr><tr><td align="center">node3</td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td></tr></tbody></table><p>启动zookeeper ：（3台）</p><pre class="line-numbers language-shell"><code class="language-shell">zkServer.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动hdfs ：（1台）</p><pre class="line-numbers language-shell"><code class="language-shell">start-all.sh     <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于：Instead use start-dfs.sh and start-yarn.sh</p><p>启动resourcemanager ：(在RM的主节点上启动 ：1台)</p><pre class="line-numbers language-shell"><code class="language-shell">yarn-daemon.sh start resourcemanager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在任一节点的/bin路径下执行：（node01）</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit--master yarn #HADOOP_CONF_DIR配置使得在使用Yarn时能找到hdfs的所有配置，其中就有IP 和Port--class org.apache.spark.examples.SparkPi ../lib/spark-examples-1.6.0-hadoop2.6.0.jar 100./spark-submit --master yarn --class org.apache.spark.examples.SparkPi ../lib/spark-examples-1.6.0-hadoop2.6.0.jar 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>显示</code></p><blockquote><ul><li><p>执行日志、计算结果会在执行提交命令的节点上显示</p></li><li><p>在命令提交过程中在三台节点上敲命令：jps 会显示</p></li></ul><p>node02：</p><p>[root@node02 ~]# jps<br>3406 DataNode<br>3491 JournalNode<br>1681 QuorumPeerMain<br>4133 CoarseGrainedExecutorBackend    # 真正干活的进程<br>4092 ExecutorLauncher     # 启动executor<br>3585 NodeManager<br>3942 SparkSubmit     #提交spark的进程<br>4217 Jps</p></blockquote><h1 id="四、Standalone-模式两种提交任务方式"><a href="#四、Standalone-模式两种提交任务方式" class="headerlink" title="四、Standalone 模式两种提交任务方式"></a>四、Standalone 模式两种提交任务方式</h1><h2 id="1、Standalone-client-提交任务方式"><a href="#1、Standalone-client-提交任务方式" class="headerlink" title="1、Standalone-client 提交任务方式"></a>1、Standalone-client 提交任务方式</h2><h3 id="1-命令提交"><a href="#1-命令提交" class="headerlink" title="(1)命令提交"></a>(1)命令提交</h3><ul><li>在/sbin路径下：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">./start-all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>提交spark</li></ul><p>方式一：</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit--master spark://node00:7077--class org.apache.spark.examples.SparkPi../lib/spark-examples-1.6.0-hadoop2.6.0.jar1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit--master spark://node1:7077--deploy-mode client--class org.apache.spark.examples.SparkPi../lib/spark-examples-1.6.0-hadoop2.6.0.jar1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-执行原理图"><a href="#2-执行原理图" class="headerlink" title="(2)执行原理图"></a>(2)执行原理图</h3><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g09rz47usdj31b40vhq5r.jpg"></p><h3 id="3-执行流程"><a href="#3-执行流程" class="headerlink" title="(3)执行流程"></a>(3)执行流程</h3><blockquote><ol><li>client 模式提交任务后，会在客户端启动 Driver 进程。</li><li>Driver 会向 Master 申请启动 Application 启动的资源。</li><li>资源申请成功，Driver 端将 task 发送到 worker 端执行。</li><li>worker 将 task 执行结果返回到 Driver 端</li></ol></blockquote><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="(4)总结"></a>(4)总结</h3><blockquote><ul><li><p>client 模式适用于测试调试程序。</p></li><li><p>Driver 进程是在客户端启动的，这里的客户端就是指提交应用程序的当前节点。</p></li><li><p>在 Driver 端可以看到 task 执行的情况。生产环境下不能使用 client 模式，</p></li></ul><p><code>是因为</code>：</p><p>假设要提交 100 个 application 到集群运行，Driver 每次都会在client 端启动，那么就会导致客户端 100 次网卡流量暴增的问题。</p></blockquote><h2 id="2、Standalone-cluster-提交任务方式"><a href="#2、Standalone-cluster-提交任务方式" class="headerlink" title="2、Standalone-cluster 提交任务方式"></a>2、Standalone-cluster 提交任务方式</h2><h3 id="（1）命令提交"><a href="#（1）命令提交" class="headerlink" title="（1）命令提交"></a>（1）命令提交</h3><ul><li>在/sbin路径下：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">./start-all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>提交spark</li></ul><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit--master spark://node00:7077--deploy-mode cluster--class org.apache.spark.examples.SparkPi../lib/spark-examples-1.6.0-hadoop2.6.0.jar1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意：</code></p><blockquote><p>Standalone-cluster 提交方式，应用程序使用的所有 jar 包和文件，必须保证所有的 worker 节点都要有，因为此种方式，spark 不会自动上传jar包。</p><p>Standalone-client 和yarn 模式会在提交命令的时候自动uploading  实现jar包共享，</p><p>解决方式：</p><p>1、将所有的依赖包和文件各放一份在 worker 节点上。</p><p>2、将所有的依赖包和文件打到同一个包中，然后放在 hdfs 上。(路径需指定为hdfs上的路径)</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit--master spark://node00:7077--deploy-mode cluster--class org.apache.spark.examples.SparkPihdfs://Sunrise/lib/spark-examples-1.6.0-hadoop2.6.0.jar1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></blockquote><h3 id="（2）执行原理图"><a href="#（2）执行原理图" class="headerlink" title="（2）执行原理图"></a>（2）执行原理图</h3><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g09rzbjqjlj310w0qcwgh.jpg"></p><h3 id="（3）执行流程"><a href="#（3）执行流程" class="headerlink" title="（3）执行流程"></a>（3）执行流程</h3><blockquote><ol><li>cluster 模式提交应用程序后，会向 Master 请求启动 Driver.</li><li>Master 接受请求，随机在集群一台节点启动 Driver 进程。</li><li>Driver 启动后为当前的应用程序申请资源。</li><li>Driver 端发送 task 到 worker 节点上执行。</li><li>worker 将执行情况和执行结果返回给 Driver 端。</li></ol></blockquote><h3 id="（4）总结"><a href="#（4）总结" class="headerlink" title="（4）总结"></a>（4）总结</h3><blockquote><p>Driver 进程是在集群某一台 Worker 上启动的，在客户端是无法查看 task 的执行情况的。假设要提交 100<br>个 application 到集群运行,每次 Driver 会随机在集群中某一台 Worker 上启动，那么这 100 次网卡流量暴<br>增的问题就散布在集群上</p></blockquote><h2 id="总结-Standalone"><a href="#总结-Standalone" class="headerlink" title="总结 Standalone"></a>总结 Standalone</h2><p>Standalone  两种方式提交任务，Driver  与集群的通信包括：</p><blockquote><ol><li>Driver 负责应用程序资源的申请</li><li>任务的分发。</li><li>结果的回收。</li><li>监控 task 执行情况。</li></ol></blockquote><h1 id="五、Yarn-模式两种提交任务方式"><a href="#五、Yarn-模式两种提交任务方式" class="headerlink" title="五、Yarn  模式两种提交任务方式"></a>五、Yarn  模式两种提交任务方式</h1><h2 id="1、yarn-client-提交任务方式"><a href="#1、yarn-client-提交任务方式" class="headerlink" title="1、yarn-client 提交任务方式"></a>1、yarn-client 提交任务方式</h2><h3 id="（1）命令提交-1"><a href="#（1）命令提交-1" class="headerlink" title="（1）命令提交"></a>（1）命令提交</h3><ul><li>提交spark</li></ul><p>方式一：</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit--master yarn--class org.apache.spark.examples.SparkPi ../lib/spark-examples-1.6.0-hadoop2.6.0.jar100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit--master yarn–client--class org.apache.spark.examples.SparkPi ../lib/spark-examples-1.6.0-hadoop2.6.0.jar100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式三：</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit--master yarn--deploy-mode client--classorg.apache.spark.examples.SparkPi ../lib/spark-examples-1.6.0-hadoop2.6.0.jar100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）执行原理图-1"><a href="#（2）执行原理图-1" class="headerlink" title="（2）执行原理图"></a>（2）执行原理图</h3><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g09rzg6auij31750x4dj9.jpg"></p><h3 id="（3）执行流程-1"><a href="#（3）执行流程-1" class="headerlink" title="（3）执行流程"></a>（3）执行流程</h3><blockquote><ol><li>客户端提交一个 Application，在客户端启动一个 Driver 进程。</li><li>应用程序启动后会向 RS(ResourceManager)发送请求，启动AM(ApplicationMaster)的资源。</li><li>RS 收到请求，随机选择一台 NM(NodeManager)启动 AM。这里的 NM 相当于 Standalone 中的Worker 节点。</li><li>AM启动后，会向RS请求一批container资源，用于启动Executor.</li><li>RS 会找到一批 NM 返回给 AM,用于启动 Executor。</li><li>AM 会向 NM 发送命令启动 Executor。</li><li>Executor 启动后，会反向注册给 Driver，Driver 发送 task 到Executor,执行情况和结果返回给 Driver 端。</li></ol></blockquote><h3 id="（4）总结-1"><a href="#（4）总结-1" class="headerlink" title="（4）总结"></a>（4）总结</h3><blockquote><p>Yarn-client 模式同样是适用于测试，因为 Driver 运行在本地，Driver会与 yarn 集群中的 Executor 进行大量的通信，会造成客户机网卡流量的大量增加.</p></blockquote><blockquote><ul><li>ApplicationMaster  的作用：</li></ul><ol><li>为当前的 Application 申请资源</li><li>给 NodeManager 发送消息启动 Executor。</li></ol><ul><li>注意：</li></ul><p>ApplicationMaster 有 launchExecutor 和申请资源的功能，并没有作业调度的功能</p></blockquote><h2 id="2、yarn-cluster-提交任务方式"><a href="#2、yarn-cluster-提交任务方式" class="headerlink" title="2、yarn-cluster 提交任务方式"></a>2、yarn-cluster 提交任务方式</h2><h3 id="（1）命令提交-2"><a href="#（1）命令提交-2" class="headerlink" title="（1）命令提交"></a>（1）命令提交</h3><ul><li>提交spark</li></ul><p>方式一：</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit--master yarn--deploy-mode cluster--classorg.apache.spark.examples.SparkPi ../lib/spark-examples-1.6.0-hadoop2.6.0.jar1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二:</p><pre class="line-numbers language-shell"><code class="language-shell">./spark-submit--master yarn-cluster--classorg.apache.spark.examples.SparkPi ../lib/spark-examples-1.6.0-hadoop2.6.0.jar1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）执行原理图-2"><a href="#（2）执行原理图-2" class="headerlink" title="（2）执行原理图"></a>（2）执行原理图</h3><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g09rzn3fuwj318x0weq60.jpg"></p><h3 id="（3）执行流程-2"><a href="#（3）执行流程-2" class="headerlink" title="（3）执行流程"></a>（3）执行流程</h3><blockquote><ol><li>客户机提交 Application 应用程序，发送请求到RS(ResourceManager),请求启动AM(ApplicationMaster)。</li><li>RS 收到请求后随机在一台 NM(NodeManager)上启动 AM（相当于 Driver 端）。</li><li>AM 启动，AM 发送请求到 RS，请求一批 container 用于启动Excutor。</li><li>RS 返回一批 NM 节点给 AM。</li><li>AM 连接到 NM,发送请求到 NM 启动 Excutor。</li><li>Excutor 反向注册到 AM 所在的节点的 Driver。Driver 发送 task到 Excutor。</li></ol></blockquote><h3 id="（4）总结-2"><a href="#（4）总结-2" class="headerlink" title="（4）总结"></a>（4）总结</h3><blockquote><p>Yarn-Cluster 主要用于生产环境中，</p><p>因为 Driver 运行在 Yarn 集群中某一台 nodeManager 中，每次提交任务的 Driver 所在的机器都是<br>随机的，不会产生某一台机器网卡流量激增的现象，</p><p>缺点是任务提交后不能看到日志。只能通过 yarn 查看日志。</p></blockquote><blockquote><ul><li>ApplicationMaster  的作用：</li></ul><ol><li>为当前的 Application 申请资源</li><li>给 NodeManger 发送消息启动 Excutor。</li><li>任务调度。</li></ol><ul><li>停止集群任务命令：yarn application -kill applicationID</li></ul></blockquote><h2 id="总结yarn"><a href="#总结yarn" class="headerlink" title="总结yarn"></a>总结yarn</h2><h1 id="六、术语解释"><a href="#六、术语解释" class="headerlink" title="六、术语解释"></a>六、术语解释</h1><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0bt4g8pk2j30h909ajtj.jpg"></p><h1 id="七、宽窄依赖"><a href="#七、宽窄依赖" class="headerlink" title="七、宽窄依赖"></a>七、宽窄依赖</h1><h2 id="1、窄依赖"><a href="#1、窄依赖" class="headerlink" title="1、窄依赖"></a>1、窄依赖</h2><p>父RDD的一个partition对应子RDD**<code>一个</code>**partition</p><p>父RDD的多个partition对应子RDD**<code>一个</code>**partition</p><p>不会产生shuffle</p><pre><code>mapflatmapfilterunion</code></pre><h2 id="2、宽依赖"><a href="#2、宽依赖" class="headerlink" title="2、宽依赖"></a>2、宽依赖</h2><p>父RDD的一个partition对应子RDD**<code>多个</code>**partition</p><p>会产生shuffle</p><p>会划分stage</p><pre><code>reduceByKeyjoingroupBy</code></pre><h1 id="八、stage"><a href="#八、stage" class="headerlink" title="八、stage"></a>八、stage</h1><h2 id="0、概念"><a href="#0、概念" class="headerlink" title="0、概念"></a>0、概念</h2><p>（1）Spark任务会根据RDD之间的依赖关系，形成一个DAG有向无环图，DAG会提交给DAGScheduler，DAGScheduler会把DAG划分相互依赖的多个stage，划分依据就是RDD之间的宽窄依赖关系：遇到宽依赖就划分stage</p><p>（2）stage内有一组并行的task组成，这些task将以taskSet的格式提交给TaskScheduler运行</p><p>（2）task运行时，stage之间的关系可能并行，也可能串行</p><h2 id="1、stage-切割规则"><a href="#1、stage-切割规则" class="headerlink" title="1、stage 切割规则"></a>1、stage 切割规则</h2><p>切割规则：从后往前，遇到宽依赖就切割 stage。</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0ae0bta21j30mh0fvn7b.jpg"></p><h2 id="2、stage-计算模式"><a href="#2、stage-计算模式" class="headerlink" title="2、stage 计算模式"></a>2、stage 计算模式</h2><p>pipeline 管道计算模式,pipeline 只是一种计算思想、模式。</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0ae32q68ij30mz08s3zo.jpg"></p><blockquote><ul><li>数据在内存中流转</li><li>数据一直在管道里面什么时候数据会落地？</li></ul><ol><li>对 RDD 进行持久化(cache、persisit)。</li><li>shuffle write 的时候。</li></ol></blockquote><blockquote><ul><li>什么决定task数</li></ul><p>Stage 的 的 task  并行度是由 stage 的最后一个RDD的分区数来决定的 （partition分区数决定task数）</p><p>同一个stage中的task计算逻辑可能不同</p></blockquote><blockquote><ul><li>如何改变 RDD  的分区数？</li></ul><p>宽依赖可改分区数；（因为此时数据已落地到磁盘）</p><p>textFile(“  ”,5)</p><p>reduceByKey(_ +_ , 5)</p><p>GroupByKey(4)</p></blockquote><blockquote><ul><li>测试验证 pipeline 计算模式</li></ul><p><code>注意：</code>textFile(“./wc.txt”)是通过文件获得RDD，parallelize()是通过转换参数内容获得RDD</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"pipeline"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token keyword">val</span> rdd <span class="token operator">=</span> sc<span class="token punctuation">.</span>parallelize<span class="token punctuation">(</span>Array<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> rdd1 <span class="token operator">=</span> rdd<span class="token punctuation">.</span>map <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span><span class="token string">"map--------"</span><span class="token operator">+</span>x<span class="token punctuation">)</span>       x      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">val</span> rdd2 <span class="token operator">=</span> rdd1<span class="token punctuation">.</span>filter <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>println<span class="token punctuation">(</span><span class="token string">"fliter********"</span><span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>rdd2<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>print<span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1,2,3,4</span>sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>显示：</code></p><p>map——–1</p><p>fliter**<strong>**</strong>1</p><p>map——–2</p><p>fliter**<strong>**</strong>2</p><p>map——–3</p><p>fliter**<strong>**</strong>3</p><p>map——–4</p><p>fliter**<strong>**</strong>4</p></blockquote><h1 id="九、Spark-资源调度和任务调度"><a href="#九、Spark-资源调度和任务调度" class="headerlink" title="九、Spark  资源调度和任务调度"></a>九、Spark  资源调度和任务调度</h1><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0ae6j5tccj30nb0ctq8y.jpg"></p><h2 id="1、概念解释"><a href="#1、概念解释" class="headerlink" title="1、概念解释"></a>1、概念解释</h2><ul><li><strong>DAGScheduler</strong>是任务调度的高层调度器，是一个对象</li></ul><blockquote><p> DAGScheduler 的主要作用就是</p><p>将DAG 根据 RDD 之间的宽窄依赖关系划分为一个个的 Stage，然后将这些Stage 以 TaskSet 的形式提交给 TaskScheduler</p></blockquote><ul><li><p><strong>TaskScheduler</strong> 是任务调度的低层调度器</p></li><li><p><strong>TaskSet</strong> 其实就是一个集合，里面封装的就是一个个的 task 任务,也就是 stage 中的并行度 task 任务</p></li></ul><p>Application→Job→Stage→Task</p><ul><li><strong>Spark推测执行机制</strong></li></ul><blockquote><p>如果有运行缓慢的task,那么TaskScheduler就会启动一个新的task（在不同节点的excutor上）来执行相同的处理逻辑，两个task中哪个task先执行结束，就以那个task的执行结果为准。</p><p>在 Spark 中推测执行默认是关闭的。</p><p>推测执行可以通过 spark.speculation 属性来配置。<br><code>注意：</code></p><ul><li><p>对于 ETL 类型要入数据库的业务要关闭推测执行机制，这样就不会有重复的数据入库。</p></li><li><p>如果遇到数据倾斜的情况，开启推测执行则有可能导致一直会有task重新启动处理相同的逻辑，任务可能一直处于处理不完的状态。（这时候task慢是因为数据量过多，而不是执行性能不行）</p></li></ul></blockquote><h2 id="2、Spark-资源调度和任务调度的流程："><a href="#2、Spark-资源调度和任务调度的流程：" class="headerlink" title="2、Spark 资源调度和任务调度的流程："></a>2、Spark 资源调度和任务调度的流程：</h2><blockquote><p>1、启动集群后，Worker 节点会向 Master 节点汇报资源情况，Master 掌握了集群资源情况。</p><p>2、当 Spark 提交一个 Application 后，根据 RDD 之间依赖关系将 Application 形成一个 DAG 有向无环图。</p><p>3、任务提交后，Spark 会在Driver 端创建两个对象：DAGScheduler 和 TaskScheduler，</p><p>DAGScheduler 将DAG 根据 RDD 之间的宽窄依赖关系划分为一个个的 Stage，然后将这些Stage 以 TaskSet 的形式提交给 TaskScheduler，</p><p>TaskSchedule 会遍历TaskSet 集合，拿到每个 task 后会将 task 发送到计算节点 Executor 中去执行（其实就是发送到 Executor 中的线程池 ThreadPool 去执行）。</p><p>task 在Executor 线程池中的运行情况会向 TaskScheduler 反馈，当 task 执行失败时，则由 TaskScheduler 负责重试，将 task 重新发送给 Executor 去执行，默认重试 3 次。如果重试 3 次依然失败，那么这个 task 所在的 stage 就失败了。</p><p>stage 失败了则由 DAGScheduler 来负责重试，重新发送 TaskSet 到TaskSchdeuler，Stage 默认重试 4 次。如果重试 4 次以后依然失败，那么这个 job 就失败了。job 失败了，Application 就失败了。</p><p>TaskScheduler 不仅能重试失败的 task,还会重试 straggling*&lt;落后，缓慢的&gt;*task（也就是执行速度比其他 task 慢太多的 task）。如果有运行缓慢的 task那么 TaskScheduler 会启动Spark 的推测执行机制先执行完，task 的执行结果为准。</p></blockquote><h2 id="3、资源调度和任务调度的流程图"><a href="#3、资源调度和任务调度的流程图" class="headerlink" title="3、资源调度和任务调度的流程图"></a>3、资源调度和任务调度的流程图</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g0aeo4szikj30mt0bcgte.jpg"></p><h2 id="4、粗粒度资源申请和细粒度资源申请"><a href="#4、粗粒度资源申请和细粒度资源申请" class="headerlink" title="4、粗粒度资源申请和细粒度资源申请"></a>4、粗粒度资源申请和细粒度资源申请</h2><ul><li><p><strong>粗粒度资源申请</strong>(Spark）<br>在 Application 执行之前，将所有的资源申请完毕，当资源申请成功后，才会进行任务的调度，当所有的 task 执行完成后，才会释放这部分资源。</p><blockquote><ul><li><p><strong><code>优点：</code></strong></p><p>在 Application 执行之前，所有的资源都申请完毕，每一个task 直接使用资源就可以了，不需要 task 在执行前自己去申请资源，task 启动就快了，task 执行快了，stage 执行就快了，job 就快了，application 执行就快了。</p></li><li><p><strong><code>缺点：</code></strong></p><p>直到最后一个 task 执行完成才会释放资源，集群的资源无法充分利用。</p></li></ul></blockquote></li><li><p><strong>细粒度资源申请</strong><br>Application 执行之前不需要先去申请资源，而是直接执行，让 job中的每一个 task 在执行前自己去申请资源，task 执行完成就释放资源。</p><blockquote><p><strong><code>优点</code>：</strong></p><p>集群的资源可以充分利用。</p><p>**<code>缺点</code>**：</p><p>task 自己去申请资源，task 启动变慢，Application 的运行就响应的变慢了。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark学习（一）</title>
      <link href="/2019/02/16/Spark(1)/"/>
      <url>/2019/02/16/Spark(1)/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="一、Spark简介"><a href="#一、Spark简介" class="headerlink" title="一、Spark简介"></a>一、Spark简介</h1><h2 id="1、什么是Spark？"><a href="#1、什么是Spark？" class="headerlink" title="1、什么是Spark？"></a>1、什么是Spark？</h2><blockquote><p>Lightning-fast unified analytics engine</p><p>Apache Spark 是专为大规模数据处理而设计的快速通用的计算引擎。</p></blockquote><p>用于逻辑回归算法：</p><p>快速(100倍)：能更好的的适用于数据挖掘与机器学习等需要迭代的算法（在计算结果的基础上再计算）；Job的中间结果值在内存中流转，不需要读取HDFS，屏蔽磁盘开销；DAG调度</p><p>mr：离线，（迭代时：磁盘IO，较慢）</p><p>storm：流式</p><blockquote><p>Spark是用Scala编写的，方便快速编程</p></blockquote><h2 id="2、与MapReduce的区别"><a href="#2、与MapReduce的区别" class="headerlink" title="2、与MapReduce的区别"></a>2、与MapReduce的区别</h2><ul><li>MapReduce</li></ul><div align="center"><img src="/2019/02/16/Spark(1)/mr.jpg" align="middle" alt="MapReduce底层原理"></div><div align="center"><img src="/2019/02/16/Spark(1)/mr1.jpg" align="middle" alt="MapeduceIO原理"></div><ul><li>Spark</li></ul><div align="center"><img src="/2019/02/16/Spark(1)/spark.jpg" align="middle" alt="SparkIO原理"></div><p>区别：</p><blockquote><p>同：分布式计算框架</p><p>不同：</p><ul><li>Spark基于内存，MR基于HDFS</li><li>Spark处理数据的能力是MR的十倍以上</li><li>Spark除了基于内存计算之外，还有DAG有向无环图来切分任务的执行顺序</li></ul></blockquote><p>Spark API  的使用语言</p><blockquote><p>Scala（很好）<br>Python(不错)<br>Java(…)</p></blockquote><h2 id="3、Spark运行模式"><a href="#3、Spark运行模式" class="headerlink" title="3、Spark运行模式"></a>3、Spark运行模式</h2><ul><li>local</li></ul><p>多用于本地测试，如在 eclipse，idea 中写程序测试</p><ul><li>standalone</li></ul><p>standalone是Spark自带的资源调度框架，它支持完全分布式</p><ul><li>yarn</li></ul><p>Hadoop生态圈的资源调度框架，Spark也是可以基于yarn来计算的</p><blockquote><p>基于yarn来进行资源调度，必须实现ApplicationMaster接口，Spark实现的这个接口，所以可以使用</p></blockquote><ul><li>mesos</li></ul><p>资源调度框架</p><h1 id="二、Sparkcore"><a href="#二、Sparkcore" class="headerlink" title="二、Sparkcore"></a>二、Sparkcore</h1><h2 id="1、RDD"><a href="#1、RDD" class="headerlink" title="1、RDD"></a>1、RDD</h2><h3 id="（1）概念："><a href="#（1）概念：" class="headerlink" title="（1）概念："></a>（1）概念：</h3><p>RDD(Resilient Distributed Dateset)弹性分布式数据集</p><h3 id="（2）五大特性"><a href="#（2）五大特性" class="headerlink" title="（2）五大特性"></a>（2）五大特性</h3><blockquote><ol><li>RDD 是由一系列的 partition 组成的。</li><li>函数是作用在每一个 partition（split）上的。</li><li>RDD 之间有一系列的依赖关系。</li><li>分区器是作用在 K,V 格式的 RDD 上。</li><li>RDD 提供一系列最佳的计算位置。</li></ol></blockquote><blockquote><ul><li><code>获取RDD的方式</code></li><li>parallelize()</li></ul><blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Distribute a local Scala collection to form an RDD</span>JavaRDD<span class="token operator">&lt;</span>T<span class="token operator">></span> rdd <span class="token operator">=</span> javaSparkContext<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">)</span>；JavaRDD<span class="token operator">&lt;</span>T<span class="token operator">></span> rdd <span class="token operator">=</span> javaSparkContext<span class="token punctuation">.</span><span class="token function">parallelize</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">,</span><span class="token keyword">int</span> numSlices<span class="token punctuation">)</span>；    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>parallelizePairs</li></ul><blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Distribute a local Scala collection to form an RDD</span>JavaPairRDD<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> rdd <span class="token operator">=</span>      javaSparkContext<span class="token punctuation">.</span><span class="token function">parallelizePairs</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">>></span> list<span class="token punctuation">)</span>；     JavaPairRDD<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> rdd <span class="token operator">=</span>      javaSparkContext<span class="token punctuation">.</span><span class="token function">parallelizePairs</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">>></span> list<span class="token punctuation">,</span><span class="token keyword">int</span> numSlices<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li>textFile(“./xx.txt”)   也可指定分区</li></ul></blockquote><h3 id="（3）RDD理解图"><a href="#（3）RDD理解图" class="headerlink" title="（3）RDD理解图"></a>（3）RDD理解图</h3><div align="center"><img src="/2019/02/16/Spark(1)/rdd1.jpg" align="middle" alt="rdd1原理"></div><p><code>理论注解</code></p><blockquote><ul><li><p>RDD  实际上不存储数据，这里方便理解，暂时理解为存储数据。</p></li><li><p>textFile 方法底层封装的是MR 读取文件的方式(先 split,再读取文件)，默认 split 大小是一个 block 大小。</p></li><li><p>RDD 提供计算最佳位置，体现了数据本地化。体现了大数据中“计算移动数据不移动”的理念。</p></li></ul><p>❔  哪里体现 RDD 的分布式？</p><p>👆  RDD 是由 Partition 组成，partition 是分布在不同节点上的。</p><p>❔  哪里体现 RDD 的弹性（容错）？</p><p>👆 partition 数量，大小没有限制,默认和split（block）一致，体现了 RDD 的弹性。<br>👆 RDD 之间依赖关系，可以基于上一个 RDD 重新计算出 RDD。</p><p>❔  什么是 K,V 格式的 RDD?</p><p>👆 如果 RDD 里面存储的数据都是二元组对象，那么这个 RDD 我们就叫做 K,V 格式的 RDD。</p><p>👆 MR有分区器（根据key值求hash，来决定数据存放在哪个分区中，所以分区器必须作用在K，V格式的RDD上）</p></blockquote><div align="center"><img src="/2019/02/16/Spark(1)/rdd.jpg" align="middle" alt="rdd关系"></div><h2 id="2、Spark任务执行原理"><a href="#2、Spark任务执行原理" class="headerlink" title="2、Spark任务执行原理"></a>2、Spark任务执行原理</h2><div align="center"><img src="/2019/02/16/Spark(1)/Spark任务执行原理.png" align="middle" alt="Spark任务执行原理"></div><div align="center"><img src="/2019/02/16/Spark(1)/Spark任务执行原理0.png" align="middle" alt="Spark任务执行原理"></div><p>Driver：（相当于ApplicationMaster）</p><p>Worker：（相当于NodeManager）</p><p>以上图中有四个机器节点，</p><p>Driver 和 Worker 是启动在节点上的进程，<br>运行在 JVM 中的进程。<br> Driver 与集群节点之间有频繁的通信。<br> Driver：任务的调度（监控任务、 负责任务(tasks)的分发和结果的回收）。如果 task<br>的计算结果非常大就不要回收了。会造成 oom。<br> Worker 是 Standalone 资源调度框架里面资源管理的从节点。也是JVM 进程。<br> Master 是 Standalone 资源调度框架里面资源管理的主节点。也是JVM 进程。</p><h2 id="3、Spark代码流程"><a href="#3、Spark代码流程" class="headerlink" title="3、Spark代码流程"></a>3、Spark代码流程</h2><h3 id="以用Scala编写WordCount为例"><a href="#以用Scala编写WordCount为例" class="headerlink" title="以用Scala编写WordCount为例"></a><code>以用Scala编写WordCount为例</code></h3><p>1、创建 SparkConf 对象<br> 可以设置 Application name。<br> 可以设置运行模式及资源需求。</p><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/**          * 几种运行方式：          *   1.本地运行          *   2.yarn          *   3.standalone          *   4.mesos          */</span>  conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"wc"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、创建 SparkContext 对象</p><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token keyword">val</span>  context <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、基于 Spark 的上下文创建一个 RDD，对 RDD 进行处理。</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//获取文件中每一行数据的ADD</span> <span class="token keyword">val</span> lineADD <span class="token operator">=</span> context<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"./wc.txt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取每一行数据按空格切分后的ADD</span> <span class="token keyword">val</span> wordADD <span class="token operator">=</span> lineADD<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取每个单词加上,1 后的ADD（K,V格式）</span> <span class="token keyword">val</span> KVADD <span class="token operator">=</span> wordADD<span class="token punctuation">.</span>map<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取将相同key的value相加后的ADD（K,V格式），相当于Tuple2</span> <span class="token keyword">val</span> resultADD <span class="token operator">=</span> KVADD<span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token operator">+</span>y<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//降序排序</span> <span class="token keyword">val</span> sortADD <span class="token operator">=</span> resultADD<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、应用程序中要有 Action 类算子来触发 Transformation 类算子执行。</p><pre class="line-numbers language-scala"><code class="language-scala">sortADD<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、关闭 Spark 上下文对象 SparkContext。</p><pre class="line-numbers language-scala"><code class="language-scala">context<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、Transformations-转换算子"><a href="#4、Transformations-转换算子" class="headerlink" title="4、Transformations 转换算子"></a>4、Transformations 转换算子</h2><h3 id="（1）概念"><a href="#（1）概念" class="headerlink" title="（1）概念"></a>（1）概念</h3><p>Transformations 类算子是一类算子（函数）叫做转换算子，如map,flatMap,reduceByKey 等。Transformations 算子是延迟执行，也叫懒加载执行。</p><blockquote><p>有action触发算子任务才能提交，才会执行runjob</p><p>算子必须作用在RDD上</p></blockquote><h3 id="（2）Transformation-类算子"><a href="#（2）Transformation-类算子" class="headerlink" title="（2）Transformation 类算子"></a>（2）Transformation 类算子</h3><blockquote><p>:arrow_up_small: <strong>filter</strong><br>过滤符合条件的记录数，true 保留，false 过滤掉。</p><p>🔼 <strong>contains</strong></p><p>作为条件，是否包含，返回true|false</p></blockquote><blockquote><p>:arrow_up_small:<strong>map</strong><br>将一个 RDD 中的每个数据项，通过 map 中的函数映射变为一个新的元素。<br>特点：输入一条，输出一条数据。</p><p>:black_joker: <strong>mapToPair</strong>   (Java)</p><p>将RDD（如lineRDD）转换成二元组</p><p>🃏 <strong>mapValues</strong></p><p>操作（K,V）RDD中的value     返回Tuple2&lt;&gt;</p><p>:arrow_up_small: <strong>flatMap</strong><br>先 map 后 flat。与 map 类似，每个输入项可以映射为 0 到多个输出项。</p><p>🔼 <strong>mapPartition</strong></p><p>与 map 类似，遍历的单位是每个 partition 上的数据。一进一出</p><p>🔼<strong>mapPartitionWithIndex</strong><br>类似于 mapPartitions,除此之外还会携带分区的索引值。</p><p>🔼 <strong>repartition</strong></p><p>repartition（3）</p><p>增加或减少分区.会产生shuffle</p><p>🔼<strong>coalesce</strong></p><p>coalesce(3,false)</p><p>常用于减少分区，第二个参数决定减少分区时是否产生shuffle：true 为产生 shuffle，false 不产生 shuffle。默认是 <code>false</code>。</p><p>如果 coalesce 设置的分区数比原来的 RDD 的分区数还多的话，第二个参数设置为 <code>false</code> 不会起作用，</p><p>如果设置成 true，效果和 repartition 一样。即 </p><p>repartition(numPartitions) = coalesce(numPartitions,true)</p></blockquote><blockquote><p>:arrow_up_small:<strong>sample</strong><br>随机抽样算子，根据传进去的小数按比例进行，有放回或者无放回的抽样。</p><p>:arrow_up_small:<strong>reduceByKey</strong><br>对于K，V格式的RDD，将key相同的RDD，对其value值根据相应的逻辑进行处理。</p><p>🔼<strong>reduceByKeyAndWindow</strong> (f1,f2,s1,s2)  </p><p>窗口函数</p><p>:arrow_up_small:<strong>sortByKey/sortBy</strong><br>作用在 K,V 格式的 RDD 上，对 key 进行升序或者降序排序。</p></blockquote><blockquote><p>:arrow_up_small:<strong>join / leftOuterJoin / rightOuterJoin / fullOuterJoin</strong></p><p>join ：保留公共元素 （K,V）</p><p>leftOutJoin ：保留左边的元素</p><p>rightOutJoin ：保留右边元素</p><p>fullOutJoin ：去重保留 （保留最大分区数）</p><p>作用在 K,V 格式的 RDD 上。根据 K 进行连接，对（K,V）join(K,W)返回（K,(V,W)）</p><ul><li>join 后的分区数与父 RDD 分区数多的那一个相同 </li></ul><p>🔼<strong>union</strong></p><p>都保留 （保留总分区数）</p><p>合并两个数据集。两个数据集的类型要一致。</p><ul><li>返回新的 RDD 的分区数是合并 RDD 分区数的总和。</li></ul><p>🔼<strong>intersection</strong></p><p>取两个数据集的交集</p><p>🔼 <strong>subtract</strong></p><p>取两个数据集的差集</p><p>🔼 <strong>distinct</strong>(map+reduceByKey+map)</p><p>去重</p></blockquote><blockquote><p>🔼 <strong>cogroup</strong></p><p>当调用类型（K,V）和（K，W）的数据上时，返回一个数据集（K，（Iterable<V>,Iterable<W>））</W></V></p><p>🔼<strong>groupByKey</strong><br>作用在 K，V 格式的 RDD 上。根据 Key 进行分组。返回（K，Iterable <V>）。</V></p></blockquote><blockquote><p>🔼<strong>zip</strong><br>将两个 RDD 中的元素（KV 格式/非 KV 格式）变成一个 KV 格式的 RDD,两个 RDD 的个数必须相同。</p><p>🔼<strong>zipWithIndex</strong><br>该函数将 RDD 中的元素和这个元素在 RDD 中的索引号（从 0 开始）组合成（K,V）对。</p><p>🔼</p></blockquote><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> WordCount <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"WC"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> context <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//用于了解集群</span>    <span class="token keyword">val</span> linesRDD <span class="token operator">:</span>RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"./words.txt"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  lineRDD.filter(x=>&amp;#123;</span><span class="token comment" spellcheck="true">//            x.contains("sh")</span><span class="token comment" spellcheck="true">//        &amp;#125;).foreach(println)</span><span class="token comment" spellcheck="true">//  lineRDD.sample(true,0.2).foreach(println)</span><span class="token comment" spellcheck="true">//  lineRDD.map((_,1)).reduceByKey(_ + _).sortBy(_._2,false).foreach(println)</span><span class="token comment" spellcheck="true">//  lineRDD.map((_,1)).sortByKey().foreach(println)</span>    <span class="token keyword">val</span> wordRDD <span class="token operator">:</span>RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span>  <span class="token operator">=</span> linesRDD<span class="token punctuation">.</span>flatMap<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>lines <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      lines<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//匿名函数</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> KVRDD<span class="token operator">:</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> wordRDD<span class="token punctuation">.</span>map<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> result<span class="token operator">:</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> KVRDD<span class="token punctuation">.</span>reduceByKey<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token string">"a:"</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">",b:"</span><span class="token operator">+</span>b<span class="token punctuation">)</span>        a<span class="token operator">+</span>b        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>补充</code></p><pre class="line-numbers language-java"><code class="language-java">    val conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"WC"</span><span class="token punctuation">)</span>    val context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//用于了解集群</span>   <span class="token comment" spellcheck="true">//parallelizePairs</span>   <span class="token comment" spellcheck="true">//join</span>Optional<span class="token punctuation">.</span><span class="token function">absent</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>optinal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、Action-行动算子"><a href="#5、Action-行动算子" class="headerlink" title="5、Action 行动算子"></a>5、Action 行动算子</h2><h3 id="（1）概念-1"><a href="#（1）概念-1" class="headerlink" title="（1）概念"></a>（1）概念</h3><p>Action 类算子也是一类算子（函数）叫做行动算子，如foreach,collect，count 等。</p><p>Transformations 类算子是延迟执行，Action 类算子是触发执行（立即）。</p><blockquote><p>一个 application 应用程序中有几个 Action 类算子执行，就有几个 job 运行。</p></blockquote><h3 id="（2）Action-类算子"><a href="#（2）Action-类算子" class="headerlink" title="（2）Action 类算子"></a>（2）Action 类算子</h3><blockquote><p>:arrow_up_small: <strong>count</strong><br>返回数据集中的元素数。会在结果计算完成后回收到 Driver 端。</p><p>🔼<strong>countByKey</strong><br>作用到 K,V 格式的 RDD 上，根据 Key 计数相同 Key 的数据集元素。</p><p>🔼<strong>countByValue</strong><br>根据数据集每个元素相同的内容来计数。返回相同内容的元素对应的条数。</p><p>:arrow_up_small: <strong>take(n)</strong><br>返回一个包含数据集前 n 个元素的集合。<br>:arrow_up_small: <strong>first</strong><br>first=take(1),返回数据集中的第一个元素</p><p>🔼 <strong>collect</strong><br>将计算结果回收到 Driver 端。</p><p>:arrow_up_small: <strong>foreach</strong><br>循环遍历数据集中的每个元素，运行相应的逻辑。</p><p>:arrow_up_small: <strong>foreachPartition</strong></p><p>遍历的数据是每个 partition 的数据。所以传的参数为Iterator</p><p>:arrow_up_small:<strong>reduce</strong><br>根据聚合逻辑聚合数据集中的每个元素。</p></blockquote><pre class="line-numbers language-scala"><code class="language-scala">    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"transf"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> context <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token keyword">val</span> lineADD <span class="token operator">=</span> context<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"./wc.txt"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> wordADD <span class="token operator">=</span> lineADD<span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// println(wordADD.count())</span><span class="token comment" spellcheck="true">//lineADD中数据回收</span>    <span class="token keyword">val</span> arr<span class="token operator">=</span> lineADD<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>    arr<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  val takes: Array[String] = lineRDD.take(5)</span><span class="token comment" spellcheck="true">//  takes.foreach(println)</span><span class="token comment" spellcheck="true">//  val str: String = lineRDD.first()</span><span class="token comment" spellcheck="true">//  println(str)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、控制算子"><a href="#6、控制算子" class="headerlink" title="6、控制算子"></a>6、控制算子</h2><h3 id="（1）概念：-1"><a href="#（1）概念：-1" class="headerlink" title="（1）概念："></a>（1）概念：</h3><ul><li>控制算子有三种，cache、persist、checkpoint</li><li>以上算子都可以将RDD 持久化，持久化的单位是 partition。</li><li>cache 和 persist 都是懒 执行的。</li><li>必须有一个 action 类算子触发执行。</li><li>cache 和 persist 算子的返回值可赋值给一个变量，在其他 job 中直接使用这个变量就是使用持久化的数据了</li><li>checkpoint 算子不仅能将 RDD 持久化到磁盘，还能切断 RDD 之间的依赖关系（所有父RDD）。</li><li><code>错误：</code>rdd.cache().count() 返回的不是持久化的 RDD，而是一个数值了。</li></ul><h3 id="（2）详解"><a href="#（2）详解" class="headerlink" title="（2）详解"></a>（2）详解</h3><blockquote><p>1️⃣<strong>​ cache</strong><br>默认将 RDD 的数据持久化到内存中。cache 是懒执行。</p><ul><li><code>注意</code>：</li></ul><p>chche () =persist()=persist(StorageLevel.Memory_Only)</p></blockquote><blockquote><p>2️⃣ <strong>persist</strong> </p><p>支持指定持久化级别</p><p>useOffHeap  使用堆外内存</p><p>disk、memory、offheap、deserialized（不序列化）、replication（副本数，默认为1）</p><p>序列化：压缩数据（节省空间，使用数据时要反序列化，会额外消耗CPU性能）</p><p>none 、disk_only、disk_only_2、memeory_only 、memeory_only _ser 、 memory_and_disk 、 memory_and_disk_2</p></blockquote><blockquote><p>3️⃣ <strong>checkpoint</strong>  </p><p>checkpoint 将 RDD 持久化到磁盘，还可以切断 RDD 之间的依赖关系。</p><ul><li>checkpoint 的执行原理：</li></ul><ol><li>当 RDD 的 job 执行完毕后，会从 finalRDD 从后往前回溯。</li><li>当回溯到某一个 RDD 调用了 checkpoint 方法，会对当前的RDD 做一个标记。</li><li>Spark 框架会自动启动一个新的 job，重新计算这个 RDD 的数据，将数据持久化到 HDFS 上。</li></ol><ul><li>优化：</li></ul><p>对 RDD 执行 checkpoint 之前，最好对这个 RDD 先执行cache，这样新启动的 job 只需要将内存中的数据拷贝到 HDFS上就可以，省去了重新计算这一步。</p></blockquote><p>持久化级别：如下</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g098pwwdc9j30f70aztbu.jpg"></p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> cocnf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppname<span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token keyword">val</span> context <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置CP在HDFS上的路径</span>context<span class="token punctuation">.</span>setCheckPointDir<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">val</span> lineADD <span class="token operator">=</span> context<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"./countword.txt"</span><span class="token punctuation">)</span><span class="token keyword">val</span> time1 <span class="token operator">=</span> System<span class="token punctuation">.</span>currentTimeMillis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> c <span class="token operator">=</span>  lineADD<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> time2 <span class="token operator">=</span> System<span class="token punctuation">.</span>currentTimeMillis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> t1 <span class="token operator">=</span> time2 <span class="token operator">-</span> time1<span class="token comment" spellcheck="true">//做缓存(persisit（m_o）)</span>linelineADD <span class="token operator">=</span> lineADD<span class="token punctuation">.</span>cache<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//做持久化</span>lineADD<span class="token punctuation">.</span>persisit<span class="token punctuation">(</span>StorageLevel<span class="token punctuation">.</span>memory_only<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//checkpoint 容错,最好还有cache</span>lineADD<span class="token punctuation">.</span>checkpoint<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> time3 <span class="token operator">=</span> System<span class="token punctuation">.</span>currentTimeMillis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> c <span class="token operator">=</span>  lineADD<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> time4 <span class="token operator">=</span> System<span class="token punctuation">.</span>currentTimeMillis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> t2 <span class="token operator">=</span> time4 <span class="token operator">-</span> time3<span class="token comment" spellcheck="true">//t1 远大于 t2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="WordCount"><a href="#WordCount" class="headerlink" title="WordCount"></a>WordCount</h2><h3 id="以用Java编写为例"><a href="#以用Java编写为例" class="headerlink" title="以用Java编写为例"></a><code>以用Java编写为例</code></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>shsxt<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>java<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaPairRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaRDD<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>JavaSparkContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>function<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> scala<span class="token punctuation">.</span>Tuple2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCount</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        SparkConf conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkConf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMaster</span><span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAppName</span><span class="token punctuation">(</span><span class="token string">"wc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaSparkContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JavaSparkContext</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> rdd <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">textFile</span><span class="token punctuation">(</span><span class="token string">"./wc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> count <span class="token operator">=</span> rdd<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> collect <span class="token operator">=</span> rdd<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> take <span class="token operator">=</span> rdd<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String first <span class="token operator">=</span> rdd<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaRDD<span class="token operator">&lt;</span>String<span class="token operator">></span> wordRDD <span class="token operator">=</span> rdd<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String line<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> list<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        wordRDD.map(new Function&lt;String>() &amp;#123;</span><span class="token comment" spellcheck="true">//            @Override</span><span class="token comment" spellcheck="true">//            public String call(String v1) throws Exception &amp;#123;</span><span class="token comment" spellcheck="true">//                return null;</span><span class="token comment" spellcheck="true">//            &amp;#125;</span><span class="token comment" spellcheck="true">//        &amp;#125;)</span>        JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> pairRDD <span class="token operator">=</span> wordRDD<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>String word<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> resultRDD <span class="token operator">=</span> pairRDD<span class="token punctuation">.</span><span class="token function">reduceByKey</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function2</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Integer <span class="token function">call</span><span class="token punctuation">(</span>Integer v1<span class="token punctuation">,</span> Integer v2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairRDD<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> reverseRDD <span class="token operator">=</span> resultRDD<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> tuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>tuple2<span class="token punctuation">.</span>_2<span class="token punctuation">,</span> tuple2<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairRDD<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> sortByKey <span class="token operator">=</span> reverseRDD<span class="token punctuation">.</span><span class="token function">sortByKey</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JavaPairRDD<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> result <span class="token operator">=</span> sortByKey<span class="token punctuation">.</span><span class="token function">mapToPair</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PairFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">,</span> String<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> tuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>tuple2<span class="token punctuation">.</span>_2<span class="token punctuation">,</span> tuple2<span class="token punctuation">.</span>_1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoidFunction</span><span class="token operator">&lt;</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Tuple2<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> tuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Linx系统定时调度：</p><p>crontab</p><p>定时调度脚本文件</p><p>脚本文件中，编辑spark 提交命令</p><blockquote><p> <code>注意：</code>  脚本文件中的命令必须写它的完整路径，否则找不到此命令</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算引擎 </tag>
            
            <tag> 基于内存 </tag>
            
            <tag> RDD算子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List方法</title>
      <link href="/2019/02/16/List%E6%96%B9%E6%B3%95/"/>
      <url>/2019/02/16/List%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> <span class="token operator">+</span><span class="token punctuation">(</span>elem<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>前置一个元素列表<span class="token keyword">def</span> <span class="token operator">:</span><span class="token operator">:</span><span class="token punctuation">(</span>x<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>在这个列表的开头添加的元素。<span class="token keyword">def</span> <span class="token operator">:</span><span class="token operator">:</span><span class="token operator">:</span><span class="token punctuation">(</span>prefix<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>增加了一个给定列表中该列表前面的元素。<span class="token keyword">def</span> <span class="token operator">:</span><span class="token operator">:</span><span class="token punctuation">(</span>x<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>增加了一个元素x在列表的开头<span class="token keyword">def</span> addString<span class="token punctuation">(</span>b<span class="token operator">:</span> StringBuilder<span class="token punctuation">)</span><span class="token operator">:</span> StringBuilder追加列表的一个字符串生成器的所有元素。<span class="token keyword">def</span> addString<span class="token punctuation">(</span>b<span class="token operator">:</span> StringBuilder<span class="token punctuation">,</span> sep<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> StringBuilder追加列表的使用分隔字符串一个字符串生成器的所有元素。<span class="token keyword">def</span> apply<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> A选择通过其在列表中索引的元素<span class="token keyword">def</span> contains<span class="token punctuation">(</span>elem<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>测试该列表中是否包含一个给定值作为元素。<span class="token keyword">def</span> copyToArray<span class="token punctuation">(</span>xs<span class="token operator">:</span> Array<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> len<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span>列表的副本元件阵列。填充给定的数组xs与此列表中最多len个元素，在位置开始。<span class="token keyword">def</span> distinct<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>建立从列表中没有任何重复的元素的新列表。<span class="token keyword">def</span> drop<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回除了第n个的所有元素。<span class="token keyword">def</span> dropRight<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回除了最后的n个的元素<span class="token keyword">def</span> dropWhile<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>丢弃满足谓词的元素最长前缀。<span class="token keyword">def</span> endsWith<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">(</span>that<span class="token operator">:</span> Seq<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>测试列表是否使用给定序列结束。<span class="token keyword">def</span> equals<span class="token punctuation">(</span>that<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>equals方法的任意序列。比较该序列到某些其他对象。<span class="token keyword">def</span> exists<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>测试谓词是否持有一些列表的元素。<span class="token keyword">def</span> filter<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回列表满足谓词的所有元素。<span class="token keyword">def</span> forall<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>测试谓词是否持有该列表中的所有元素。<span class="token keyword">def</span> foreach<span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Unit</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span>应用一个函数f以列表的所有元素。<span class="token keyword">def</span> head<span class="token operator">:</span> A选择列表的第一个元素<span class="token keyword">def</span> indexOf<span class="token punctuation">(</span>elem<span class="token operator">:</span> A<span class="token punctuation">,</span> from<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span>经过或在某些起始索引查找列表中的一些值第一次出现的索引。<span class="token keyword">def</span> init<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回除了最后的所有元素<span class="token keyword">def</span> intersect<span class="token punctuation">(</span>that<span class="token operator">:</span> Seq<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>计算列表和另一序列之间的多重集交集。<span class="token keyword">def</span> isEmpty<span class="token operator">:</span> <span class="token builtin">Boolean</span>测试列表是否为空<span class="token keyword">def</span> iterator<span class="token operator">:</span> Iterator<span class="token punctuation">[</span>A<span class="token punctuation">]</span>创建一个新的迭代器中包含的可迭代对象中的所有元素<span class="token keyword">def</span> last<span class="token operator">:</span> A返回最后一个元素<span class="token keyword">def</span> lastIndexOf<span class="token punctuation">(</span>elem<span class="token operator">:</span> A<span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span>之前或在一个给定的最终指数查找的列表中的一些值最后一次出现的索引<span class="token keyword">def</span> length<span class="token operator">:</span> <span class="token builtin">Int</span>返回列表的长度<span class="token keyword">def</span> map<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> B<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>B<span class="token punctuation">]</span>通过应用函数以g这个列表中的所有元素构建一个新的集合<span class="token keyword">def</span> max<span class="token operator">:</span> A查找最大的元素<span class="token keyword">def</span> min<span class="token operator">:</span> A查找最小元素<span class="token keyword">def</span> mkString<span class="token operator">:</span> <span class="token builtin">String</span>显示列表的字符串中的所有元素<span class="token keyword">def</span> mkString<span class="token punctuation">(</span>sep<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span>显示的列表中的字符串中使用分隔串的所有元素<span class="token keyword">def</span> reverse<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回新列表，在相反的顺序元素<span class="token keyword">def</span> sorted<span class="token punctuation">[</span>B <span class="token operator">></span><span class="token operator">:</span> A<span class="token punctuation">]</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>根据排序对列表进行排序<span class="token keyword">def</span> startsWith<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">(</span>that<span class="token operator">:</span> Seq<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">,</span> offset<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>测试该列表中是否包含给定的索引处的给定的序列<span class="token keyword">def</span> sum<span class="token operator">:</span> A概括这个集合的元素<span class="token keyword">def</span> tail<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回除了第一的所有元素<span class="token keyword">def</span> take<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回前n个元素<span class="token keyword">def</span> takeRight<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回最后n个元素<span class="token keyword">def</span> toArray<span class="token operator">:</span> Array<span class="token punctuation">[</span>A<span class="token punctuation">]</span>列表以一个数组变换<span class="token keyword">def</span> toBuffer<span class="token punctuation">[</span>B <span class="token operator">></span><span class="token operator">:</span> A<span class="token punctuation">]</span><span class="token operator">:</span> Buffer<span class="token punctuation">[</span>B<span class="token punctuation">]</span>列表以一个可变缓冲器转换<span class="token keyword">def</span> toMap<span class="token punctuation">[</span>T<span class="token punctuation">,</span> U<span class="token punctuation">]</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>T<span class="token punctuation">,</span> U<span class="token punctuation">]</span>此列表的映射转换<span class="token keyword">def</span> toSeq<span class="token operator">:</span> Seq<span class="token punctuation">[</span>A<span class="token punctuation">]</span>列表的序列转换<span class="token keyword">def</span> toSet<span class="token punctuation">[</span>B <span class="token operator">></span><span class="token operator">:</span> A<span class="token punctuation">]</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>B<span class="token punctuation">]</span>列表到集合变换<span class="token keyword">def</span> toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span>列表转换为字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map方法</title>
      <link href="/2019/02/16/Map%E6%96%B9%E6%B3%95/"/>
      <url>/2019/02/16/Map%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-scala"><code class="language-scala">Scala Map 方法下表列出了 Scala Map 常用的方法：序号    方法及描述<span class="token keyword">def</span> <span class="token operator">++</span><span class="token punctuation">(</span>xs<span class="token operator">:</span> Map<span class="token punctuation">[</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回一个新的 Map，新的 Map xs 组成<span class="token keyword">def</span> <span class="token operator">-</span><span class="token punctuation">(</span>elem1<span class="token operator">:</span> A<span class="token punctuation">,</span> elem2<span class="token operator">:</span> A<span class="token punctuation">,</span> elems<span class="token operator">:</span> A<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回一个新的 Map<span class="token punctuation">,</span> 移除 key 为 elem1<span class="token punctuation">,</span> elem2 或其他 elems。<span class="token keyword">def</span> <span class="token operator">--</span><span class="token punctuation">(</span>xs<span class="token operator">:</span> GTO<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回一个新的 Map<span class="token punctuation">,</span> 移除 xs 对象中对应的 key<span class="token keyword">def</span> get<span class="token punctuation">(</span>key<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span>B<span class="token punctuation">]</span>返回指定 key 的值<span class="token keyword">def</span> iterator<span class="token operator">:</span> Iterator<span class="token punctuation">[</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">]</span>创建新的迭代器，并输出 key<span class="token operator">/</span>value 对<span class="token keyword">def</span> addString<span class="token punctuation">(</span>b<span class="token operator">:</span> StringBuilder<span class="token punctuation">)</span><span class="token operator">:</span> StringBuilder将 Map 中的所有元素附加到StringBuilder，可加入分隔符<span class="token keyword">def</span> addString<span class="token punctuation">(</span>b<span class="token operator">:</span> StringBuilder<span class="token punctuation">,</span> sep<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> StringBuilder将 Map 中的所有元素附加到StringBuilder，可加入分隔符<span class="token keyword">def</span> apply<span class="token punctuation">(</span>key<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> B返回指定键的值，如果不存在返回 Map 的默认方法<span class="token keyword">def</span> clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>从一个 Map 复制到另一个 Map<span class="token keyword">def</span> contains<span class="token punctuation">(</span>key<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>如果 Map 中存在指定 key，返回 <span class="token boolean">true</span>，否则返回 <span class="token boolean">false</span>。<span class="token keyword">def</span> copyToArray<span class="token punctuation">(</span>xs<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span>复制集合到数组<span class="token keyword">def</span> count<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span>计算满足指定条件的集合元素数量<span class="token keyword">def</span> default<span class="token punctuation">(</span>key<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> B定义 Map 的默认值，在 key 不存在时返回。<span class="token keyword">def</span> drop<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回丢弃前n个元素新集合<span class="token keyword">def</span> dropRight<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回丢弃最后n个元素新集合<span class="token keyword">def</span> dropWhile<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>从左向右丢弃元素，直到条件p不成立<span class="token keyword">def</span> empty<span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回相同类型的空 Map<span class="token keyword">def</span> equals<span class="token punctuation">(</span>that<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>如果两个 Map 相等<span class="token punctuation">(</span>key<span class="token operator">/</span>value 均相等<span class="token punctuation">)</span>，返回<span class="token boolean">true</span>，否则返回<span class="token boolean">false</span><span class="token keyword">def</span> exists<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>判断集合中指定条件的元素是否存在<span class="token keyword">def</span> filter<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回满足指定条件的所有集合<span class="token keyword">def</span> filterKeys<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回符合指定条件的的不可变 Map<span class="token keyword">def</span> find<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">]</span>查找集合中满足指定条件的第一个元素<span class="token keyword">def</span> foreach<span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Unit</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span>将函数应用到集合的所有元素<span class="token keyword">def</span> init<span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回所有元素，除了最后一个<span class="token keyword">def</span> isEmpty<span class="token operator">:</span> <span class="token builtin">Boolean</span>检测 Map 是否为空<span class="token keyword">def</span> keys<span class="token operator">:</span> Iterable<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回所有的key<span class="token operator">/</span>p<span class="token operator">></span><span class="token keyword">def</span> last<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span>返回最后一个元素<span class="token keyword">def</span> max<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span>查找最大元素<span class="token keyword">def</span> min<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span>查找最小元素<span class="token keyword">def</span> mkString<span class="token operator">:</span> <span class="token builtin">String</span>集合所有元素作为字符串显示<span class="token keyword">def</span> product<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span>返回集合中数字元素的积。<span class="token keyword">def</span> remove<span class="token punctuation">(</span>key<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span>B<span class="token punctuation">]</span>移除指定 key<span class="token keyword">def</span> retain<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">type</span>如果符合满足条件的返回 <span class="token boolean">true</span><span class="token keyword">def</span> size<span class="token operator">:</span> <span class="token builtin">Int</span>返回 Map 元素的个数<span class="token keyword">def</span> sum<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span>返回集合中所有数字元素之和<span class="token keyword">def</span> tail<span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回一个集合中除了第一元素之外的其他元素<span class="token keyword">def</span> take<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回前 n 个元素<span class="token keyword">def</span> takeRight<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回后 n 个元素<span class="token keyword">def</span> takeWhile<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>A<span class="token punctuation">,</span> B<span class="token punctuation">]</span>返回满足指定条件的元素<span class="token keyword">def</span> toArray<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">]</span>集合转数组<span class="token keyword">def</span> toBuffer<span class="token punctuation">[</span>B <span class="token operator">></span><span class="token operator">:</span> A<span class="token punctuation">]</span><span class="token operator">:</span> Buffer<span class="token punctuation">[</span>B<span class="token punctuation">]</span>返回缓冲区，包含了 Map 的所有元素<span class="token keyword">def</span> toList<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回 List，包含了 Map 的所有元素<span class="token keyword">def</span> toSeq<span class="token operator">:</span> Seq<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回 Seq，包含了 Map 的所有元素<span class="token keyword">def</span> toSet<span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回 Set，包含了 Map 的所有元素<span class="token keyword">def</span> toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span>返回字符串对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set方法</title>
      <link href="/2019/02/16/Set%E6%96%B9%E6%B3%95/"/>
      <url>/2019/02/16/Set%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-scala"><code class="language-scala">Scala Set 常用方法下表列出了 Scala Set 常用的方法：序号    方法及描述<span class="token keyword">def</span> <span class="token operator">+</span><span class="token punctuation">(</span>elem<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>为集合添加新元素，x并创建一个新的集合，除非元素已存在<span class="token keyword">def</span> <span class="token operator">-</span><span class="token punctuation">(</span>elem<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>移除集合中的元素，并创建一个新的集合<span class="token keyword">def</span> contains<span class="token punctuation">(</span>elem<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>如果元素在集合中存在，返回 <span class="token boolean">true</span>，否则返回 <span class="token boolean">false</span>。<span class="token keyword">def</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>that<span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回两个集合的交集<span class="token keyword">def</span> <span class="token operator">&amp;</span><span class="token operator">~</span><span class="token punctuation">(</span>that<span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回两个集合的差集<span class="token keyword">def</span> <span class="token operator">+</span><span class="token punctuation">(</span>elem1<span class="token operator">:</span> A<span class="token punctuation">,</span> elem2<span class="token operator">:</span> A<span class="token punctuation">,</span> elems<span class="token operator">:</span> A<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>通过添加传入指定集合的元素创建一个新的不可变集合<span class="token keyword">def</span> <span class="token operator">++</span><span class="token punctuation">(</span>elems<span class="token operator">:</span> A<span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>合并两个集合<span class="token keyword">def</span> <span class="token operator">-</span><span class="token punctuation">(</span>elem1<span class="token operator">:</span> A<span class="token punctuation">,</span> elem2<span class="token operator">:</span> A<span class="token punctuation">,</span> elems<span class="token operator">:</span> A<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>通过移除传入指定集合的元素创建一个新的不可变集合<span class="token keyword">def</span> addString<span class="token punctuation">(</span>b<span class="token operator">:</span> StringBuilder<span class="token punctuation">)</span><span class="token operator">:</span> StringBuilder将不可变集合的所有元素添加到字符串缓冲区<span class="token keyword">def</span> addString<span class="token punctuation">(</span>b<span class="token operator">:</span> StringBuilder<span class="token punctuation">,</span> sep<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> StringBuilder将不可变集合的所有元素添加到字符串缓冲区，并使用指定的分隔符<span class="token keyword">def</span> apply<span class="token punctuation">(</span>elem<span class="token operator">:</span> A<span class="token punctuation">)</span>检测集合中是否包含指定元素<span class="token keyword">def</span> count<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span>计算满足指定条件的集合元素个数<span class="token keyword">def</span> copyToArray<span class="token punctuation">(</span>xs<span class="token operator">:</span> Array<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> start<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> len<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span>复制不可变集合元素到数组<span class="token keyword">def</span> diff<span class="token punctuation">(</span>that<span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>比较两个集合的差集<span class="token keyword">def</span> drop<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">]</span>返回丢弃前n个元素新集合<span class="token keyword">def</span> dropRight<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回丢弃最后n个元素新集合<span class="token keyword">def</span> dropWhile<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>从左向右丢弃元素，直到条件p不成立<span class="token keyword">def</span> equals<span class="token punctuation">(</span>that<span class="token operator">:</span> <span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>equals 方法可用于任意序列。用于比较系列是否相等。<span class="token keyword">def</span> exists<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>判断不可变集合中指定条件的元素是否存在。<span class="token keyword">def</span> filter<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>输出符合指定条件的所有不可变集合元素。<span class="token keyword">def</span> find<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span>A<span class="token punctuation">]</span>查找不可变集合中满足指定条件的第一个元素<span class="token keyword">def</span> forall<span class="token punctuation">(</span>p<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>查找不可变集合中满足指定条件的所有元素<span class="token keyword">def</span> foreach<span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Unit</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span>将函数应用到不可变集合的所有元素<span class="token keyword">def</span> head<span class="token operator">:</span> A获取不可变集合的第一个元素<span class="token keyword">def</span> init<span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回所有元素，除了最后一个<span class="token keyword">def</span> intersect<span class="token punctuation">(</span>that<span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>计算两个集合的交集<span class="token keyword">def</span> isEmpty<span class="token operator">:</span> <span class="token builtin">Boolean</span>判断集合是否为空<span class="token keyword">def</span> iterator<span class="token operator">:</span> Iterator<span class="token punctuation">[</span>A<span class="token punctuation">]</span>创建一个新的迭代器来迭代元素<span class="token keyword">def</span> last<span class="token operator">:</span> A返回最后一个元素<span class="token keyword">def</span> map<span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token keyword">=></span> B<span class="token punctuation">)</span><span class="token operator">:</span> immutable<span class="token punctuation">.</span>Set<span class="token punctuation">[</span>B<span class="token punctuation">]</span>通过给定的方法将所有元素重新计算<span class="token keyword">def</span> max<span class="token operator">:</span> A查找最大元素<span class="token keyword">def</span> min<span class="token operator">:</span> A查找最小元素<span class="token keyword">def</span> mkString<span class="token operator">:</span> <span class="token builtin">String</span>集合所有元素作为字符串显示<span class="token keyword">def</span> mkString<span class="token punctuation">(</span>sep<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span>使用分隔符将集合所有元素作为字符串显示<span class="token keyword">def</span> product<span class="token operator">:</span> A返回不可变集合中数字元素的积。<span class="token keyword">def</span> size<span class="token operator">:</span> <span class="token builtin">Int</span>返回不可变集合元素的数量<span class="token keyword">def</span> splitAt<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span>Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">,</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span>把不可变集合拆分为两个容器，第一个由前 n 个元素组成，第二个由剩下的元素组成<span class="token keyword">def</span> subsetOf<span class="token punctuation">(</span>that<span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Boolean</span>如果集合A中含有子集B返回 <span class="token boolean">true</span>，否则返回<span class="token boolean">false</span><span class="token keyword">def</span> sum<span class="token operator">:</span> A返回不可变集合中所有数字元素之和<span class="token keyword">def</span> tail<span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回一个不可变集合中除了第一元素之外的其他元素<span class="token keyword">def</span> take<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回前 n 个元素<span class="token keyword">def</span> takeRight<span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span>Set<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回后 n 个元素<span class="token keyword">def</span> toArray<span class="token operator">:</span> Array<span class="token punctuation">[</span>A<span class="token punctuation">]</span>将集合转换为数组<span class="token keyword">def</span> toBuffer<span class="token punctuation">[</span>B <span class="token operator">></span><span class="token operator">:</span> A<span class="token punctuation">]</span><span class="token operator">:</span> Buffer<span class="token punctuation">[</span>B<span class="token punctuation">]</span>返回缓冲区，包含了不可变集合的所有元素<span class="token keyword">def</span> toList<span class="token operator">:</span> List<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回 List，包含了不可变集合的所有元素<span class="token keyword">def</span> toMap<span class="token punctuation">[</span>T<span class="token punctuation">,</span> U<span class="token punctuation">]</span><span class="token operator">:</span> Map<span class="token punctuation">[</span>T<span class="token punctuation">,</span> U<span class="token punctuation">]</span>返回 Map，包含了不可变集合的所有元素<span class="token keyword">def</span> toSeq<span class="token operator">:</span> Seq<span class="token punctuation">[</span>A<span class="token punctuation">]</span>返回 Seq，包含了不可变集合的所有元素<span class="token keyword">def</span> toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span>返回一个字符串，以对象来表示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String 方法</title>
      <link href="/2019/02/16/String%E6%96%B9%E6%B3%95/"/>
      <url>/2019/02/16/String%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-scala"><code class="language-scala"><span class="token builtin">String</span> 方法char charAt<span class="token punctuation">(</span>int index<span class="token punctuation">)</span>返回指定位置的字符  从<span class="token number">0</span>开始int compareTo<span class="token punctuation">(</span>Object o<span class="token punctuation">)</span>比较字符串与对象int compareTo<span class="token punctuation">(</span><span class="token builtin">String</span> anotherString<span class="token punctuation">)</span>按字典顺序比较两个字符串int compareToIgnoreCase<span class="token punctuation">(</span><span class="token builtin">String</span> str<span class="token punctuation">)</span>按字典顺序比较两个字符串，不考虑大小写<span class="token builtin">String</span> concat<span class="token punctuation">(</span><span class="token builtin">String</span> str<span class="token punctuation">)</span>将指定字符串连接到此字符串的结尾boolean contentEquals<span class="token punctuation">(</span>StringBuffer sb<span class="token punctuation">)</span>将此字符串与指定的 StringBuffer 比较。static <span class="token builtin">String</span> copyValueOf<span class="token punctuation">(</span>char<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span>返回指定数组中表示该字符序列的 <span class="token builtin">String</span>static <span class="token builtin">String</span> copyValueOf<span class="token punctuation">(</span>char<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> int offset<span class="token punctuation">,</span> int count<span class="token punctuation">)</span>返回指定数组中表示该字符序列的 <span class="token builtin">String</span>boolean endsWith<span class="token punctuation">(</span><span class="token builtin">String</span> suffix<span class="token punctuation">)</span>测试此字符串是否以指定的后缀结束boolean equals<span class="token punctuation">(</span>Object anObject<span class="token punctuation">)</span>将此字符串与指定的对象比较boolean equalsIgnoreCase<span class="token punctuation">(</span><span class="token builtin">String</span> anotherString<span class="token punctuation">)</span>将此 <span class="token builtin">String</span> 与另一个 <span class="token builtin">String</span> 比较，不考虑大小写byte getBytes<span class="token punctuation">(</span><span class="token punctuation">)</span>使用平台的默认字符集将此 <span class="token builtin">String</span> 编码为 byte 序列，并将结果存储到一个新的 byte 数组中byte<span class="token punctuation">[</span><span class="token punctuation">]</span> getBytes<span class="token punctuation">(</span><span class="token builtin">String</span> charsetName使用指定的字符集将此 <span class="token builtin">String</span> 编码为 byte 序列，并将结果存储到一个新的 byte 数组中void getChars<span class="token punctuation">(</span>int srcBegin<span class="token punctuation">,</span> int srcEnd<span class="token punctuation">,</span> char<span class="token punctuation">[</span><span class="token punctuation">]</span> dst<span class="token punctuation">,</span> int dstBegin<span class="token punctuation">)</span>将字符从此字符串复制到目标字符数组int hashCode<span class="token punctuation">(</span><span class="token punctuation">)</span>返回此字符串的哈希码<span class="token number">16</span>    int indexOf<span class="token punctuation">(</span>int ch<span class="token punctuation">)</span>返回指定字符在此字符串中第一次出现处的索引（输入的是ascii码值）int indexOf<span class="token punctuation">(</span>int ch<span class="token punctuation">,</span> int fromIndex<span class="token punctuation">)</span>返返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索int indexOf<span class="token punctuation">(</span><span class="token builtin">String</span> str<span class="token punctuation">)</span>返回指定子字符串在此字符串中第一次出现处的索引int indexOf<span class="token punctuation">(</span><span class="token builtin">String</span> str<span class="token punctuation">,</span> int fromIndex<span class="token punctuation">)</span>返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始<span class="token builtin">String</span> intern<span class="token punctuation">(</span><span class="token punctuation">)</span>返回字符串对象的规范化表示形式int lastIndexOf<span class="token punctuation">(</span>int ch<span class="token punctuation">)</span>返回指定字符在此字符串中最后一次出现处的索引int lastIndexOf<span class="token punctuation">(</span>int ch<span class="token punctuation">,</span> int fromIndex<span class="token punctuation">)</span>返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索int lastIndexOf<span class="token punctuation">(</span><span class="token builtin">String</span> str<span class="token punctuation">)</span>返回指定子字符串在此字符串中最右边出现处的索引int lastIndexOf<span class="token punctuation">(</span><span class="token builtin">String</span> str<span class="token punctuation">,</span> int fromIndex<span class="token punctuation">)</span>返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索int length<span class="token punctuation">(</span><span class="token punctuation">)</span>返回此字符串的长度boolean matches<span class="token punctuation">(</span><span class="token builtin">String</span> regex<span class="token punctuation">)</span>告知此字符串是否匹配给定的正则表达式boolean regionMatches<span class="token punctuation">(</span>boolean ignoreCase<span class="token punctuation">,</span> int toffset<span class="token punctuation">,</span> <span class="token builtin">String</span> other<span class="token punctuation">,</span> int ooffset<span class="token punctuation">,</span> int len<span class="token punctuation">)</span>测试两个字符串区域是否相等<span class="token number">28</span>    boolean regionMatches<span class="token punctuation">(</span>int toffset<span class="token punctuation">,</span> <span class="token builtin">String</span> other<span class="token punctuation">,</span> int ooffset<span class="token punctuation">,</span> int len<span class="token punctuation">)</span>测试两个字符串区域是否相等<span class="token builtin">String</span> replace<span class="token punctuation">(</span>char oldChar<span class="token punctuation">,</span> char newChar<span class="token punctuation">)</span>返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的<span class="token builtin">String</span> replaceAll<span class="token punctuation">(</span><span class="token builtin">String</span> regex<span class="token punctuation">,</span> <span class="token builtin">String</span> replacement使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串<span class="token builtin">String</span> replaceFirst<span class="token punctuation">(</span><span class="token builtin">String</span> regex<span class="token punctuation">,</span> <span class="token builtin">String</span> replacement<span class="token punctuation">)</span>使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串<span class="token builtin">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split<span class="token punctuation">(</span><span class="token builtin">String</span> regex<span class="token punctuation">)</span>根据给定正则表达式的匹配拆分此字符串<span class="token builtin">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split<span class="token punctuation">(</span><span class="token builtin">String</span> regex<span class="token punctuation">,</span> int limit<span class="token punctuation">)</span>根据匹配给定的正则表达式来拆分此字符串boolean startsWith<span class="token punctuation">(</span><span class="token builtin">String</span> prefix<span class="token punctuation">)</span>测试此字符串是否以指定的前缀开始boolean startsWith<span class="token punctuation">(</span><span class="token builtin">String</span> prefix<span class="token punctuation">,</span> int toffset<span class="token punctuation">)</span>测试此字符串从指定索引开始的子字符串是否以指定前缀开始。CharSequence subSequence<span class="token punctuation">(</span>int beginIndex<span class="token punctuation">,</span> int endIndex<span class="token punctuation">)</span>返回一个新的字符序列，它是此序列的一个子序列<span class="token builtin">String</span> substring<span class="token punctuation">(</span>int beginIndex<span class="token punctuation">)</span>返回一个新的字符串，它是此字符串的一个子字符串<span class="token builtin">String</span> substring<span class="token punctuation">(</span>int beginIndex<span class="token punctuation">,</span> int endIndex<span class="token punctuation">)</span>返回一个新字符串，它是此字符串的一个子字符串char<span class="token punctuation">[</span><span class="token punctuation">]</span> toCharArray<span class="token punctuation">(</span><span class="token punctuation">)</span>将此字符串转换为一个新的字符数组<span class="token builtin">String</span> toLowerCase<span class="token punctuation">(</span><span class="token punctuation">)</span>使用默认语言环境的规则将此 <span class="token builtin">String</span> 中的所有字符都转换为小写<span class="token builtin">String</span> toLowerCase<span class="token punctuation">(</span>Locale locale<span class="token punctuation">)</span>使用给定 Locale 的规则将此 <span class="token builtin">String</span> 中的所有字符都转换为小写<span class="token builtin">String</span> toString<span class="token punctuation">(</span><span class="token punctuation">)</span>返回此对象本身（它已经是一个字符串！）<span class="token builtin">String</span> toUpperCase<span class="token punctuation">(</span><span class="token punctuation">)</span>使用默认语言环境的规则将此 <span class="token builtin">String</span> 中的所有字符都转换为大写<span class="token builtin">String</span> toUpperCase<span class="token punctuation">(</span>Locale locale<span class="token punctuation">)</span>使用给定 Locale 的规则将此 <span class="token builtin">String</span> 中的所有字符都转换为大写<span class="token builtin">String</span> trim<span class="token punctuation">(</span><span class="token punctuation">)</span>删除指定字符串的首尾空白符static <span class="token builtin">String</span> valueOf<span class="token punctuation">(</span>primitive data <span class="token keyword">type</span> x<span class="token punctuation">)</span>返回指定类型参数的字符串表示形式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组方法</title>
      <link href="/2019/02/16/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
      <url>/2019/02/16/%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-scala"><code class="language-scala">方法和描述<span class="token keyword">def</span> apply<span class="token punctuation">(</span> x<span class="token operator">:</span> T<span class="token punctuation">,</span> xs<span class="token operator">:</span> T<span class="token operator">*</span> <span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span>创建指定对象 T 的数组<span class="token punctuation">,</span> T 的值可以是 <span class="token builtin">Unit</span><span class="token punctuation">,</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token builtin">Float</span><span class="token punctuation">,</span> <span class="token builtin">Long</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Char</span><span class="token punctuation">,</span> <span class="token builtin">Short</span><span class="token punctuation">,</span> <span class="token builtin">Byte</span><span class="token punctuation">,</span> <span class="token builtin">Boolean</span>。<span class="token keyword">def</span> concat<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span> xss<span class="token operator">:</span> Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span>合并数组<span class="token keyword">def</span> copy<span class="token punctuation">(</span> src<span class="token operator">:</span> <span class="token builtin">AnyRef</span><span class="token punctuation">,</span> srcPos<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> dest<span class="token operator">:</span> <span class="token builtin">AnyRef</span><span class="token punctuation">,</span> destPos<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span>复制一个数组到另一个数组上。相等于 Java<span class="token symbol">'s</span> System<span class="token punctuation">.</span>arraycopy<span class="token punctuation">(</span>src<span class="token punctuation">,</span> srcPos<span class="token punctuation">,</span> dest<span class="token punctuation">,</span> destPos<span class="token punctuation">,</span> length<span class="token punctuation">)</span>。<span class="token keyword">def</span> empty<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span>返回长度为 <span class="token number">0</span> 的数组<span class="token keyword">def</span> iterate<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span> start<span class="token operator">:</span> T<span class="token punctuation">,</span> len<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> f<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token keyword">=></span> T <span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span>返回指定长度数组，每个数组元素为指定函数的返回值。以上实例数组初始值为 <span class="token number">0</span>，长度为 <span class="token number">3</span>，计算函数为a<span class="token keyword">=></span>a<span class="token operator">+</span><span class="token number">1</span>：scala<span class="token operator">></span> Array<span class="token punctuation">.</span>iterate<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token keyword">=></span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>res1<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">def</span> fill<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span> n<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span>elem<span class="token operator">:</span> <span class="token keyword">=></span> T<span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span>返回数组，长度为第一个参数指定，同时每个元素使用第二个参数进行填充。<span class="token keyword">def</span> fill<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span> n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> elem<span class="token operator">:</span> <span class="token keyword">=></span> T <span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">]</span>返回二数组，长度为第一个参数指定，同时每个元素使用第二个参数进行填充。<span class="token keyword">def</span> ofDim<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span> n1<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span>创建指定长度的数组<span class="token keyword">def</span> ofDim<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span> n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">]</span>创建二维数组<span class="token keyword">def</span> ofDim<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span> n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n3<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>Array<span class="token punctuation">[</span>Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>创建三维数组<span class="token keyword">def</span> range<span class="token punctuation">(</span> start<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> step<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span>创建指定区间内的数组，step 为每个元素间的步长<span class="token keyword">def</span> range<span class="token punctuation">(</span> start<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> end<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span>创建指定区间内的数组<span class="token keyword">def</span> tabulate<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span> n<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span>f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token keyword">=></span> T<span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span>返回指定长度数组，每个数组元素为指定函数的返回值，默认从 <span class="token number">0</span> 开始。以上实例返回 <span class="token number">3</span> 个元素：scala<span class="token operator">></span> Array<span class="token punctuation">.</span>tabulate<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a <span class="token keyword">=></span> a <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span>res0<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">def</span> tabulate<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">(</span> n1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> n2<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span> <span class="token keyword">=></span> T<span class="token punctuation">)</span><span class="token operator">:</span> Array<span class="token punctuation">[</span>Array<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">]</span>返回指定长度的二维数组，每个数组元素为指定函数的返回值，默认从 <span class="token number">0</span> 开始。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试问题总结</title>
      <link href="/2019/02/16/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2019/02/16/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<pre><code>悲观锁 + 乐观锁悲观锁（Pessimistic Lock）每次获取数据的时候，都会担心数据被修改，所以每次操作数据前都会进行加锁（读锁、写锁、行锁等），确保在自己在使用数据过程中，数据戹被其他进程修改，使用完成后再对数据进行解锁。由于数据被上了所，期间对数据进行读写的其他进程都需等待。在Java中，synchronized的思想也是悲观锁。乐观锁（Optimistic Lock）每次获取数据的时候，都不会担心数据被修改，所以每次获取数据的时候都不会进行加锁，但在更新数据的时候需要判断数据是否被别人修改。如果数据被其他线程更改，就不进行数据更新。如果数据没有被其他线程更改，就进行数据更新。因为数据没有进行加锁，期间数据可以被进行读写操作。一般会使用版本机制或CAS操作实现。 version方式：一般是在数据表中加上一个数据版本号version字段，表示数据被修改的次数，当数据被修改时，version值会加一。当线程A要更新数据值时，在读取数据的同时也会读取version值，在提交更新时，若刚才读取到的version值与当前数据库中的version值相等，才更新，否则重试更新操作，直到更新成功SQL：update table set x=x+1, version=version+1 where id=#&amp;#123;id&amp;#125; and version=#&amp;#123;version&amp;#125;;   CAS操作方式： 即compare and swap 或者 compare and set，涉及到三个操作数，数据所在的内存值，预期值，新值。当需要更新时，判断当前内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试，一般情况下是一个自旋操作，即不断的重试。适用场景：悲观锁：适合写操作频繁的场景。如果用于读操作频繁的场景，每次读取都进行加锁，会增加大量锁的开销，降低系统吞吐率。乐观锁：适合读操作频繁的场景如果用于写操作频繁的场景，数据发生冲突的可能性就会增加，为例保证数据的一致性，应用层需要不断的重新获取数据，这样就带来了大量的查询操作，降低系统的吞吐率。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala学习</title>
      <link href="/2019/02/15/Scala%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/02/15/Scala%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Scala官网6个特征。"><a href="#一、Scala官网6个特征。" class="headerlink" title="一、Scala官网6个特征。"></a>一、Scala官网6个特征。</h1><h2 id="简捷，快速"><a href="#简捷，快速" class="headerlink" title="简捷，快速"></a>简捷，快速</h2><h2 id="1、Java"><a href="#1、Java" class="headerlink" title="1、Java"></a>1、Java</h2><ul><li>与Java无缝整合，运行在JVM上，编译形成.class文件</li></ul><h2 id="2、类型"><a href="#2、类型" class="headerlink" title="2、类型"></a>2、类型</h2><ul><li>类型自动推断:var 变量类型   val 常量类型<br> （var  s = 1 自动推断s 为int类型 ）<br>  dos窗口运行Scala语言（cmd  - &gt;scala）  </li></ul><h2 id="3、并发"><a href="#3、并发" class="headerlink" title="3、并发"></a>3、并发</h2><ul><li>底层有actor，天生用于高并发和分布式</li></ul><h2 id="4、继承"><a href="#4、继承" class="headerlink" title="4、继承"></a>4、继承</h2><ul><li>trait 特征特质（Java中接口和抽象类的结合体？？？两者区别？？单继承多实现）<br>​    静态语言  （Java静态语言  shell 、Python动态语言）</li></ul><h2 id="5、匹配"><a href="#5、匹配" class="headerlink" title="5、匹配"></a>5、匹配</h2><ul><li>模式匹配:(Java中的switch case类型必须一致)可匹配多种类型</li></ul><h2 id="6、高阶"><a href="#6、高阶" class="headerlink" title="6、高阶"></a>6、高阶</h2><ul><li>高阶函数（函数式编程）函数可以作为参数传入方法中（Jdk 8 stream流，莱姆塔表达式）</li></ul><p>​       工具类中方法为静态的</p><h1 id="二、Scala安装"><a href="#二、Scala安装" class="headerlink" title="二、Scala安装"></a>二、Scala安装</h1><h2 id="1、windows安装-配置环境变量"><a href="#1、windows安装-配置环境变量" class="headerlink" title="1、windows安装,配置环境变量"></a>1、windows安装,配置环境变量</h2><p>Ø  官网下载scala2.10：（因为spark需要的是这个版本的Scala）</p><p><a href="http://www.scala-lang.org/download/2.10.4.html">http://www.scala-lang.org/download/2.10.4.html</a> </p><p>Ø  下载好后安装。双击msi包安装,记住安装的路径。</p><p>Ø  配置环境变量（和配置jdk一样）</p><ul><li><p>新建SCALA_HOME</p></li><li><p>编辑Path变量，在后面追加如下：</p><pre><code>;%SCALA_HOME%\bin</code></pre></li></ul><p>Ø  打开cmd,输入：</p><pre><code>scala  - version </code></pre><p>看是否显示版本号，确定是否安装成功</p><p><img src="images/Scala.jpg"></p><h2 id="2、eclipse-配置scala插件"><a href="#2、eclipse-配置scala插件" class="headerlink" title="2、eclipse 配置scala插件"></a>2、eclipse 配置scala插件</h2><p>Ø  下载插件（一定要对应eclipse版本下载）,并解压</p><p><a href="http://scala-ide.org/download/prev-stable.html">http://scala-ide.org/download/prev-stable.html</a></p><p><img src="images/eclipse.jpg"></p><p>Ø  将解压目录下的features和plugins两个文件夹拷贝到eclipse安装目录中的”dropins/scala”目录下。</p><p>进入dropins，新建scala文件夹，将两个文件夹拷贝到“dropins/scala”下</p><h2 id="3、Scala编辑器：scala-ide"><a href="#3、Scala编辑器：scala-ide" class="headerlink" title="3、Scala编辑器：scala ide"></a>3、Scala编辑器：scala ide</h2><p>下载网址：<a href="http://scala-ide.org/download/sdk.html">http://scala-ide.org/download/sdk.html</a> </p><h2 id="4、Idea-中配置scala插件"><a href="#4、Idea-中配置scala插件" class="headerlink" title="4、Idea 中配置scala插件"></a>4、Idea 中配置scala插件</h2><p>Ø  打开idea,close项目后，点击Configure-&gt;Plugins</p><p>Ø  搜索scala，点击Install安装</p><p>Ø  设置jdk，打开Project Structure,点击new 选择安装好的jdk路径</p><p>Ø 新建Scala项目</p><p><img src="images/s1.jpg"></p><p><img src="images/s2.jpg"></p><h1 id="三、Scala基础语法"><a href="#三、Scala基础语法" class="headerlink" title="三、Scala基础语法"></a>三、Scala基础语法</h1><h2 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h2><p><img src="images/s4.jpg"></p><p><img src="images/s5.jpg"></p><h2 id="2、变量和常量的声明"><a href="#2、变量和常量的声明" class="headerlink" title="2、变量和常量的声明"></a><strong>2</strong>、<strong>变量和常量的声明</strong></h2><pre class="line-numbers language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">/**     * 定义变量和常量     * 变量 :用 var 定义 ，可修改      * 常量 :用 val 定义，不可修改     */</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"zhangsan"</span>    println<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    name <span class="token operator">=</span><span class="token string">"lisi"</span>    println<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token keyword">val</span> gender <span class="token operator">=</span> <span class="token string">"m"</span><span class="token comment" spellcheck="true">//    gender = "m"//错误，不能给常量再赋值</span><span class="token comment" spellcheck="true">// 定义变量或者常量的时候，也可以写上返回的类型，一般省略，如：val a:Int = 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、类和对象"><a href="#3、类和对象" class="headerlink" title="3、类和对象"></a><strong>3、</strong>类和对象</h2><p>Ø  创建类</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> Person<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">"zhangsan"</span>  <span class="token keyword">val</span> age <span class="token operator">=</span> <span class="token number">18</span>  <span class="token keyword">def</span> sayName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"my name is "</span><span class="token operator">+</span> name  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ø  创建对象</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Lesson_Class <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token keyword">new</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>person<span class="token punctuation">.</span>sayName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ø  伴生类和伴生对象</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> Person<span class="token punctuation">(</span>xname <span class="token operator">:</span><span class="token builtin">String</span> <span class="token punctuation">,</span> xage <span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> Person<span class="token punctuation">.</span>name  <span class="token keyword">val</span> age <span class="token operator">=</span> xage  <span class="token keyword">var</span> gender <span class="token operator">=</span> <span class="token string">"m"</span>  <span class="token keyword">def</span> <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>g<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>    gender <span class="token operator">=</span> g  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> sayName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token string">"my name is "</span><span class="token operator">+</span> name  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> Person <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string">"zhangsanfeng"</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token keyword">new</span> Person<span class="token punctuation">(</span><span class="token string">"wagnwu"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"f"</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>person<span class="token punctuation">.</span>sayName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>person<span class="token punctuation">.</span>gender<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意</code></p><blockquote><ul><li><p>建议类名首字母大写 ，方法首字母小写，类和方法命名建议符合驼峰命名法。</p></li><li><p>.一行结束，不需要分号。如果一行里有多个语句，则之间用分号隔开。</p></li><li><p>scala 中的object是单例对象，相当于java中的工具类，它里面的方法可以看成都是static静态的。object不可以传参数。另：Trait不可以传参数</p></li><li><p>scala中的class类默认可以传参数，默认的传参数就是默认的构造函数。</p><p>重写构造函数的时候，必须要先调用默认的构造函数。</p></li><li><p>class 类属性自带getter ，setter方法。</p></li><li><p>使用object时，不用new，使用class时要new ,并且new的时候，class中除了方法不执行，其他都执行。</p></li><li><p>如果在同一个文件中，object对象和class类的名称相同，则这个对象就是这个类的伴生对象，class称为object对象的伴生类，object 称为class类的伴生对象，他们可以直接访问对方的私有变量。</p></li></ul></blockquote><h2 id="3-if-else"><a href="#3-if-else" class="headerlink" title="3.  if else"></a><strong>3.</strong>  <strong>if else</strong></h2><pre class="line-numbers language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">/**     * if else      */</span>    <span class="token keyword">val</span> age <span class="token operator">=</span><span class="token number">18</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token string">"no allow"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">18</span><span class="token operator">&lt;=</span>age<span class="token operator">&amp;&amp;</span>age<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token string">"allow with other"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token string">"allow self"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-for-while-do…while"><a href="#4-for-while-do…while" class="headerlink" title="4.   for ,while,do…while"></a><strong>4.</strong>   for ,while,do…while</h2><ul><li>to和until 的用法（不带步长，带步长区别）</li></ul><pre class="line-numbers language-scala"><code class="language-scala">  <span class="token comment" spellcheck="true">/**          * to和until          * 例：          * 1 to 10 返回1到10的Range数组，包含10          * 1 until 10 返回1到10 Range数组 ，不包含10          */</span>              println<span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">10</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//打印： Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)      </span>println<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//同上</span>println<span class="token punctuation">(</span><span class="token number">1</span> to <span class="token punctuation">(</span><span class="token number">10</span> <span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//步长为2，从1开始打印： Range(1, 3, 5, 7, 9)      </span>println<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//同上</span>println<span class="token punctuation">(</span><span class="token number">1</span> until <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不包含最后一个数，打印1,2,3,4,5,6,7,8,9     </span>println<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//同上          </span>println<span class="token punctuation">(</span><span class="token number">1</span> until <span class="token punctuation">(</span><span class="token number">10</span> <span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//步长为2，从1开始打印，打印1,4,7       </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建for循环</li></ul><pre class="line-numbers language-scala"><code class="language-scala">   <span class="token comment" spellcheck="true">/**     * for 循环     *      */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">10</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建多层for循环</li></ul><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//可以分号隔开，写入多个list赋值的变量，构成多层for循环</span>    <span class="token comment" spellcheck="true">//scala中 不能写count++ count-- 只能写count+</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">10</span><span class="token punctuation">;</span> j <span class="token keyword">&lt;-</span> <span class="token number">1</span> until <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span> i <span class="token operator">+</span><span class="token string">",    j="</span><span class="token operator">+</span>j<span class="token punctuation">)</span>      count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//例子： 打印小九九</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> until <span class="token number">10</span> <span class="token punctuation">;</span>j <span class="token keyword">&lt;-</span> <span class="token number">1</span> until <span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>j<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          print<span class="token punctuation">(</span>i <span class="token operator">+</span><span class="token string">" * "</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">" = "</span><span class="token operator">+</span> i<span class="token operator">*</span>j<span class="token operator">+</span><span class="token string">"    "</span><span class="token punctuation">)</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//九九乘法表</span>     <span class="token comment" spellcheck="true">//方法一</span><span class="token comment" spellcheck="true">//      for(i&lt;- 1 to 9 )&amp;#123;</span><span class="token comment" spellcheck="true">//        for (j &lt;- 1 to i)&amp;#123;</span><span class="token comment" spellcheck="true">//          print(j+"*"+i+"="+i*j+"\t")</span><span class="token comment" spellcheck="true">//        &amp;#125;</span><span class="token comment" spellcheck="true">//        println()</span><span class="token comment" spellcheck="true">//      &amp;#125;</span>    <span class="token comment" spellcheck="true">//方法二</span><span class="token comment" spellcheck="true">//    for(i&lt;- 1 to 9 )&amp;#123;</span><span class="token comment" spellcheck="true">//      for (j&lt;- 1 to 9)&amp;#123;</span><span class="token comment" spellcheck="true">//        if(j&lt;=i)&amp;#123;</span><span class="token comment" spellcheck="true">//          print(j+"*"+i+"="+i*j+"\t")</span><span class="token comment" spellcheck="true">//        &amp;#125;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        if(i==j)println()</span><span class="token comment" spellcheck="true">//      &amp;#125;</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>for循环中可以加条件判断，分号隔开</li></ul><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token comment" spellcheck="true">//可以在for循环中加入条件判断</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">10</span> <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>scala中不能使用count++，count只能使用count = count+1 ，count += 1</p></li><li><p>while循环，while（）{}，do {}while()</p></li></ul><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token comment" spellcheck="true">//将for中的符合条件的元素通过yield关键字返回成一个集合</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">10</span>  <span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> i <span class="token comment" spellcheck="true">//&lt;-  后面是一个集合</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> w <span class="token keyword">&lt;-</span> list <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**     * while 循环     */</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">"次while 循环"</span><span class="token punctuation">)</span>      index <span class="token operator">+=</span> <span class="token number">1</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> index <span class="token operator">=</span> <span class="token number">0</span>     <span class="token keyword">do</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        index <span class="token operator">+=</span><span class="token number">1</span>         println<span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span>index<span class="token operator">+</span><span class="token string">"次do while 循环"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、Scala函数"><a href="#四、Scala函数" class="headerlink" title="四、Scala函数"></a>四、Scala函数</h1><h2 id="1、函数定义"><a href="#1、函数定义" class="headerlink" title="1、函数定义"></a>1、函数定义</h2><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> fun <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   println<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> fun1 <span class="token punctuation">(</span>a <span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token punctuation">,</span> b <span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">=</span> a<span class="token operator">+</span>b    println<span class="token punctuation">(</span>fun1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>语法解释</code></p><blockquote><ul><li>函数定义语法 用def来定义</li><li>可以定义传入的参数，要指定传入参数的类型</li><li>scala中函数中如果返回返回值类型为Unit ，即无返回值</li></ul><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">def</span> add<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        x<span class="token operator">+</span>y    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写返回值类型是=时，一定要记得写 ：（冒号）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>scala中函数有返回值时，可以写return，也可以不写return：</p></li><li><ul><li>省略return的时候，函数自动回将最后一行的表达式的值，作为返回值</li></ul></li></ul><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token keyword">def</span> max<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token builtin">Int</span> <span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span>          x      <span class="token keyword">else</span>         y    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> println<span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>结果显示：<span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>* * 如果函数有retrun,则必须写返回类型。</code></pre><pre class="line-numbers language-scala"><code class="language-scala">  <span class="token keyword">def</span> min<span class="token punctuation">(</span>m<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>n<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">></span>n<span class="token punctuation">)</span>        <span class="token keyword">return</span> n      <span class="token keyword">else</span>        <span class="token keyword">return</span> m    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>min<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>* scala中函数有返回值时，可以写返回值的类型，也可以省略，因为scala可以类型自动推断，有时候不能省略，必须写，* * 比如在递归函数中或者函数的返回值是函数类型的时候。</code></pre><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token keyword">def</span> num<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token number">1</span>            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                x <span class="token operator">*</span> num<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>* 函数定义的时候，如果去掉 = ，那么这个方法返回类型必定是Unit的。     这种说法无论方法体里面什么逻辑都成立，scala可以把任意类型转换为Unit。     假设，里面的逻辑最后返回了一个string，那么这个返回值会被转换成Unit，并且值会被丢弃。     则相当于，函数就将返回值去掉，即无返回值。* &#123;&#125;里的代码，如果只有一行，则可以省略&#123;&#125;*  传递给方法的参数可以在方法中使用，并且scala规定方法的传过来的参数为val类型，不能修改，不是var。</code></pre></blockquote><h2 id="2、递归函数"><a href="#2、递归函数" class="headerlink" title="2、递归函数"></a>2、递归函数</h2><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token comment" spellcheck="true">/**     * 递归函数      * 5的阶乘     */</span>    <span class="token keyword">def</span> fun2<span class="token punctuation">(</span>num <span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        num      <span class="token keyword">else</span>         num <span class="token operator">*</span> fun2<span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    print<span class="token punctuation">(</span>fun2<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、包含参数默认值的函数"><a href="#3、包含参数默认值的函数" class="headerlink" title="3、包含参数默认值的函数"></a>3、<strong>包含参数默认值的函数</strong></h2><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token comment" spellcheck="true">/**     * 包含默认参数值的函数     * 注意：     * 1.默认值的函数中，如果传入的参数个数与函数定义相同，则传入的数值会覆盖默认值     * 2.如果不想覆盖默认值，传入的参数个数小于定义的函数的参数，则需要指定参数名称     */</span>    <span class="token keyword">def</span> fun3<span class="token punctuation">(</span>a <span class="token operator">:</span><span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fun3<span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、可变参数个数的函数"><a href="#4、可变参数个数的函数" class="headerlink" title="4、可变参数个数的函数"></a><strong>4</strong>、可变参数个数的函数</h2><pre class="line-numbers language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">/**     * 可变参数个数的函数     * 注意：多个参数逗号分开     */</span>    <span class="token keyword">def</span> fun4<span class="token punctuation">(</span>elem <span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>e <span class="token keyword">&lt;-</span> elem<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> e      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      sum    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>fun4<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、匿名函数"><a href="#5、匿名函数" class="headerlink" title="5、匿名函数"></a><strong>5、</strong>匿名函数</h2><ul><li><p>有参匿名函数</p></li><li><p>无参匿名函数</p></li><li><p>有返回值的匿名函数</p></li></ul><blockquote><p>可以将匿名函数返回给val定义的值</p><p>匿名函数不能显式声明函数的返回类型</p></blockquote><pre class="line-numbers language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">//有参数匿名函数</span>    <span class="token keyword">val</span> fun1 <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">:</span> <span class="token builtin">Int</span> ， b <span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    value1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//无参数匿名函数</span>    <span class="token keyword">val</span> fun2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span><span class="token string">"啦啦啦"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    fun2<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//有返回值的匿名函数</span>    <span class="token keyword">val</span> fun3 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      a<span class="token operator">+</span>b    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>fun3<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、-嵌套函数"><a href="#6、-嵌套函数" class="headerlink" title="6、 嵌套函数"></a><strong>6、</strong> <strong>嵌套函数</strong></h2><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token comment" spellcheck="true">/**     * 嵌套函数     * 例如：嵌套函数求5的阶乘     */</span>    <span class="token keyword">def</span> fun5<span class="token punctuation">(</span>num<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">def</span> fun6<span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          b        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          fun6<span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      fun6<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>fun5<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、偏应用函数"><a href="#7、偏应用函数" class="headerlink" title="7、偏应用函数"></a><strong>7、偏应用函数</strong></h2><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date    <span class="token comment" spellcheck="true">/**     * 偏应用函数是一种表达式     * 不需要提供函数需要的所有参数，     * 只需要提供部分，或不提供所需参数。     */</span>    <span class="token keyword">def</span> log<span class="token punctuation">(</span>date <span class="token operator">:</span>Date<span class="token punctuation">,</span> s <span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span><span class="token string">"date is "</span><span class="token operator">+</span> date <span class="token operator">+</span><span class="token string">",log is "</span><span class="token operator">+</span> s<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> date <span class="token operator">=</span> <span class="token keyword">new</span> Date<span class="token punctuation">(</span><span class="token punctuation">)</span>    log<span class="token punctuation">(</span>date <span class="token punctuation">,</span><span class="token string">"log1"</span><span class="token punctuation">)</span>    log<span class="token punctuation">(</span>date <span class="token punctuation">,</span><span class="token string">"log2"</span><span class="token punctuation">)</span>    log<span class="token punctuation">(</span>date <span class="token punctuation">,</span><span class="token string">"log3"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//想要调用log，以上变化的是第二个参数，可以用偏应用函数处理,来优化log方法</span>   <span class="token comment" spellcheck="true">/* 绑定第一个 date 参数，    * 第二个参数使用下划线(_)替换缺失的参数列表，    * 并把这个新的函数值的索引的赋给变量。    */</span>    <span class="token keyword">val</span> logWithDate <span class="token operator">=</span> log<span class="token punctuation">(</span>date<span class="token punctuation">,</span>_<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span>    logWithDate<span class="token punctuation">(</span><span class="token string">"log11"</span><span class="token punctuation">)</span>    logWithDate<span class="token punctuation">(</span><span class="token string">"log22"</span><span class="token punctuation">)</span>    logWithDate<span class="token punctuation">(</span><span class="token string">"log33"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、高阶函数"><a href="#8、高阶函数" class="headerlink" title="8、高阶函数"></a>8、<strong>高阶函数</strong></h2><pre class="line-numbers language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">/**     * 高阶函数:就是操作其他函数的函数     * 函数的参数是函数             * 或者函数的返回是函数             * 或者函数的参数和返回都是函数     */</span><span class="token comment" spellcheck="true">//函数作为参数或者返回累心时，只需指明函数中的类型    </span>    <span class="token comment" spellcheck="true">//函数的参数是函数：</span>    <span class="token comment" spellcheck="true">//f : (Int,Int) =>Int  （两个Int型参数、Int型返回值）</span>    <span class="token keyword">def</span> hightFun<span class="token punctuation">(</span>f <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span><span class="token builtin">Int</span><span class="token punctuation">,</span> a<span class="token operator">:</span><span class="token builtin">Int</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      f<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> f<span class="token punctuation">(</span>v1 <span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>v2<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Int</span>  <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      v1<span class="token operator">+</span>v2    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>hightFun<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//***************</span>   <span class="token keyword">def</span> test1<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> a <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">100</span>            a <span class="token operator">*</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">def</span> sum<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            x <span class="token operator">-</span> y        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     println<span class="token punctuation">(</span>test6<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//------------------------------------------------</span>    <span class="token comment" spellcheck="true">//函数的返回值类型为函数 ：(Int,Int)=>Int  f2</span>    <span class="token comment" spellcheck="true">//1，2,3,4相加</span>    <span class="token keyword">def</span> hightFun2<span class="token punctuation">(</span>a <span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token keyword">=></span><span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">def</span> f2 <span class="token punctuation">(</span>v1<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span>v2<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        v1<span class="token operator">+</span>v2<span class="token operator">+</span>a<span class="token operator">+</span>b      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      f2    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>hightFun2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//***********</span>    <span class="token keyword">def</span> test2<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">def</span> concat<span class="token punctuation">(</span>y<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                x <span class="token operator">+</span> <span class="token string">" !! "</span> <span class="token operator">+</span> y            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            concat        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> concat<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token keyword">=></span> <span class="token builtin">String</span> <span class="token operator">=</span> test2<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>concat<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//        println(test2(5)(7))</span> <span class="token comment" spellcheck="true">//-------------------------------------------------   </span>    <span class="token comment" spellcheck="true">//函数的参数是函数:  f : (Int ,Int) => Int)</span>    <span class="token comment" spellcheck="true">//函数的返回是函数:  (Int,Int) => Int</span>    <span class="token keyword">def</span> hightFun3<span class="token punctuation">(</span>f <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span> <span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      f    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     println<span class="token punctuation">(</span>hightFun3<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>hightFun3<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token operator">+</span>b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//以上这句话还可以写成这样</span>    <span class="token comment" spellcheck="true">//如果函数的参数在方法体中只使用了一次 那么可以写成_表示</span>    println<span class="token punctuation">(</span>hightFun3<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//**********</span>    <span class="token keyword">def</span> test3<span class="token punctuation">(</span>y<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">,</span> f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> sum <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> y            <span class="token keyword">def</span> sum4<span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                x <span class="token operator">+</span> sum            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            sum4        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        def f2 (x: Int) =&amp;#123;</span><span class="token comment" spellcheck="true">//            x + 10</span><span class="token comment" spellcheck="true">//        &amp;#125;</span>        <span class="token keyword">val</span> f <span class="token operator">=</span> test3<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>x <span class="token operator">+</span> <span class="token number">10</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//        println(f(5))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、柯里化函数"><a href="#9、柯里化函数" class="headerlink" title="9、柯里化函数"></a>9、柯里化函数</h2><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token comment" spellcheck="true">/**     * 柯里化函数     * 可以理解为高阶函数的简化     */</span>    <span class="token keyword">def</span> fun1<span class="token punctuation">(</span>a <span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>d<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token operator">+</span>d    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>fun1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//*******</span>   <span class="token keyword">def</span> fun<span class="token punctuation">(</span>a <span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            a<span class="token operator">+</span>c        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>fun<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、字符串"><a href="#五、字符串" class="headerlink" title="五、字符串"></a>五、字符串</h1><h2 id="1、string-stringBuilder-可变"><a href="#1、string-stringBuilder-可变" class="headerlink" title="1、string  | stringBuilder (可变)"></a>1、string  | stringBuilder (可变)</h2><h2 id="2、操作方法"><a href="#2、操作方法" class="headerlink" title="2、操作方法"></a>2、操作方法</h2><p>Ø  比较:equals</p><p>Ø  比较忽略大小写:equalsIgnoreCase</p><p>Ø  indexOf：如果字符串中有传入的assci码对应的值，返回下标</p><pre class="line-numbers language-scala"><code class="language-scala">    <span class="token comment" spellcheck="true">/**     * String &amp;&amp; StringBuilder     */</span>    <span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"abcd"</span>    <span class="token keyword">val</span> str1 <span class="token operator">=</span> <span class="token string">"ABCD"</span>    println<span class="token punctuation">(</span>str<span class="token punctuation">.</span>indexOf<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>str<span class="token punctuation">.</span>indexOf<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>str<span class="token operator">==</span>str1<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>str<span class="token punctuation">.</span>equals<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>str<span class="token punctuation">.</span>equalsIgnoreCase<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/**     * compareToIgnoreCase     *      * 如果参数字符串等于此字符串，则返回值 0；     * 如果此字符串小于字符串参数，则返回一个小于 0 的值；     * 如果此字符串大于字符串参数，则返回一个大于 0 的值。     *      */</span>    println<span class="token punctuation">(</span>str<span class="token punctuation">.</span>compareToIgnoreCase<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> strBuilder <span class="token operator">=</span> <span class="token keyword">new</span> StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//括号可省</span>    strBuilder<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//一个 + 只能跟单个字符且必须用单引号，否则无效 </span><span class="token comment" spellcheck="true">//    strBuilder.+('d')</span>    strBuilder<span class="token operator">+</span> <span class="token string">'d'</span><span class="token comment" spellcheck="true">//    strBuilder.+=('h')</span>    strBuilder<span class="token operator">+=</span> <span class="token string">'h'</span> <span class="token comment" spellcheck="true">//两个+ 可跟多个字符且必须用双引号</span><span class="token comment" spellcheck="true">//    strBuilder.++=("efg")</span>    strBuilder<span class="token operator">++</span><span class="token operator">=</span> <span class="token string">"efg"</span><span class="token comment" spellcheck="true">//StringBuilder可以追加浮点数</span>    strBuilder<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>    strBuilder<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">18f</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>strBuilder<span class="token punctuation">)</span> println<span class="token punctuation">(</span>strBuilder<span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、集合"><a href="#六、集合" class="headerlink" title="六、集合"></a>六、集合</h1><h2 id="1、数组"><a href="#1、数组" class="headerlink" title="1、数组"></a>1、数组</h2><h3 id="（1）创建一维数组"><a href="#（1）创建一维数组" class="headerlink" title="（1）创建一维数组"></a>（1）创建一维数组</h3><pre class="line-numbers language-scala"><code class="language-scala"> <span class="token comment" spellcheck="true">/**     * 创建数组两种方式：     * 1.new Array[String](3)     * 2.直接Array     */</span>    <span class="token comment" spellcheck="true">//创建类型为Int 长度为3的数组</span>    <span class="token keyword">val</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> Array<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//创建String 类型的数组，直接赋值</span>    <span class="token keyword">val</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"s100"</span><span class="token punctuation">,</span><span class="token string">"s200"</span><span class="token punctuation">,</span><span class="token string">"s300"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//赋值</span>    arr1<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">100</span>    arr1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">200</span>    arr1<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（2）数组遍历"><a href="#（2）数组遍历" class="headerlink" title="（2）数组遍历"></a>（2）数组遍历</h3><pre class="line-numbers language-scala"><code class="language-scala">   <span class="token comment" spellcheck="true">/**     * 遍历两种方式     * for     * foreach     */</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> arr1<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          println<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    arr1<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>i <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>s <span class="token keyword">&lt;-</span> arr2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    arr2<span class="token punctuation">.</span>foreach <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       x <span class="token keyword">=></span> println<span class="token punctuation">(</span>x<span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（3）数组操作"><a href="#（3）数组操作" class="headerlink" title="（3）数组操作"></a>（3）数组操作</h3><pre class="line-numbers language-scala"><code class="language-scala">Array<span class="token punctuation">.</span>concat：合并数组Array<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span>“shsxt”<span class="token punctuation">)</span>：创建初始值的定长数组<span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token keyword">new</span> Array<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        a<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>        a<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>        a<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true">//判断数组中符合条件的元素的个数</span><span class="token comment" spellcheck="true">//        val n = a.count(x=>&amp;#123;</span><span class="token comment" spellcheck="true">//            if(x>2)</span><span class="token comment" spellcheck="true">//                true</span><span class="token comment" spellcheck="true">//            else</span><span class="token comment" spellcheck="true">//                false</span><span class="token comment" spellcheck="true">//        &amp;#125;)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        println(n)</span>        <span class="token keyword">val</span> b <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将两个数组的元素合并在一个新的数组中</span>        <span class="token keyword">val</span> ints <span class="token operator">=</span> Array<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历数组</span>        ints<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建包含5个指定元素的数组</span>        <span class="token keyword">val</span> strings <span class="token operator">=</span> Array<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"shsxt"</span><span class="token punctuation">)</span>        strings<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        for(i &lt;- a)&amp;#123;</span><span class="token comment" spellcheck="true">//            println(i)</span><span class="token comment" spellcheck="true">//        &amp;#125;</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        val b = Array(4,5,6)</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        for(i &lt;- b)&amp;#123;</span><span class="token comment" spellcheck="true">//            println(i)</span><span class="token comment" spellcheck="true">//        &amp;#125;</span><span class="token comment" spellcheck="true">//        a.foreach(x=> &amp;#123; println(x) &amp;#125; )</span><span class="token comment" spellcheck="true">//        a.foreach(println(_))</span><span class="token comment" spellcheck="true">//         a.foreach(println)</span><span class="token comment" spellcheck="true">//        val c = new Array[Array[Int]](3)</span><span class="token comment" spellcheck="true">//        c(0) = Array(1,2,3)</span><span class="token comment" spellcheck="true">//        c(1) = Array(4,5,6)</span><span class="token comment" spellcheck="true">//        c(2) = Array(7,8,9)</span><span class="token comment" spellcheck="true">//        c.foreach(x=>&amp;#123;</span><span class="token comment" spellcheck="true">//            x.foreach(y=>&amp;#123;</span><span class="token comment" spellcheck="true">//                print(y + "\t")</span><span class="token comment" spellcheck="true">//            &amp;#125;)</span><span class="token comment" spellcheck="true">//            println()</span><span class="token comment" spellcheck="true">//        &amp;#125;)</span><span class="token comment" spellcheck="true">//        for(i&lt;-c)&amp;#123;</span><span class="token comment" spellcheck="true">//            for(j &lt;-i)&amp;#123;</span><span class="token comment" spellcheck="true">//                print(j + "\t")</span><span class="token comment" spellcheck="true">//            &amp;#125;</span><span class="token comment" spellcheck="true">//            println()</span><span class="token comment" spellcheck="true">//        &amp;#125;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="（4）创建二维数组"><a href="#（4）创建二维数组" class="headerlink" title="（4）创建二维数组"></a>（4）创建二维数组</h3><pre class="line-numbers language-scala"><code class="language-scala">  <span class="token comment" spellcheck="true">/**     * 创建二维数组和遍历     */</span>    <span class="token keyword">val</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> Array<span class="token punctuation">[</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    arr3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">=</span>Array<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">)</span>    arr3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span>Array<span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">)</span>    arr3<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span>Array<span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">0</span> until arr3<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token keyword">&lt;-</span> <span class="token number">0</span> until arr3<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        print<span class="token punctuation">(</span>arr3<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"    "</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>arr <span class="token keyword">&lt;-</span> arr3 <span class="token punctuation">;</span>i <span class="token keyword">&lt;-</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">%</span><span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      print<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"    "</span><span class="token punctuation">)</span>      count <span class="token operator">+=</span><span class="token number">1</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    arr3<span class="token punctuation">.</span>foreach <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> arr  <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      arr<span class="token punctuation">.</span>foreach <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> println <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> arr4 <span class="token operator">=</span> Array<span class="token punctuation">[</span>Array<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Array<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Array<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    arr4<span class="token punctuation">.</span>foreach <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> arr <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      arr<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>i <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"-------"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>arr <span class="token keyword">&lt;-</span> arr4<span class="token punctuation">;</span>i <span class="token keyword">&lt;-</span> arr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、list"><a href="#2、list" class="headerlink" title="2、list"></a>2、list</h2><h2 id="（1）创建list"><a href="#（1）创建list" class="headerlink" title="（1）创建list"></a>（1）创建list</h2><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>备注</code>  Nil      长度为0的list</p><h2 id="（2）list遍历"><a href="#（2）list遍历" class="headerlink" title="（2）list遍历"></a>（2）list遍历</h2><blockquote><p>foreach ，for</p></blockquote><h2 id="（3）list操作"><a href="#（3）list操作" class="headerlink" title="（3）list操作"></a>（3）list操作</h2><pre class="line-numbers language-scala"><code class="language-scala">  <span class="token comment" spellcheck="true">//创建</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//遍历</span>    list<span class="token punctuation">.</span>foreach <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token keyword">=></span> println<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    list.foreach &amp;#123; println&amp;#125;</span>    <span class="token comment" spellcheck="true">//filter 过滤元素</span>    <span class="token keyword">val</span> list1  <span class="token operator">=</span> list<span class="token punctuation">.</span>filter <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token keyword">=></span> x<span class="token operator">></span><span class="token number">3</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    list1<span class="token punctuation">.</span>foreach <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> println<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//count  计算符合条件的元素个数</span>    <span class="token keyword">val</span> value <span class="token operator">=</span> list1<span class="token punctuation">.</span>count <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token keyword">=></span> x<span class="token operator">></span><span class="token number">3</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//map 对元素操作 如切分</span>    <span class="token keyword">val</span> nameList <span class="token operator">=</span> List<span class="token punctuation">(</span>            <span class="token string">"hello shsxt"</span><span class="token punctuation">,</span>            <span class="token string">"hello xasxt"</span><span class="token punctuation">,</span>            <span class="token string">"hello shsxt"</span>        <span class="token punctuation">)</span>    <span class="token keyword">val</span> mapResult<span class="token operator">:</span>List<span class="token punctuation">[</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nameList<span class="token punctuation">.</span>map<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         x <span class="token keyword">=></span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    mapResult<span class="token punctuation">.</span>foreach<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>println<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//flatmap 将元素压扁平,先map再flat</span>    <span class="token keyword">val</span> flatMapResult <span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> nameList<span class="token punctuation">.</span>flatMap<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token keyword">=></span> x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    flatMapResult<span class="token punctuation">.</span>foreach <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> println <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="images/map.jpg"></p><h2 id="3、set"><a href="#3、set" class="headerlink" title="3、set"></a>3、set</h2><p><code>注意：</code>set集合自动去重</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">val</span> s <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">val</span> s1 <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历时，自动去重</span>s<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token keyword">&lt;-</span> s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>println<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//交集</span><span class="token keyword">val</span> inse <span class="token operator">=</span> s<span class="token punctuation">.</span>intersect<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">val</span> ins <span class="token operator">=</span> s<span class="token punctuation">.</span>&amp;<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>inse<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>inse<span class="token punctuation">.</span>foreach<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>println<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//差集</span><span class="token keyword">val</span> di <span class="token operator">=</span> s<span class="token punctuation">.</span>diff<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token keyword">val</span> de <span class="token operator">=</span> s<span class="token punctuation">.</span>&amp;<span class="token operator">~</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//子集:s是不是s1的子集</span><span class="token keyword">val</span> boo<span class="token operator">:</span> <span class="token builtin">Boolean</span> <span class="token operator">=</span> s<span class="token punctuation">.</span>subsetof<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//max ,min</span><span class="token keyword">val</span> max <span class="token operator">=</span> s<span class="token punctuation">.</span>max<span class="token keyword">val</span> min <span class="token operator">=</span> s<span class="token punctuation">.</span>minprintln<span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//转成数组，list</span>s<span class="token punctuation">.</span>toArray<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>s<span class="token punctuation">.</span>toList<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//mkString , 元素以！分隔拼成字符串</span>println<span class="token punctuation">(</span>s<span class="token punctuation">.</span>mkString<span class="token punctuation">)</span>println<span class="token punctuation">(</span>s<span class="token punctuation">.</span>mkstring<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、map"><a href="#4、map" class="headerlink" title="4、map"></a>4、map</h2><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//map创建时，若key相同，则都会被后一个key覆盖</span><span class="token keyword">val</span> map <span class="token operator">=</span>Map（<span class="token string">"1"</span><span class="token operator">-</span><span class="token operator">></span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token operator">-</span><span class="token operator">></span><span class="token string">"b"</span>）<span class="token comment" spellcheck="true">//获取map值</span>println<span class="token punctuation">(</span>map<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>map<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取指定key，若没有，就用另一个指定值代替</span>println<span class="token punctuation">(</span>map<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">val</span> res <span class="token operator">=</span> map<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"800"</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历map</span><span class="token comment" spellcheck="true">//x为map中的一组键值对</span><span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token operator">></span> map<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>println<span class="token punctuation">(</span><span class="token string">"key:"</span><span class="token operator">+</span>x<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">",value:"</span><span class="token operator">+</span> x<span class="token punctuation">.</span>_2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> println<span class="token punctuation">(</span><span class="token string">"key:"</span><span class="token operator">+</span>x<span class="token punctuation">.</span>_1<span class="token operator">+</span><span class="token string">",value:"</span><span class="token operator">+</span> x<span class="token punctuation">.</span>_2<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历key</span><span class="token keyword">val</span> keyIteratable <span class="token operator">=</span> map<span class="token punctuation">.</span>keyskeyIteratable<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>k<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>println<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">",value"</span><span class="token operator">+</span>map<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历value</span><span class="token keyword">val</span> valueIteratable <span class="token operator">=</span> map<span class="token punctuation">.</span>valuesvalueIteratable<span class="token punctuation">.</span>foreach<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>v<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span><span class="token string">"value"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//合并map</span><span class="token keyword">val</span> map1 <span class="token operator">=</span> Map（<span class="token punctuation">(</span><span class="token number">1</span>，<span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span>）<span class="token keyword">val</span> map2 <span class="token operator">=</span> Map（<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"cc"</span><span class="token punctuation">)</span>）map1<span class="token punctuation">.</span>+<span class="token operator">+</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>map1<span class="token punctuation">.</span>+<span class="token operator">+</span><span class="token operator">:</span><span class="token punctuation">(</span>map2<span class="token punctuation">)</span><span class="token punctuation">.</span>oreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//map操作方法</span><span class="token comment" spellcheck="true">//filter:过滤，留下符合条件的元素</span><span class="token keyword">val</span> result <span class="token operator">=</span> map<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>equals<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token boolean">true</span><span class="token keyword">else</span>    <span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>map<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">.</span>equals<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//count：统计符合条件的元素个数</span><span class="token keyword">val</span> countResult <span class="token operator">=</span> map<span class="token punctuation">.</span>count（x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      x<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>equals<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>）println<span class="token punctuation">(</span>countResult<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//contains：判断map中是否包含某个key</span>map<span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//exist：判断符合条件的元素是存在</span><span class="token comment" spellcheck="true">//若遇到条件返回结果为true，就停止迭代</span>map<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span>（x<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>equals<span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>println<span class="token punctuation">(</span><span class="token string">"存在喽"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span>println<span class="token punctuation">(</span><span class="token string">"不存在喽"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、元组Tuple"><a href="#5、元组Tuple" class="headerlink" title="5、元组Tuple"></a>5、元组Tuple</h2><p>同：与列表类似</p><p>不同：元组可以包含不同类型的元素；元组的值是通过将单个值包含在圆括号中构成</p><p><code>注意：</code>Tuple最多支持22个参数</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//元素个数取决于Tuple后面的数字</span><span class="token keyword">val</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> Tuple1<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">val</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> Tuple2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">val</span> t3 <span class="token operator">=</span> Tuple3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> t5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>，<span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">val</span> t22 <span class="token operator">=</span> <span class="token keyword">new</span> Tuple22<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//获取元组中的值 ：用  ._XX  </span>println（t5<span class="token punctuation">.</span>_4）<span class="token keyword">val</span> t <span class="token operator">=</span> Tuple2<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>t<span class="token punctuation">.</span>_1<span class="token punctuation">.</span>_2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//元组遍历：元素迭代器</span><span class="token keyword">val</span> interator <span class="token operator">=</span> t5<span class="token punctuation">.</span>productorInteratorinterator<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span>interator<span class="token punctuation">.</span>hasNext<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    println<span class="token punctuation">(</span>intrator<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//元素翻转 swap， 只针对二元数组</span>println<span class="token punctuation">(</span>t2<span class="token punctuation">.</span>swap<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//转换成字符串</span>println<span class="token punctuation">(</span>t5<span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="七、trait"><a href="#七、trait" class="headerlink" title="七、trait"></a>七、trait</h1><p>Scala：只有extends  ，可以继承多个Trait</p><p>Scala Trait(特征) 相当于 Java 的接口和抽象类的结合</p><p>可以定义属性和方法</p><p><code>注意：</code></p><ul><li>若继承的多个trait中包含同名的属性和方法，就必须在在类中使用<code>override</code> 重新定义</li><li>若重新定义的属性是使用<code>var</code>定义的则会报错，所以必须是使用<code>val</code>定义的属性才可使用override</li><li>trait中不能传参数</li></ul><p><code>举例</code>：trait中带属性带方法实现</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">trait</span> Read<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"read"</span>    <span class="token keyword">val</span> age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">def</span> read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token string">"read---"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">trait</span> Write<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"write"</span>     <span class="token keyword">val</span> age <span class="token operator">=</span> <span class="token number">19</span>    <span class="token keyword">def</span> write<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token string">"write----"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> Human <span class="token keyword">extends</span> Read <span class="token keyword">with</span> Write<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//前提name必须是用val定义的</span>  <span class="token comment" spellcheck="true">//  override var name  = "person"</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> age <span class="token operator">=</span> <span class="token number">20</span>    name  <span class="token operator">=</span> <span class="token string">"person"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> Trait<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> human <span class="token operator">=</span> <span class="token keyword">new</span> Human<span class="token punctuation">(</span><span class="token punctuation">)</span>         println<span class="token punctuation">(</span>human<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        human<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        human<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>举例</code>：trait中带方法不实现</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">trait</span> Equal<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//抽象方法</span>    <span class="token keyword">def</span> isEqual<span class="token punctuation">(</span>p<span class="token operator">:</span>Point<span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Boolean</span>    <span class="token keyword">def</span> isNoEqual<span class="token punctuation">(</span>p<span class="token operator">:</span>Point<span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Boolean</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">!</span>isEqual<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> Point<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Equal <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> xx <span class="token operator">=</span> x    <span class="token keyword">var</span> yy <span class="token operator">=</span> y    <span class="token keyword">override</span> <span class="token keyword">def</span> isEqual <span class="token punctuation">(</span>p<span class="token operator">:</span>Point<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       p<span class="token punctuation">.</span>xx <span class="token operator">==</span> xx <span class="token operator">&amp;</span> p<span class="token punctuation">.</span>yy <span class="token operator">==</span>yy     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> isEqule<span class="token punctuation">(</span>p<span class="token operator">:</span><span class="token builtin">Any</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>isInstanceOf<span class="token punctuation">[</span>Point<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>Point<span class="token punctuation">]</span><span class="token punctuation">.</span>xx<span class="token operator">==</span>xx  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> Trait2<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">val</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> Point<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>       <span class="token keyword">val</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>       ptintln<span class="token punctuation">(</span>p1<span class="token punctuation">.</span>isNoEqual<span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span>       ptintln<span class="token punctuation">(</span>p1<span class="token punctuation">.</span>isEqual<span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、模式匹配match"><a href="#八、模式匹配match" class="headerlink" title="八、模式匹配match"></a>八、模式匹配match</h1><p>1、概念理解</p><ul><li>一个模式匹配包含多个备选项，且每个都以关键字case开始</li><li>每个备选项都包含一个模式和多个表达式，且用箭头符号 =&gt; 隔开了模式和表达式。</li><li>Ø 模式匹配不仅可以匹配值还可以匹配类型</li><li>Ø  从上到下顺序匹配，如果匹配到则不再往下匹配</li><li>Ø  都匹配不上时，会匹配到case_ ,相当于default</li><li>Ø  match 的最外面的”{ }”可以去掉看成一个语句</li></ul><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Match<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">val</span> p1 <span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3f</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token number">55d</span><span class="token punctuation">)</span>        p1<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            println<span class="token punctuation">(</span>mymatch<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> mymatch<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             x <span class="token keyword">match</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"4"</span> <span class="token keyword">=></span>println<span class="token punctuation">(</span><span class="token string">"macth 4--"</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> x<span class="token operator">:</span><span class="token builtin">String</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"match String"</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token number">1</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"1--"</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token number">2</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"2--"</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> <span class="token number">3f</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"3f--"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//      case x :Double => println("type is Double")</span>            <span class="token keyword">case</span> _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"no match--"</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="九、样例类"><a href="#九、样例类" class="headerlink" title="九、样例类"></a>九、样例类</h1><p>1、概念理解</p><ul><li><p>使用了case关键字的类定义就是样例类(case classes)</p></li><li><p>样例类是种特殊的类。实现了类构造参数的getter方法（构造参数默认被声明为val），当构造参数是声明为var类型的，它将帮你实现setter和getter方法。</p><p>Ø  样例类默认帮你实现了toString,equals，copy和hashCode等方法。</p><p>Ø  样例类可以new, 也可以不用new</p></li></ul><p>2、举例：结合模式匹配的代码</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">object</span> Match2<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> zs <span class="token operator">=</span> <span class="token keyword">new</span> Woman<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"zs"</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>zs<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">" : "</span><span class="token operator">+</span> zs <span class="token punctuation">.</span> name<span class="token punctuation">)</span>     <span class="token keyword">val</span> mm <span class="token operator">=</span> Woman<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">"meimei"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> nn <span class="token operator">=</span> Woman<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">"meimei"</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>mm<span class="token punctuation">.</span>equals<span class="token punctuation">(</span>zs<span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>mm<span class="token punctuation">.</span>equals<span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> wo <span class="token operator">=</span> List<span class="token punctuation">(</span>ls<span class="token punctuation">,</span>mm<span class="token punctuation">)</span>    wo<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>x<span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            x <span class="token keyword">match</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> x<span class="token operator">:</span>Woman <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"match Woman--"</span><span class="token punctuation">)</span>                <span class="token keyword">case</span> Woman<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"ls"</span><span class="token punctuation">)</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span>                <span class="token keyword">case</span> Woman<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">"mm"</span><span class="token punctuation">)</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"mm"</span><span class="token punctuation">)</span>                <span class="token keyword">case</span> Woman<span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">"zs"</span><span class="token punctuation">)</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token keyword">class</span> Woman <span class="token punctuation">(</span>age<span class="token operator">:</span><span class="token builtin">Int</span> <span class="token punctuation">,</span>name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十、Actor-Model"><a href="#十、Actor-Model" class="headerlink" title="十、Actor Model"></a>十、<strong>Actor Model</strong></h1><p>\1.    概念理解</p><p>Actor Model是用来编写并行计算或分布式系统的高层次抽象（类似java中的Thread）让程序员不必为多线程模式下共享锁而烦恼,被用在Erlang 语言上, 高可用性99.9999999 % 一年只有31ms 宕机Actors将状态和行为封装在一个轻量的进程/线程中，但是不和其他Actors分享状态，每个Actors有自己的世界观，当需要和其他Actors交互时，通过发送事件和消息，发送是异步的，非堵塞的(fire-andforget)，发送消息后不必等另外Actors回复，也不必暂停，每个Actors有自己的消息队列，进来的消息按先来后到排列，这就有很好的并发策略和可伸缩性，可以建立性能很好的事件驱动系统。</p><p>Actor的特征：</p><p>Ø  ActorModel是消息传递模型,基本特征就是消息传递</p><p>Ø  消息发送是异步的，非阻塞的</p><p>Ø  消息一旦发送成功，不能修改</p><p>Ø  Actor之间传递时，自己决定决定去检查消息，而不是一直等待，是异步非阻塞的</p><p>什么是Akka</p><p>Akka 是一个用 Scala 编写的库，用于简化编写容错的、高可伸缩性的 Java 和Scala 的 Actor 模型应用，底层实现就是Actor,Akka是一个开发库和运行环境，可以用于构建高并发、分布式、可容错、事件驱动的基于JVM的应用。使构建高并发的分布式应用更加容易。</p><p>spark1.6版本之前，spark分布式节点之间的消息传递使用的就是Akka，底层也就是actor实现的。1.6之后使用的netty传输。</p><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">class</span> MyActor <span class="token keyword">extends</span> Actor<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">override</span> <span class="token keyword">def</span> act<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> receive <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"hello"</span><span class="token keyword">=></span>println<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>          <span class="token keyword">case</span> x<span class="token operator">:</span><span class="token builtin">String</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"save String ="</span><span class="token operator">+</span> x<span class="token punctuation">)</span>        <span class="token keyword">case</span> x<span class="token operator">:</span><span class="token builtin">Int</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"save Int"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"save default"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> Actor<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> actor <span class="token operator">=</span> <span class="token keyword">new</span> MyActor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//启动</span>        actor<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//发送消息</span>        actor <span class="token operator">!</span> <span class="token string">"hello"</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> Msg<span class="token punctuation">(</span>actor<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> WoActor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> Actor<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    oevrride <span class="token keyword">def</span> act<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            receive <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> msg<span class="token operator">:</span>Msg <span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    msg<span class="token punctuation">.</span>mes <span class="token comment" spellcheck="true">//收到的消息</span>                    msg<span class="token punctuation">.</span>actor <span class="token comment" spellcheck="true">//回复的消息</span>                    println<span class="token punctuation">(</span><span class="token string">"too"</span><span class="token punctuation">)</span>                    msg<span class="token punctuation">.</span>actor <span class="token operator">!</span> <span class="token string">"hahaha"</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> HuActor<span class="token punctuation">(</span>wo<span class="token operator">:</span>WoActor<span class="token punctuation">)</span> <span class="token keyword">extends</span> Actor<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    oevrride <span class="token keyword">def</span> act<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            receive <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"hello"</span> <span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    println<span class="token punctuation">(</span><span class="token string">"too"</span><span class="token punctuation">)</span>                    <span class="token keyword">val</span> msg <span class="token operator">=</span> Msg<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"rrr"</span><span class="token punctuation">)</span>                    wo <span class="token operator">!</span> msg                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                               <span class="token keyword">case</span> <span class="token string">"rrr"</span> <span class="token keyword">=></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    println<span class="token punctuation">(</span><span class="token string">"uuu"</span><span class="token punctuation">)</span>                   <span class="token keyword">val</span> msg <span class="token operator">=</span> Msg<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"heheh"</span><span class="token punctuation">)</span>                    wo <span class="token operator">!</span> msg                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> Actor2<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">val</span> woman <span class="token operator">=</span> <span class="token keyword">new</span> WoActor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> human <span class="token operator">=</span> <span class="token keyword">new</span> HuActor<span class="token punctuation">(</span>woman<span class="token punctuation">)</span>        human<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        woman<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        human <span class="token operator">!</span> <span class="token string">"hello"</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala"><code class="language-scala"><span class="token keyword">case</span> <span class="token keyword">class</span> Message<span class="token punctuation">(</span>actor<span class="token operator">:</span>Actor<span class="token punctuation">,</span>msg<span class="token operator">:</span><span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token keyword">class</span> Actor1 <span class="token keyword">extends</span> Actor<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> act<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      receive<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span>  msg <span class="token operator">:</span>Message <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          println<span class="token punctuation">(</span><span class="token string">"i sava msg! = "</span><span class="token operator">+</span> msg<span class="token punctuation">.</span>msg<span class="token punctuation">)</span>          msg<span class="token punctuation">.</span>actor<span class="token operator">!</span><span class="token string">"i love you too !"</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> msg <span class="token operator">:</span><span class="token builtin">String</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token keyword">case</span>  _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"default msg!"</span><span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> Actor2<span class="token punctuation">(</span>actor <span class="token operator">:</span>Actor<span class="token punctuation">)</span> <span class="token keyword">extends</span> Actor<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  actor <span class="token operator">!</span> Message<span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"i love you !"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> act<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            receive<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> msg <span class="token operator">:</span><span class="token builtin">String</span> <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>equals<span class="token punctuation">(</span><span class="token string">"i love you too !"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                  println<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>                 actor<span class="token operator">!</span> <span class="token string">"could we have a date !"</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>              <span class="token keyword">case</span>  _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"default msg!"</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">object</span> Lesson_Actor2 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> actor1 <span class="token operator">=</span> <span class="token keyword">new</span> Actor1<span class="token punctuation">(</span><span class="token punctuation">)</span>    actor1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> actor2 <span class="token operator">=</span> <span class="token keyword">new</span> Actor2<span class="token punctuation">(</span>actor1<span class="token punctuation">)</span>    actor2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十一、WordCount"><a href="#十一、WordCount" class="headerlink" title="十一、WordCount"></a>十一、WordCount</h1><pre class="line-numbers language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//在lib文件中添加spark的jar包 ，并addLib</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkConf<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>SparkContext<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token punctuation">.</span>rddToPairRDDFunctions<span class="token keyword">object</span> WordCount <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"WC"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//用于了解集群</span>    <span class="token comment" spellcheck="true">//RDD:集合 ，抽象的</span>    <span class="token keyword">val</span> lines <span class="token operator">:</span>RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"./words.txt"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//方式一：</span>    <span class="token keyword">val</span> word <span class="token operator">:</span>RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span>  <span class="token operator">=</span> lines<span class="token punctuation">.</span>flatMap<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>lines <span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      lines<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//匿名函数</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> pairs<span class="token operator">:</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> word<span class="token punctuation">.</span>map<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token keyword">=></span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//map :一进一出    flatmap：一进多出    x：每个单词</span>    <span class="token keyword">val</span> result<span class="token operator">:</span>RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> pairs<span class="token punctuation">.</span>reduceByKey<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">=></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        println<span class="token punctuation">(</span><span class="token string">"a:"</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">",b:"</span><span class="token operator">+</span>b<span class="token punctuation">)</span>        a<span class="token operator">+</span>b    <span class="token comment" spellcheck="true">//相当于  a = a + b用于下一个统计</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//优化：排序  false（降序）  第一个_ 代表每个元素</span>    result<span class="token punctuation">.</span>sortBy<span class="token punctuation">(</span>_<span class="token punctuation">.</span>_2<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//方式二：简化写法</span>    lines<span class="token punctuation">.</span>flatMap <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>map <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span>_<span class="token operator">+</span>_<span class="token punctuation">)</span><span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> 静态 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习</title>
      <link href="/2019/02/14/Redis%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/02/14/Redis%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Redis的简介"><a href="#一、Redis的简介" class="headerlink" title="一、Redis的简介"></a>一、Redis的简介</h1><h2 id="1、前情提要"><a href="#1、前情提要" class="headerlink" title="1、前情提要"></a>1、前情提要</h2><p><strong>磁盘数据库</strong>： </p><p> MySQL（关系型数据库）<br> Hbase</p><p><img src="images/redis1.jpg"></p><p><strong>内存数据库</strong>：<br>  Redis<br>  memcached<br>  （成本高、性能好、读写速度快、数据安全性低、直接把值放到内存里面，内存数据库就直接把值取到）</p><p><img src="images/redis2.jpg"></p><h2 id="2、用作数据库、缓存和消息中间件"><a href="#2、用作数据库、缓存和消息中间件" class="headerlink" title="2、用作数据库、缓存和消息中间件"></a>2、用作数据库、缓存和消息中间件</h2><blockquote><p>二八法则：80%是经常被查询，使用内存数据库做缓存中间件，读取性能高</p></blockquote><h1 id="二、Redis的特点"><a href="#二、Redis的特点" class="headerlink" title="二、Redis的特点"></a>二、Redis的特点</h1><h2 id="1、数据结构丰富"><a href="#1、数据结构丰富" class="headerlink" title="1、数据结构丰富"></a>1、数据结构丰富</h2><p>Redis虽然是键值对数据库，但他支持多种类型的数据结构（主要是不同类型的value）</p><blockquote><p>字符串、散列（hashes），列表（lists），集合（sets），有序集合（sorted sets）</p></blockquote><p><img src="images/redis0.jpg"></p><h2 id="2、数据的持久化"><a href="#2、数据的持久化" class="headerlink" title="2、数据的持久化"></a>2、数据的持久化</h2><p>Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载到内存进行使用</p><h2 id="3、数据的备份"><a href="#3、数据的备份" class="headerlink" title="3、数据的备份"></a>3、数据的备份</h2><p>Redis 支持数据的备份，即 master-slave 模式的数据备份。</p><h1 id="三、Redis的安装"><a href="#三、Redis的安装" class="headerlink" title="三、Redis的安装"></a>三、Redis的安装</h1><h2 id="1、下载安装包"><a href="#1、下载安装包" class="headerlink" title="1、下载安装包"></a>1、下载安装包</h2><p>redis-3.2.9.tar.gz </p><p>网址：<a href="http://www.redis.cn/download.html">http://www.redis.cn/download.html</a></p><h2 id="2、依赖软件安装"><a href="#2、依赖软件安装" class="headerlink" title="2、依赖软件安装"></a>2、依赖软件安装</h2><pre><code>yum install gcc tcl -y</code></pre><h2 id="3、解压-redis"><a href="#3、解压-redis" class="headerlink" title="3、解压 redis"></a>3、解压 redis</h2><p>并进入解压目录</p><pre><code>tar -zvxf redis-3.2.9.tar.gz </code></pre><h2 id="4、-执行-编译命令"><a href="#4、-执行-编译命令" class="headerlink" title="4、 执行 编译命令"></a>4、 执行 编译命令</h2><p>（<code>注意：</code>当前路径下需包含 makefile文件  ： 用于手动编译）</p><pre><code>make &amp;&amp; make install</code></pre><h2 id="5、修改-redis-的配置文件"><a href="#5、修改-redis-的配置文件" class="headerlink" title="5、修改 redis 的配置文件"></a>5、修改 redis 的配置文件</h2><p> redis.config ( 先 备份一个原厂配置文件)</p><pre class="line-numbers language-shell"><code class="language-shell">vim redis.config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改运行模式为后台运行（如果为no，启动redis-server后，控制台就会卡在启动状态）daemonize守护进程</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">daemonize</span> <span class="token attr-value">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>指定redis数据持久化的路径(在执行redis-cli命令的当前路径，会生成dump.rdb文件)</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">dir</span> <span class="token attr-value">  ./</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用默认的 redis.conf 文件，redis 默认只能通过 127.0.0.1:6379 这个地址访问，这样就只能在本机上操作了</li><li>想要远程操作，需要修改redis.conf 这个配置文件，在配置文件中添加相应的 ip 地址， 在bind 127.0.0.1 后面追加</li></ul><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">bind</span> <span class="token attr-value">127.0.0.1 192.168.198.128</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6、启动server服务"><a href="#6、启动server服务" class="headerlink" title="6、启动server服务"></a>6、启动server服务</h2><p>（如在redis的解压目录下）</p><blockquote><p>命令： redis-server 配置文件的地址</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell"> redis-server redis-conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>终止服务：（查询redis进程号，然后，kill该进程）</p><pre><code>ps -ef | grep rediskill 进程号</code></pre><h2 id="7、启动客户端服务"><a href="#7、启动客户端服务" class="headerlink" title="7、启动客户端服务"></a>7、启动客户端服务</h2><pre class="line-numbers language-shell"><code class="language-shell">redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>客户端命令格式：redis-cli –h host –p port</p><p>显示：</p><blockquote><p>127.0.0.1:6379&gt; </p></blockquote><h1 id="四、Redis的使用"><a href="#四、Redis的使用" class="headerlink" title="四、Redis的使用"></a>四、Redis的使用</h1><h2 id="0、前情提要"><a href="#0、前情提要" class="headerlink" title="0、前情提要"></a>0、前情提要</h2><p>Redis的key 值是二进制安全的，这意味着可以用任何二进制序列作为 key值。</p><h2 id="1、切换数据库（实例）"><a href="#1、切换数据库（实例）" class="headerlink" title="1、切换数据库（实例）"></a>1、切换数据库（实例）</h2><blockquote><p>select databaseid 默认共有 16 个实例库，</p><p>登录时是 ID 为0 的数据库，总共有 16 个</p></blockquote><pre><code>select 0</code></pre><h2 id="2、Key操作："><a href="#2、Key操作：" class="headerlink" title="2、Key操作："></a>2、Key操作：</h2><p>（前提：是针对已经存在key）</p><blockquote><p>KEYS pattern<br>查找所有符合给定模式 pattern 的 key 。</p><pre class="line-numbers language-shell"><code class="language-shell">keys * <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>列出所有Key</p></blockquote><blockquote><p>EXISTS  key<br>检查给定 key 是否存在。</p><pre><code>EXISTS  name</code></pre><p>若显示0，则不存在；若显示1，则存在</p></blockquote><blockquote><p>EXPIRE key seconds<br>为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除。</p><pre><code>EXPIRE age 1</code></pre><p>若设置成功，显示1；显示0 ，则为失败，可能是该key不存在</p></blockquote><blockquote><p>TTL key<br>以秒为单位，返回给定 key 的剩余生存时间</p></blockquote><blockquote><p>MOVE key db</p><p>将当前数据库的 key 移动到给定的数据库 db 当中。<br>如果当前数据库(源数据库)和给定数据库(目标数据库)有相同名字的给定 key ，或者 key 不存在于当前数据库，那么 MOVE 没有任何效果</p><pre><code> move name 1</code></pre><p>name 是数据库0中已存在的key，移动到数据库1中后，0中就不存在该key</p></blockquote><blockquote><p>TYPE key</p><p>返回 key 所储存的值的类型。</p></blockquote><blockquote><pre><code>DEL key [key ...]</code></pre><p>删除给定的一个或多个 key 。不存在的 key 会被忽略</p></blockquote><h2 id="3、String-操作"><a href="#3、String-操作" class="headerlink" title="3、String  操作"></a>3、String  操作</h2><p>字符串是一种最基本的 Redis 值类型。Redis 字符串是二进制安全的，这<br>意味着一个 Redis 字符串能包含任意类型的数据</p><blockquote><pre><code>SET key value [EX seconds][PX milliseconds] [NX|XX]</code></pre><p> EX 设置过期时间，秒，等同于 SETEX key seconds value<br> PX 设置过期时间，毫秒，等同于 PSETEX key milliseconds value<br> NX 键不存在，才能设置，等同于 SETNX key value<br> XX 键存在时，才能设置</p></blockquote><p><code>注意</code></p><p>将字符串值 value 关联到 key 。<br>如果 key 已经持有其他值， SET 就覆写旧值，无视类型。<br>对于某个原本带有生存时间（TTL）的键来说， 当 SET 命令成功在这个键上执行时， 这个键原有的 TTL 将被清除。</p><blockquote><pre><code>GET key</code></pre><p>返回 key 所关联的字符串值。如果 key 不存在那么返回特殊值 nil 。<br>假如 key 储存的值不是字符串类型，返回一个错误，因为 GET 只能<br>用于处理字符串值</p></blockquote><blockquote><pre><code>APPEND key value</code></pre><p>如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。<br>如果 key 不存在， APPEND 就简单地将给定 key 设为 value ，就像执行 SET key value 一样。</p></blockquote><blockquote><pre><code>STRLEN key</code></pre><p>返回 key 所储存的字符串值的长度。<br>当 key 储存的不是字符串值时，返回一个错误。</p></blockquote><blockquote><pre><code>INCR key</code></pre><p>将 key 中储存的数字值增一，并显示。<br>如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行INCR 操作。<br>如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。</p><p><code>错误：</code></p><p>(error) ERR value is not an integer or out of range</p></blockquote><blockquote><pre><code>INCRBY key increment</code></pre><p>将 key 所储存的值加上增量 increment ，并显示。<br>如果 key 不存在，那么 key 的值会先被初始化为 0 ，然后再执行INCRBY 命令。<br>如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。</p></blockquote><blockquote><pre><code>DECR key</code></pre><p>将 key 中储存的数字值减一。</p><pre><code>DECRBY key decrement</code></pre><p>将 key 所储存的值减去减量 decrement 。</p></blockquote><blockquote><pre><code> GETRANGE key start end</code></pre><p>返回 key 中字符串值的子字符串，字符串的截取范围由 start 和end 两个偏移量决定(包括 start 和 end 在内)。<br>负数偏移量表示从字符串最后开始计数， -1 表示最后一个字符， -2 表示倒数第二个，以此类推</p></blockquote><blockquote><pre><code>SETRANGE key offset value</code></pre><p>用 value 参数覆写(overwrite)给定 key 所储存的字符串值，从偏移量 offset 开始。<br>不存在的 key 当作空白字符串处理。</p></blockquote><blockquote><pre><code>SETEX key  seconds value</code></pre><p>将值 value 关联到 key ，并将 key 的生存时间设为 seconds<br>如果 key 已经存在， SETEX 命令将覆写旧值。<br>这个命令类似于以下两个命令：</p><pre><code>SET key valueEXPIRE key seconds # 设置生存时间</code></pre></blockquote><blockquote><p>不同之处是， SETEX 是一个原子性(atomic)操作，关联值和设置生存时间两个动作会在同一时间内完成，该命令在 Redis 用作缓存时，非常实用。</p></blockquote><blockquote><pre class="line-numbers language-shell"><code class="language-shell">SETNX key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 key 的值设为 value ，当且仅当 key 不存在。<br>若给定的 key 已经存在，则 SETNX 不做任何动作。<br>SETNX 是『SET if Not eXists』(如果不存在，则 SET)的简写。</p></blockquote><blockquote><pre><code>MGET key [key ...]</code></pre><p>返回所有(一个或多个)给定 key 的值。<br>如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。因此，该命令永不失败</p></blockquote><blockquote><pre><code>MSET key value [key value ...]</code></pre><p>同时设置一个或多个 key-value 对。<br>如果某个给定 key 已经存在，那么 MSET 会用新值覆盖原来的旧值，如果这不是你所希望的效果，请考虑使用 MSETNX 命令：它只会在所有给定 key 都不存在的情况下进行设置操作。</p></blockquote><blockquote><pre><code>MSETNX key value [key value ...]</code></pre><p>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。<br>即使只有一个给定 key 已存在， MSETNX 也会拒绝执行所有给定 key 的设置操作。<br>MSETNX 是原子性的，因此它可以用作设置多个不同 key 表示不同字段(field)的唯一性逻辑对象(unique logic object)，所有字段要么全被设置，要么全不被设置。</p></blockquote><h2 id="4、-List-操作"><a href="#4、-List-操作" class="headerlink" title="4、 List 操作"></a>4、 List 操作</h2><blockquote><pre><code>LPUSH key value [value ...]</code></pre><p>将一个或多个值 value 插入到列表 key 的表头。（从左边插入）<br>如果有多个 value 值，那么各个 value 值按从左到右的顺序依次 插 入 到 表 头 ：</p><p> 比 如 说 ，</p><p> 对 空 列 表 mylist  执 行 命令 LPUSH mylist a b c ，列表的值将是 c b a ，</p><p>这等同于原 子 性 地 执行 LPUSH mylist a 、 LPUSH mylist b 和 LPUSH mylistc 三个命令。</p></blockquote><blockquote><pre><code>RPUSH key value [value ...]</code></pre><p>将一个或多个值 value 插入到列表 key 的表尾。（从右边插入）<br>如果有多个 value 值，那么各个 value 值按从左到右的顺序依次 插 入 到 表 尾 ： </p><p>比 如 对 一 个 空 列 表 mylist  执行 RPUSH mylist a b c ，得出的结果列表为 a b c ，</p><p>等同于 执 行 命令 RPUSH mylist a 、 RPUSH mylist b 、 RPUSH mylist c 。</p></blockquote><blockquote><pre><code>LRANGE key  start stop</code></pre><p>返 回 列 表 key  中 指 定 区 间 内 的 元 素 ， 区 间 以 偏 移量 start 和 stop 指定。（从左至右）<br>下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。-1 表示最后一个元素</p></blockquote><blockquote><pre><code>LPOP key</code></pre><p>移除并返回列表 key 的头元素。（从列表key的左边开始弹出元素）</p><pre><code>RPOP key</code></pre><p>移除并返回列表 key 的尾元素。（从列表key的右边开始弹出元素）</p></blockquote><p><code>备注：</code></p><blockquote><p>同向为栈，异向为队列<br>栈（lpush  lpop  ； rpush  rpop）</p><p>队列（lpush  rpop ； rpush   lpop  ）</p><p>ArrayList : 数组（查找快，增删慢）<br>LinkList  : 链表（查找慢，增删快）</p></blockquote><blockquote><pre><code>LINDEX key index</code></pre><p>返回列表 key 中，下标为 index 的元素。<br>下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。<br>你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推</p></blockquote><blockquote><pre><code>LLEN key</code></pre><p>返回列表 key 的长度。<br>如果 key 不存在，则 key 被解释为一个空列表，返回 0 .</p><pre><code>LREM key count value</code></pre><p>根据参数 count 的值，移除列表中与参数 value 相等的元素。<br>count 的值可以是以下几种：<br>count &gt; 0 : 从表头开始向表尾搜索，移除与 value 相等的元<br>素，数量为 count 。<br>count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元<br>素，数量为 count 的绝对值。<br>count = 0 : 移除表中所有与 value 相等的值。</p></blockquote><blockquote><pre><code>LTRIM key start stop</code></pre><p>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，</p><p>不在指定区间之内的元素都将被删除。<br>举 个 例 子 ， 执 行 命 令 LTRIM list 0 2 ， 表 示 只 保 留 列表 list 的前三个元素，其余元素全部删除</p></blockquote><blockquote><pre><code>RPOPLPUSH source  destination</code></pre><p>命令 RPOPLPUSH 在一个原子时间内，执行以下两个动作：<br>将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。将 source  弹 出 的 元 素 插 入 到 列 表 destination  ， 作为 destination 列表的的头元素。<br>举 个 例 子 ， </p><p>你 有 两 个 列表 source  和 destination  ， source  列 表 有 元素 a, b, c ， destination 列表有元素 x, y, z ，执行 RPOPLPUSH sourcedestination 之后， source 列表包含元素 a, b ， destination 列表包含元素 c, x, y, z ，并且元素 c 会被返回给客户端。</p></blockquote><blockquote><pre><code>LSET key index value</code></pre><p>将列表 key 下标为 index 的元素的值设置为 value 。<br>当 index 参数超出范围，或对一个空列表( key 不存在)进行 LSET 时，返回一个错误。</p></blockquote><blockquote><pre><code>LINSERT key BEFORE|AFTER pivot value</code></pre><p>将值 value 插入到列表 key 当中，位于值 pivot 之前或之后。<br>当 pivot 不存在于列表 key 时，不执行任何操作。<br>当 key 不存在时， key 被视为空列表，不执行任何操作。</p></blockquote><h2 id="5、Set操作"><a href="#5、Set操作" class="headerlink" title="5、Set操作"></a>5、Set操作</h2><blockquote><pre><code>SADD key member [member ...]</code></pre><p>将一个或多个 member 元素加入到集合 key 当中（无序），已经存在于集合的 member 元素将被忽略。<br>假如 key 不存在，则创建一个只包含 member 元素作成员的集合。</p></blockquote><blockquote><pre><code>SMEMBERS key</code></pre><p>返回集合 key 中的所有成员。</p><p>不存在的 key 被视为空集合。</p><pre><code>SISMEMBER key member</code></pre><p>判断 member 元素是否是集合 key 的成员。</p></blockquote><blockquote><pre><code>SCARD key</code></pre><p>返回集合 key 的基数(集合中元素的数量)。</p></blockquote><blockquote><pre><code>SREM key member [member ...]</code></pre><p>移 除 集 合 key 中 的 一 个 或 多 个 member 元 素 ， 不 存 在的 member 元素会被忽略。</p><pre><code>SPOP key （抽奖场景）</code></pre><p>移除并返回集合中的一个随机元素。<br>如果只想获取一个随机元素，但不想该元素从集合中被移除的话，可以使用 SRANDMEMBER 命令。</p><pre><code>SMOVE source destination member</code></pre><p>将 member 元素从 source 集合移动到 destination 集合。<br>SMOVE 是原子性操作。<br>如果 source 集合不存在或不包含指定的 member 元素，<br>则 SMOVE 命令不执行任何操作，仅返回 0 。否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。<br>当 destination 集合已经包含 member 元素时， SMOVE 命令只是简单地将 source 集合中的 member 元素删除。<br>当 source 或 destination 不是集合类型时，返回一个错误。</p></blockquote><blockquote><pre><code>SDIFF key [key ...]</code></pre><p>求差集：从第一个 key 的集合中去除其他集合和自己的交集部分</p><p>sdiff求两个set的差集，有先后顺序，以靠前的为基准，列出前一个set有的，而后一个set没有的元素</p></blockquote><blockquote><pre><code>SINTER key [key  ...] （微博求共同关注场景）</code></pre><p>返回一个集合的全部成员，该集合是所有给定集合的交集。<br>不存在的 key 被视为空集。<br>当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。</p><pre><code>SUNION key [key ...]</code></pre><p>返回一个集合的全部成员，该集合是所有给定集合的并集。<br>不存在的 key 被视为空集。</p></blockquote><h2 id="6、Sorted-set操作"><a href="#6、Sorted-set操作" class="headerlink" title="6、Sorted set操作"></a>6、Sorted set操作</h2><p>类似 Sets,但是每个字符串元素都关联到一个叫 score 浮动数值。里面的元素总是通过 score 进行着排序，所以不同的是，它是可以检索的一系列元素。</p><p><code>注意：</code></p><blockquote><p>在 set 基础上，加上 score 值，</p><p>之前 set 是key value1 value2….<br>现在 Zset 是 key score1 value1 score2 value2</p></blockquote><blockquote><pre><code>ZADD key score member [[score member][score member] ...]</code></pre><p>将 一 个 或 多 个 member 元 素 及 其 score 值 加 入 到 有 序集 key 当中。</p><p><code>显示</code></p><p>redis&gt; ZADD page_rank 9 baidu.com 8 bing.com 10 google.com<br>(integer) 2<br>redis&gt; ZRANGE page_rank 0 -1 WITHSCORES</p><ol><li>“bing.com”</li><li>“8”</li><li>“baidu.com”</li><li>“9”</li><li>“google.com”</li><li>“10”</li></ol></blockquote><blockquote><pre><code>ZRANGE key start stop [WITHSCORES]</code></pre><p>返回有序集 key 中，指定区间内的成员。<br>其中成员的位置按 score 值递增(从小到大)来排序。<br>具有相同 score 值的成员按字典序(lexicographical order )来排列。<br>如果你需要成员按 score 值递减(从大到小)来排列，请使用 ZREVRANGE 命令。<br>下标参数 start 和 stop 都以 0 为底，</p><p>也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。<br>你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。<br>超出范围的下标并不会引起错误。<br>比 如 说 ， 当 start 的 值 比 有 序 集 的 最 大 下 标 还 要 大 ， 或是 start &gt; stop 时， ZRANGE 命令只是简单地返回一个空列表。<br>另一方面，假如 stop 参数的值比有序集的最大下标还要大，那么Redis 将 stop 当作最大下标来处理。<br>可以通过使用 WITHSCORES 选项，来让成员和它的 score 值一并返回，</p><p>返回列表以 value1,score1, …, valueN,scoreN 的格式表示。</p></blockquote><blockquote><pre><code>ZREVRANGE key start stop [WITHSCORES]( ( 音乐排行榜场景) )</code></pre><p>返回有序集 key 中，指定区间内的成员。<br>其中成员的位置按 score 值递减(从大到小)来排列。</p></blockquote><blockquote><pre><code>ZREM key member [member ...]</code></pre><p>移除有序集 key 中的一个或多个成员，不存在的成员将被忽略。</p><pre><code>ZREMRANGEBYSCORE key min max</code></pre><p>移除有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。</p></blockquote><blockquote><pre><code>ZSCORE key member</code></pre><p>返回有序集 key 中，成员 member 的 score 值。</p><pre><code>ZCARD key</code></pre><p>返回有序集 key 的基数（包含的元素的个数）。</p><pre><code>ZCOUNT key min max</code></pre><p>返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量。</p><pre><code>ZRANK key member</code></pre><p>返回有序集 key 中，成员 member 的 score 值。<br>ZCARD key<br>返回有序集 key 的基数（包含的元素的个数）。<br>ZCOUNT key min max<br>返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量。<br>ZRANK key member</p><p>返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递增(从小到大)顺序排列。</p></blockquote><h2 id="7、-Hash-操作-（散列）"><a href="#7、-Hash-操作-（散列）" class="headerlink" title="7、 Hash  操作  （散列）"></a>7、 Hash  操作  （散列）</h2><p>KV 模式不变，但是 V 是一个键值对</p><blockquote><pre><code>HSET key field value</code></pre><p>将哈希表 key 中的域 field 的值设为 value 。</p></blockquote><blockquote><pre><code>HGET key field</code></pre><p>返回哈希表 key 中给定域 field 的值。</p></blockquote><blockquote><pre><code>HMSET key field value [field value ...]</code></pre><p>同时将多个 field-value (域-值)对设置到哈希表 key 中。<br>此命令会覆盖哈希表中已存在的域。</p><pre><code>HMGET key field [field ...]</code></pre><p>返回哈希表 key 中，一个或多个给定域的值。</p><pre><code>HGETALL key</code></pre><p>返回哈希表 key 中，所有的域和值。</p></blockquote><blockquote><pre><code>HKEYS key</code></pre><p>返回哈希表 key 中的所有域。</p><pre><code>HVALS key</code></pre><p>返回哈希表 key 中所有域的值。</p></blockquote><blockquote><pre><code>HSETNX key field value</code></pre><p>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在。<br>若域 field 已经存在，该操作无效。</p></blockquote><blockquote><pre><code>HEXISTS key field</code></pre><p>查看哈希表 key 中，给定域 field 是否存在。</p></blockquote><blockquote><pre><code>HDEL key field [field ...]</code></pre><p>删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。</p></blockquote><blockquote><pre><code>HINCRBY key field increment</code></pre><p>为哈希表 key 中的域 field 的值加上增量 increment 。<br>增量也可以为负数，相当于对给定域进行减法操作。</p></blockquote><blockquote><pre><code>HINCRBYFLOAT key field increment</code></pre><p>增加浮点数<br>场景：用户维度统计<br>统计数包括：关注数、粉丝数、喜欢商品数、发帖数<br>用户为 Key，不同维度为 Field，Value 为统计数</p></blockquote><h1 id="五、Redis-的持久化"><a href="#五、Redis-的持久化" class="headerlink" title="五、Redis 的持久化"></a>五、Redis 的持久化</h1><h2 id="1、Redis-持久化方式"><a href="#1、Redis-持久化方式" class="headerlink" title="1、Redis  持久化方式"></a>1、Redis  持久化方式</h2><ul><li><p>RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot）。</p></li><li><p>AOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 </p><p>AOF 文件中的命令全部以 Redis协议的格式来保存，新命令会被追加到文件的末尾。 </p><p>Redis 还可以在后台对 AOF 文件进行重写（rewrite），使得 AOF 文件的体积不会超出保<br>存数据集状态所需的实际大小。</p></li><li><p>Redis 还可以同时使用 AOF 持久化和 RDB 持久化。 </p><p>在这种情况下， 当 Redis 重启时， 它会优先使用 AOF 文件来还原数据集， </p><p>因为 AOF 文件保存的数据集通常比 RDB 文件所保存的数据集更完整。</p></li><li><p>你甚至可以关闭持久化功能，让数据只在服务器运行时存在。</p></li></ul><h2 id="2、Rdb"><a href="#2、Rdb" class="headerlink" title="2、Rdb:"></a>2、Rdb:</h2><p>（1）在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的 snapshot 快照，它恢复时就是将快照文件直接读到内存里。</p><p>Rdb 保存的是 dump.rdb 文件</p><p>（2）如何触发 RDB 快照</p><p>Save：save 时只管保存，其他不管，全部阻塞。<br>Bgsave：redis 会在后台进行快照操作，快照操作的同时还可以响应客户端的请求，可以通过 lastsave 命令获取最后一次成功执行快照的时间。</p><p>（3）如何停止</p><p>静态停止：将配置文件里的 RDB 保存规则改为 save “”<br>动态停止 ：</p><blockquote><p> config set save “ ”</p></blockquote><h2 id="3、AOF"><a href="#3、AOF" class="headerlink" title="3、AOF"></a>3、AOF</h2><p>(Append Only File)</p><p>（1）以日志的形式来记录每个写操作，将 redis 执行过的所有写指令记录下来(读操作不记录)。只许追加文件但不可以改写文件，redis 启动之初会读取该文件重新构建数据，换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次一完成数据恢复工作。<br>======APPEND ONLY MODE======<br>开启 aof ：appendonly yes (默认是 no)</p><p>（2）Aof  策略</p><p>Appendfsync 参数：</p><p>Always ：同步持久化 每次发生数据变更会被立即记录到磁盘，性能较差<br>但数据完整性较好。<br>Everysec： 出厂默认推荐，异步操作，每秒记录，如果一秒宕机，有数<br>据丢失<br>No：从不 fsync ：将数据交给操作系统来处理。更快，也更不安全的选<br>择。</p><p>（3）Rewrite</p><p><code>概念</code>：AOF 采用文件追加方式，文件会越来越来大为避免出现此种情况，<br>新增了重写机制，aof 文件的大小超过所设定的阈值时，redis 就会自动将 aof文件的内容压缩，只保留可以恢复数据的最小指令集，可以使用命令<br>bgrewirteaof。</p><p><code>触发机制</code>：redis 会记录上次重写的 aof 的大小，默认的配置当 aof 文件大小为上次 rewrite 后大小的一倍且文件大于 64M 触发。</p><p><code>重写原理：</code>aof 文件持续增长而大时，会 fork 出一条新进程来将文件重写<br>(也就是先写临时文件最后再 rename)，遍历新进程的内存中的数据，每条记录有一条 set 语句，重写 aof 文件的操作，并没有读取旧的的 aof 文件，而是将整个内存的数据库内容用命令的方式重写了一个新的 aof 文件，这点和快照有点类似。</p><blockquote><p>no-appendfsync-on-rewrite no : </p><p>重写时是否可以运用 Appendfsync 用默认 no 即可，保证数据安全</p><p>auto-aof-rewrite-percentage 倍数  设置基准值<br>auto-aof-rewrite-min-size   设置基准值大小</p></blockquote><p>（4）flushall<br>刷新内存中的数据，即清空数据<br>可通过删除aof文件中该操作的记录来恢复数据<br>rdb文件无法实现数据恢复</p><p>（5）aof 特点</p><p>aof优点：<br>可用于数据恢复<br>缺点：<br>体积大，速度慢</p><p>aof文件体积会越来越大</p><p>（6）aof文件优化<br>重写：当文件大小达到一定阈值，启动压缩文件</p><blockquote><p>netstat -anpt<br>查看所有端口的使用情况</p></blockquote><h2 id="4、备份-Redis-数据"><a href="#4、备份-Redis-数据" class="headerlink" title="4、备份 Redis  数据"></a>4、备份 Redis  数据</h2><p><code>建议：</code><br>创建一个定期任务（cron job）， 每小时将一个 RDB 文件备份到一个文件<br>夹， 并且每天将一个 RDB 文件备份到另一个文件夹。<br>确保快照的备份都带有相应的日期和时间信息， 每次执行定期任务脚本<br>时， 使用 find 命令来删除过期的快照： 比如说， 你可以保留最近 48 小时<br>内的每小时快照， 还可以保留最近一两个月的每日快照。<br>至少每天一次， 将 RDB 备份到你的数据中心之外， 或者至少是备份到你<br>运行 Redis 服务器的物理机器之外。</p><h1 id="六、Redis-主从复制"><a href="#六、Redis-主从复制" class="headerlink" title="六、Redis  主从复制"></a>六、Redis  主从复制</h1><h2 id="0、前情提要-1"><a href="#0、前情提要-1" class="headerlink" title="0、前情提要"></a>0、前情提要</h2><p>Redis 支持简单且易用的主从复制（master-slave replication）功能， 该功能可以让从服务器(slave server)成为主服务器(masterserver)的精确复制品 。</p><h2 id="1、关于-Redis-复制功能的几个重要方面："><a href="#1、关于-Redis-复制功能的几个重要方面：" class="headerlink" title="1、关于 Redis 复制功能的几个重要方面："></a>1、关于 Redis 复制功能的几个重要方面：</h2><ul><li>Redis 使用异步复制。</li><li>一个主服务器可以有多个从服务器。</li><li>不仅主服务器可以有从服务器， 从服务器也可以有自己的从服务器，<br>多个从服务器之间可以构成一个图状结构。</li><li>复制功能不会阻塞主服务器： 即使有一个或多个从服务器正在进行初次<br>同步， 主服务器也可以继续处理命令请求。不过， 在从服务器删除旧版本数据集并载入新版本数据集的那段时间内， 连接请求会被阻塞。</li><li>复制功能可以单纯地用于数据冗余（data redundancy）， 也可以通过让多个从服务器处理只读命令请求来提升扩展性（scalability）： 比如说， 繁重的 SORT 命令可以交给附属节点去运行。</li></ul><h2 id="2、从服务器配置"><a href="#2、从服务器配置" class="headerlink" title="2、从服务器配置"></a>2、从服务器配置</h2><p>方式一：编辑配置文件</p><p>（永久生效）</p><blockquote><p>添加主服务器的IP</p><p>slaveof 192.168.198.128 6379</p></blockquote><p>方式二：调用 SLAVEOF 命令，输入主服务器的 IP 和端口，然后同步就会开始</p><p><code>前提：</code>主从服务器的redis-server均启动了</p><p>（仅适用于当前线程的服务，同步时，会将自己原来的key值数据清空，并且在主服务器页面会显示关于从服务器的日志信息）</p><blockquote><p>127.0.0.1:6379&gt; SLAVEOF 192.168.198.128 6379</p></blockquote><p>若想取消该服务器的主从关系，使用如下命令，且还会保存当前数据</p><blockquote><p>127.0.0.1:6379&gt; SLAVEOF no one</p></blockquote><p>连接远程节点的redis服务（端口默认为6379）</p><blockquote><p>redis-cli -h 192.168.198.128 </p></blockquote><h2 id="3、只读服务器"><a href="#3、只读服务器" class="headerlink" title="3、只读服务器"></a>3、只读服务器</h2><p>从 Redis 2.6 开始， 从服务器支持<code>只读模式</code>， 并且该模式为从服务器的默认模式。<br>  只读模式配置</p><blockquote><p>方式一：由 redis.conf 文件中的 slave-read-only 选项控制</p><p>slave-read-only yes</p><p>方式二：通过 CONFIG SET 命令来开启或关闭这个模式</p></blockquote><p>  只读从服务器会拒绝执行任何写命令， 所以不会出现因为操作失误而将数据不小心写入到了从服务器的情况。</p><p>  另外，对一个从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。</p><p>  利用『 SLAVEOF NO ONE 不会丢弃同步所得数据集』这个特性，可以在主服务器失败的时候，将从属服务器用作新的主服务器，从而实现无间断运行。</p><h2 id="4、从服务器相关配置："><a href="#4、从服务器相关配置：" class="headerlink" title="4、从服务器相关配置："></a>4、从服务器相关配置：</h2><p>设置密码：</p><p>​     主服务器：</p><blockquote><p>通过 requirepass 选项设置密码</p></blockquote><p>​     从服务器：</p><p>方式一：</p><blockquote><p>服务器正在运行，使用客户端输入以下命令：<br>config set masterauth <password></password></p></blockquote><p>方式二：</p><blockquote><p>将它加入到配置文件中：<br>masterauth <password></password></p></blockquote><h2 id="5、主服务器配置"><a href="#5、主服务器配置" class="headerlink" title="5、主服务器配置"></a>5、主服务器配置</h2><p>只在有至少 N  个从服务器的情况下，才执行写操作</p><p>从 Redis 2.8 开始， 为了保证数据的安全性，可以通过配置， 让主服务器只在有至少 N 个当前已连接从服务器的情况下， 才执行写命令。</p><blockquote><p>min-slaves-to-write <number of slaves><br>min-slaves-max-lag <number of seconds></number></number></p></blockquote><p>至少有 min-slaves-to-write 个从服务器， 并且这些服务器的延迟值都少于 min-slaves-max-lag 秒， 那么主服务器就会执行客户端请求的写操作。</p><h1 id="七、Redis-sentinel-哨兵"><a href="#七、Redis-sentinel-哨兵" class="headerlink" title="七、Redis-sentinel( 哨兵)"></a>七、Redis-sentinel( 哨兵)</h1><h2 id="0、前情提要-2"><a href="#0、前情提要-2" class="headerlink" title="0、前情提要"></a>0、前情提要</h2><p>Redis 的 Sentinel 系统用于管理多个 Redis 服务器，该系统执行以下三个任务：</p><ul><li><p>监控（Monitoring）： Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。</p></li><li><p>提醒（Notification）： 当被监控的某个 Redis 服务器出现问题时，Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。</p></li><li><p>自动故障迁移（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作， 它会将失效主服务器的其中一个从服务器升级为新的主服务器， 并让失效主服务器的其他从服务器改为复制新的主服务器； 当客户端试图连接失效的主服务器时，集群也会向客户端返回新主服务器的地址， 使得集群可以使用新主服务器代替失效服务器。</p></li><li><p>Redis Sentinel 是一个分布式系统，你可以在一个架构中运行多个 Sentinel 进程， 这些进程使用流言协议（gossipprotocols)来接收关于主服务器是否下线的信息， 并使用投票协议（agreement protocols）来决定是否执行自动故障迁移，以及选择哪个从服务器作为新的主服务器。</p></li></ul><h2 id="1、启动-Sentinel"><a href="#1、启动-Sentinel" class="headerlink" title="1、启动 Sentinel"></a>1、启动 Sentinel</h2><p>方式一：</p><p>对于 redis-sentinel 程序， 可以用以下命令来启动Sentinel 系统：</p><blockquote><p>redis-sentinel  /path/to/sentinel.conf</p></blockquote><p>方式二：</p><p>对于 redis-server 程序， 你可以用以下命令来启动一个运行在 Sentinel 模式下的 Redis 服务器：</p><blockquote><p>redis- - server /path/to/sentinel.conf  – sentinel</p></blockquote><p><code>注意：</code></p><blockquote><p>启动 Sentinel 实例必须指定相应的配置文件， 系统会使用配置文件来保存 Sentinel 的当前状态， 并在 Sentinel 重启时通过载入配置文件来进行状态还原。如果启动 Sentinel 时没有指定相应的配置文件， 或者指定的配置文件不可写（not writable）， 那么 Sentinel 会拒绝启动。</p></blockquote><h2 id="2-、配置-Sentinel"><a href="#2-、配置-Sentinel" class="headerlink" title="2  、配置 Sentinel"></a>2  、配置 Sentinel</h2><p>Redis 源码中包含了一个名为 sentinel.conf 的文件，这个文件是一个带有详细注释的 Sentinel 配置文件示例。<br>运行一个 Sentinel 所需的最少配置如下所示：</p><pre><code>sentinel monitor mymaster  192.168.198.128 6379 2 sentinel down-after-milliseconds mymaster 30000sentinel failover-timeout mymaster 180000sentinel parallel-syncs mymaster 1protected-mode no / bind  本机  IP</code></pre><p><code>注意：</code>主服务器无密码时，记得在 sentinel 配置里配上bind 本机 ip ，或者关掉保护模式 protected-mode no</p><p><code>配置解释：</code></p><blockquote><p>第一行配置指示 Sentinel 去监视一个名为 mymaster 的主服务器， 这个主服务器的 IP 地址为 127.0.0.1 ， 端口号为 6379 ， 而将这个主服务器判断为失效至少需要 2 个Sentinel 同意 （只要同意 Sentinel 的数量不达标，自动故障迁移就不会执行）。</p></blockquote><blockquote><p>down-after-milliseconds 选项</p><p>指定了 Sentinel 认为服务器已经断线所需的毫秒数。</p><p>如果服务器在给定的毫秒数之内， 没有返回 Sentinel发送的 PING 命令的回复， 或者返回一个错误， 那么 Sentinel 将这个服务器标记为主观下线</p></blockquote><blockquote><p>parallel-syncs 选项指定了在执行故障转移时， 最多可以有多少个从服务器同时对新的主服务器进行同步， 这个数字越小， 完成故障转移所需的时间就越长。</p><p>你可以通过将这个值设为 1 来保证每次只有一个从服务器处于不能处理命令请求的状态。</p></blockquote><h1 id="八、Redis集群"><a href="#八、Redis集群" class="headerlink" title="八、Redis集群"></a>八、Redis集群</h1><h2 id="1-集群简介"><a href="#1-集群简介" class="headerlink" title="1  集群简介"></a>1  集群简介</h2><p>Redis 集群可以在多个 Redis 节点之间进行数据共享；</p><p>Redis 集群不支持那些需要同时处理多个键的 Redis 命令；</p><p>因为执行这些命令需要在多个 Redis 节点之间移动数据， 并且在高负载的情况下， 这些命令将降低 Redis 集群的性能， 并导致不可预测的行为。比如：有 name1 和 name2 两个节点，命令 del name1 name2 要同时删除这个 key,就不能写在一起，得<br>分开写。</p><p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p><p>Redis 集群提供了以下两个好处：</p><ul><li>将数据自动切分（split）到多个节点的能力。</li><li>当集群中的一部分节点失效或者无法进行通讯时， 仍然可以继续处理命令请求的能力。</li></ul><h2 id="2-集群数据共享"><a href="#2-集群数据共享" class="headerlink" title="2  集群数据共享"></a>2  集群数据共享</h2><p>Redis 集群使用数据分片（sharding）而非一致性哈希来实现： 一个 Redis 集群包含 16384 个哈希槽（hash slot），数据库中的每个键都属于这 16384 个哈希槽的其中一个， 集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16校验和 。</p><p>集群中的每个节点负责处理一部分哈希槽。 </p><p>举个例子， 一个集群可以有三个哈希槽， 其中：<br> 节点 A 负责处理 0 号至 5500 号哈希槽。<br> 节点 B 负责处理 5501 号至 11000 号哈希槽。<br> 节点 C 负责处理 11001 号至 16384 号哈希槽。</p><p>这种将哈希槽分布到不同节点的做法使得用户可以很容易地向集群中添加或者删除节点。 比如说：<br> 如果用户将新节点 D 添加到集群中， 那么集群只需要将节点A 、B 、 C 中的某些槽移动到节点 D 就可以了。<br> 与此类似， 如果用户要从集群中移除节点 A ， 那么集群只需要将节点 A 中的所有哈希槽移动到节点 B 和节点 C ， 然后再移除空白（不包含任何哈希槽）的节点 A 就可以了。因为将一个哈希槽从一个节点移动到另一个节点不会造成节点阻塞， 所以无论是添加新节点还是移除已存在节点， 又或者改变某个节点包含的哈希槽数量， 都不会造成集群下线。</p><p>3  集群的主从复制：<br>为了使得集群在一部分节点下线或者无法与集群的大多数节<br>点进行通讯的情况下， 仍然可以正常运作， Redis 集群对节点<br>使用了主从复制功能： 集群中的每个节点都有 1 个至 N 个复制<br>品，其中一个复制品为主节点， 而其余的 N-1 个复制品为从<br>节点。<br>在之前列举的节点 A 、B 、C 的例子中， 如果节点 B 下线<br>了， 那么集群将无法正常运行， 因为集群找不到节点来处理<br>5501 号至 11000 号的哈希槽。<br>另一方面， 假如在创建集群的时候（或者至少在节点 B 下<br>线之前）， 我们为主节点 B 添加了从节点 B1 ， 那么当主节点<br>B 下线的时候， 集群就会将 B1 设置为新的主节点， 并让它代</p><h2 id="5-集群搭建"><a href="#5-集群搭建" class="headerlink" title="5  集群搭建"></a>5  集群搭建</h2><p>要让集群正常运作至少需要 3 个主节点， 不过在刚开始试用集群功能时， 强烈建议使用六个节点：</p><p>其中三个为主节点，而其余三个则是各个主节点的从节点。<br>集群规划：3 个主节点，3 个从节点。<br>配置文件：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">port</span> <span class="token attr-value">7000</span><span class="token comment" spellcheck="true">##cluster-enabled 选项用于开实例的集群模式</span><span class="token attr-name">cluster-enabled</span> <span class="token attr-value">yes</span><span class="token comment" spellcheck="true">##cluster-conf-file 选项则设定了保存节点配置文件的路</span><span class="token comment" spellcheck="true">##径， 默认值为 nodes.conf</span><span class="token attr-name">cluster-config-file</span> <span class="token attr-value">nodes.conf</span><span class="token attr-name">cluster-node-timeout</span> <span class="token attr-value">5000</span><span class="token attr-name">appendonly</span> <span class="token attr-value">yes</span><span class="token attr-name">daemonize</span> <span class="token attr-value">yes</span><span class="token attr-name">protected-mode</span> <span class="token attr-value">no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 内存数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统环境 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Storm学习</title>
      <link href="/2019/01/29/Storm%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/29/Storm%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Storm简介"><a href="#一、Storm简介" class="headerlink" title="一、Storm简介"></a>一、Storm简介</h1><p>官网：<a href="http://storm.apache.org/">Storm</a></p><h2 id="1、Storm-："><a href="#1、Storm-：" class="headerlink" title="1、Storm ："></a>1、Storm ：</h2><p>流式计算处理框架</p><h2 id="2、-特点："><a href="#2、-特点：" class="headerlink" title="2、 特点："></a>2、 特点：</h2><ul><li><p>实时</p></li><li><p>分布式</p></li><li><p>高容错</p></li><li><p>storm常驻内存（7*24h:意味着永久运行，需人为关闭）</p><ul><li><p>在Web UI 界面点击kill</p></li><li><p>命令kill</p><pre><code>bin/storm kill &lt;topologyName&gt;</code></pre></li></ul></li></ul><ul><li>数据不经过磁盘，在内存中处理</li><li>高可靠性：异常处理、消息可靠性保障机制</li><li>可维护性：StormUI图形化监控接口 </li></ul><h2 id="3、应用"><a href="#3、应用" class="headerlink" title="3、应用"></a>3、应用</h2><p>（1）流式处理：（异步）</p><p>​     客户端提交数据进行计算，并不会等待计算结果</p><p>举例：</p><ul><li><p>逐条处理：ETL（用于数据清洗）</p></li><li><p>统计分析</p><ul><li><p>例：计算PV、UV、访问热点 以及 某些数据的聚合、 加和、平均等等</p><ul><li><p>客户端提交数据以后，计算完成结果存储到redis 、 hbase 、 MySQL或其他MQ中</p></li><li><p>客户端并不关心最终结果是多少</p></li></ul></li></ul></li></ul><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g1s4bm9fv3j30wj04et90.jpg"></p><p>（2）实时请求应答服务：（同步）</p><p>   客户端提交数据后，等待取得计算结果并返回给客户端</p><p>Drpc机制</p><p>举例：</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g1s4blxd7vj30tv07pdg6.jpg"></p><h1 id="二、Storm架构"><a href="#二、Storm架构" class="headerlink" title="二、Storm架构"></a>二、Storm架构</h1><p>（从进程角度）</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g1s3u2sboxj30gw0cs0tr.jpg"></p><h2 id="1、nimbus-主"><a href="#1、nimbus-主" class="headerlink" title="1、nimbus : (主)"></a>1、nimbus : (主)</h2><p>接收客户端提交的请求；</p><p>资源调度、任务分配、接收jar包</p><h2 id="2、supervisor：-从"><a href="#2、supervisor：-从" class="headerlink" title="2、supervisor：(从)"></a>2、supervisor：(从)</h2><p>– 接收nimbus分配的任务、启停worker（当前supervisor上worker数量由配置文件设定）</p><p>– 默认配置4个work进程</p><h2 id="3、worker"><a href="#3、worker" class="headerlink" title="3、worker"></a>3、worker</h2><p>– 运行具体处理运算组件的进程（每个Worker对应执行一个Topology的子集）<br>– worker任务类型，即spout任务、bolt任务两种<br>– 启动executor<br>（executor即worker JVM进程中的一个java线程，一般默认每个executor负责执行一个task任务）</p><p>– 与_ack 个数一致</p><h2 id="4、zookeeper"><a href="#4、zookeeper" class="headerlink" title="4、zookeeper"></a>4、zookeeper</h2><p>– 负责主从的通信</p><p>– 存储心跳信息、任务信息</p><p>– 实现主从的解耦，使nimbus对备份要求不高</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g1s3u2wb3yj30ib0c0400.jpg"></p><h1 id="三、Storm编程模型"><a href="#三、Storm编程模型" class="headerlink" title="三、Storm编程模型"></a>三、Storm编程模型</h1><p><img src="https://upload-images.jianshu.io/upload_images/2826805-0fdf7e8af9608fce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p><img src="images/storm3.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g1s4bm1hivj30o70e7q3y.jpg"></p><h2 id="1、Topology"><a href="#1、Topology" class="headerlink" title="1、Topology"></a>1、<strong>Topology</strong></h2><p>（DAG有向无环图的实现）</p><blockquote><p>是对Storm实时计算逻辑的封装，由一系列通过数据流相互关联的Spout、Bolt组成的拓扑结构</p></blockquote><blockquote><p>生命周期：</p><p>此拓扑结构只要启动，就会在集群中一直运行，直到手动将其kill，否则不会终止。</p><p>（与MapReduce中Job的区别，MR中Job在计算完成后就会终止）</p></blockquote><h2 id="2、spout"><a href="#2、spout" class="headerlink" title="2、spout"></a>2、<strong>spout</strong></h2><p>（数据源：发送数据）</p><blockquote><p>一般会从指定的数据源读取元祖（Tuple）发送到拓扑（Topology）中</p><ul><li><p>一个Spout可以发送多个Stream</p><p>（通过OutputFieldDeclare的declare方法声明不同的数据流，发送数据时通过SpoutOutputCollector中的emit方法指定 StreamId将数据发送出去）</p></li><li><p>Spout中的核心方法是nextTuple，该方法会被Storm线程不断调用、主动从数据源拉取数据、再通过emit方法将数据生成元祖（Tuple）发送给之后的Bolt计算</p></li></ul></blockquote><h2 id="3、bolt"><a href="#3、bolt" class="headerlink" title="3、bolt"></a>3、<strong>bolt</strong></h2><p>（数据处理组件：计算数据，个数不限）</p><blockquote><p>单个Bolt可实现简单的任务或数据流转换</p><p>复杂的场景需要多个Bolt分多个步骤完成</p><ul><li><p>一个Bolt可以发送多个Stream</p><p>（通过OutputFieldDeclare的declare方法声明不同的数据流，发送数据时通过SpoutOutputCollector中的emit方法指定 StreamId将数据发送出去）</p></li><li><p>Bolt中的核心方法是execute，该方法通过接收一个元组数据、实现核心业务逻辑</p></li></ul></blockquote><h2 id="4、tuple"><a href="#4、tuple" class="headerlink" title="4、tuple"></a>4、<strong>tuple</strong></h2><p>（Stream中最小的数据组成单位）</p><h2 id="5、Stream"><a href="#5、Stream" class="headerlink" title="5、Stream"></a>5、<strong>Stream</strong></h2><p>（数据流）</p><blockquote><ul><li>从Spout中传递数据给Bolt、上一个Bolt传递数据给下一个Bolt，这样形成的数据通道叫做Stream</li></ul><ul><li>Stream声明时需要给其指定Id（默认为Default，实际开发中多使用单一数据流，无需指定StreamId）</li></ul></blockquote><h2 id="6、Stream-Grouping"><a href="#6、Stream-Grouping" class="headerlink" title="6、Stream Grouping"></a>6、<strong>Stream Grouping</strong></h2><p>– 数据流分组（即数据分发策略）</p><h2 id="7、-数据传输"><a href="#7、-数据传输" class="headerlink" title="7、 数据传输"></a>7、 数据传输</h2><p>– ZMQ<br>​             – ZeroMQ 开源的消息传递框架，并不是一个MessageQueue<br>– Netty<br>​            – Netty是基于NIO的网络框架，更加高效。（之所以Storm 0.9版本之后使用Netty，是因为ZMQ的license和Storm的license不兼容。）</p><h1 id="四、Storm安装部署"><a href="#四、Storm安装部署" class="headerlink" title="四、Storm安装部署"></a>四、Storm安装部署</h1><h2 id="完全分布式"><a href="#完全分布式" class="headerlink" title="完全分布式"></a>完全分布式</h2><p>环境：zookeeper集群（node00，node01，node02）</p><p>1、解压安装</p><p>版本：apache-storm-0.10.0.tar.gz</p><pre class="line-numbers language-shell"><code class="language-shell">tar -zvxf apache-storm-0.10.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、在storm目录中创建logs目录</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、编辑配置文件解压路径/config/storm.yaml</p><pre><code>storm.zookeeper.servers:- &quot;node00&quot;- &quot;node01&quot;- &quot;node02&quot;storm.local.dir: &quot;/opt/storm&quot;nimbus.host: “node00&quot;supervisor.slots.ports:- 6700- 6701- 6702- 6703</code></pre><p>将安装包发送到其他节点</p><p>4、启动服务</p><p>（1）启动zookeeper‘</p><pre><code>zkServer.sh start</code></pre><p>（2）启动nimbus（在node00上：storm安装目录下）</p><pre><code>nohup ./bin/storm nimbus &gt;&gt; ./logs/nimbus.out 2&gt;&amp;1 &amp;</code></pre><p><code>nohup</code>:防止被操作系统意外挂起</p><p><code>2&gt;&amp;1</code>：标准错误输出重定向</p><p><code>&amp;</code>：后台运行</p><p>（3）启动supervisor（在node01 ，node02上：storm安装目录下）</p><pre><code>./bin/storm supervisor&gt;&gt; ./logs/supervisor.out 2&gt;&amp;1 &amp;</code></pre><p>（4） 启动Logviewer</p><pre class="line-numbers language-shell"><code class="language-shell"> ./bin/storm logviewer &<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>UI界面查看：</p><p> 查看日志：<a href="http://node00:8000/log?file=wc-1-1523947796-worker-6703.log">http://node00:8000/log?file=wc-1-1523947796-worker-6703.log</a></p><p>（5）查看进程 ：jps</p><p>显示：</p><p>node00：</p><blockquote><p>[root@node00 apache-storm-0.10.0]# jps<br>8869 QuorumPeerMain<br>9093 Jps<br>9083 config_value</p></blockquote><p>node01 、 node02</p><blockquote><p>[root@node01 apache-storm-0.10.0]# jps<br>7280 config_value<br>7290 Jps<br>7230 QuorumPeerMain</p></blockquote><p>且三个节点的logs目录下也相应的生成了指定的日志文件</p><p>5、Storm UI（从浏览器访问，在前台页面上查看详情）</p><p>（1）启动服务（可在node00节点：storm安装目录）</p><pre class="line-numbers language-shell"><code class="language-shell">./bin/storm ui >> ./logs/ui.out 2>&1 &<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）浏览器访问（Storm UI在哪台节点启动，就访问哪台节点）</p><blockquote><p><a href="http://node00:8080/">http://node00:8080</a></p></blockquote><p>6、运行jar</p><pre class="line-numbers language-shell"><code class="language-shell">##查看帮助bin/storm -h##查看指定命令的帮助bin/storm  help jar##运行jar包bin/storm jar <jar包所在路径> <包名+类名> <参数：topologyName><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="五、Storm重点概念详解"><a href="#五、Storm重点概念详解" class="headerlink" title="五、Storm重点概念详解"></a>五、Storm重点概念详解</h1><h2 id="1、Storm-Grouping-–-数据流分组（即数据分发策略）"><a href="#1、Storm-Grouping-–-数据流分组（即数据分发策略）" class="headerlink" title="1、Storm Grouping – 数据流分组（即数据分发策略）"></a>1、Storm Grouping – 数据流分组（即数据分发策略）</h2><p>• 1. Shuffle Grouping<br>– 随机分组，随机派发stream里面的tuple，保证每个bolt task接收到的tuple数目大致相同。<br>– 轮询，平均分配</p><p>• 2. Fields Grouping<br>– 按字段分组，比如，按”user-id”这个字段来分组，那么具有同样”user-id”的 tuple 会被分到相同的Bolt里的一个task， 而不同的”user-id”则可能会被分配到不同的task。</p><p>• 3. All Grouping<br>– 广播发送，对于每一个tuple，所有的bolts都会收到</p><p>• 4. Global Grouping<br>– 全局分组，把tuple分配给task id最低的task 。</p><pre class="line-numbers language-java"><code class="language-java">        TopologyBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"spout"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MySpout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//         shuffleGrouping其实就是随机往下游去发,不自觉的做到了负载均衡</span><span class="token comment" spellcheck="true">//        builder.setBolt("bolt", new MyBolt(),2).shuffleGrouping("spout");</span>        <span class="token comment" spellcheck="true">// fieldsGrouping其实就是MapReduce里面理解的Shuffle,根据fields求hash来取模</span><span class="token comment" spellcheck="true">//      builder.setBolt("bolt", new MyBolt(), 2).fieldsGrouping("spout", new Fields("session_id"));</span>        <span class="token comment" spellcheck="true">// 只往一个里面发,往taskId小的那个里面去发送</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">globalGrouping</span><span class="token punctuation">(</span><span class="token string">"spout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 等于shuffleGrouping</span><span class="token comment" spellcheck="true">//        builder.setBolt("bolt", new MyBolt(), 2).noneGrouping("spout");</span>        <span class="token comment" spellcheck="true">// 广播下游的所有task都能收到数据</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allGrouping</span><span class="token punctuation">(</span><span class="token string">"spout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>———————————————————-以上为常用grouping策略————————————————————–</p><p>• 5. None Grouping<br>– 不分组，这个分组的意思是说stream不关心到底怎样分组。目前这种分组和Shuffle grouping是一样的效果。<br>有一点不同的是storm会把使用none grouping的这个bolt放到这个bolt的订阅者同一个线程里面去执行（未来Storm如果可能的话会这样设计）。</p><p>• 6. Direct Grouping（很少用）<br>– 指向型分组， 这是一种比较特别的分组方法，用这种分组意味着消息（tuple）的发送者指定由消息接收者的那个task处理这个消息。只有被声明为 Direct Stream 的消息流可以声明这种分组方法。而且这种消息tuple必须使用 emitDirect 方法来发射。消息处理者可以通过 TopologyContext 来获取处理它的消息的task的id<br>(OutputCollector.emit方法也会返回task的id)</p><p>• 7. Local or shuffle grouping<br>– 本地或随机分组。如果目标bolt有一个或者多个task与源bolt的task在同一个工作进程中，tuple将会被随机发送给这些同进程中的tasks。否则，和普通的Shuffle Grouping行为一致</p><p>• 8.customGrouping<br>– 自定义，相当于mapreduce那里自己去实现一个partition一样。</p><h2 id="2、并发机制"><a href="#2、并发机制" class="headerlink" title="2、并发机制"></a>2、并发机制</h2><h3 id="1、-Worker-processes"><a href="#1、-Worker-processes" class="headerlink" title="1、 Worker processes"></a>1、 Worker processes</h3><ul><li>Worker – 进程<ul><li>一个Topology拓扑会包含一个或多个Worker（每个Worker进程只能从属于一个特定的Topology）、</li><li>这些Worker进程会并行跑在集群中不同的服务器上，即一个Topology拓扑其实是由并行运行在Storm集群中<br>多台服务器上的进程所组成</li></ul></li></ul><h3 id="2、Executors-threads"><a href="#2、Executors-threads" class="headerlink" title="2、Executors (threads)"></a>2、Executors (threads)</h3><ul><li>Executor – 线程<ul><li>Executor是由Worker进程中生成的一个线程</li><li>每个Worker进程中会运行拓扑当中的一个或多个Executor线程</li><li>一个Executor线程中可以执行一个或多个Task任务（默认每个Executor只执行一个Task任务），但是这些Task任务都是对应着同一个组件（Spout、Bolt）。</li></ul></li></ul><h3 id="3、Task"><a href="#3、Task" class="headerlink" title="3、Task"></a>3、Task</h3><ul><li>Tasks – 任务<ul><li>实际执行数据处理的最小单元</li><li>每个task即为一个Spout或者一个Bolt</li><li>Task数量在整个Topology生命周期中保持不变，Executor数量可以变化或手动调整</li><li>（默认情况下，Task数量和Executor是相同的，即每个Executor线程中默认运行一个Task任务）</li></ul></li></ul><h3 id="4、-设置Worker进程数"><a href="#4、-设置Worker进程数" class="headerlink" title="4、 设置Worker进程数"></a>4、 设置Worker进程数</h3><pre class="line-numbers language-java"><code class="language-java">Config<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token keyword">int</span> workers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、设置Executor线程数"><a href="#5、设置Executor线程数" class="headerlink" title="5、设置Executor线程数"></a>5、设置Executor线程数</h3><pre class="line-numbers language-java"><code class="language-java">TopologyBuilder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> IRichSpout spout<span class="token punctuation">,</span> Number parallelism_hint<span class="token punctuation">)</span>TopologyBuilder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> IRichBolt bolt<span class="token punctuation">,</span> Number parallelism_hint<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//其中， parallelism_hint即为executor线程数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6、-设置Task数量"><a href="#6、-设置Task数量" class="headerlink" title="6、 设置Task数量"></a>6、 设置Task数量</h3><pre class="line-numbers language-java"><code class="language-java">ComponentConfigurationDeclarer<span class="token punctuation">.</span><span class="token function">setNumTasks</span><span class="token punctuation">(</span>Number val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 例：共2 worker ， 3 excutor ， 5  task</span>Config conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>conf<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2 个work进程</span>TopologyBuilder topologyBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>topologyBuilder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"spout"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MySpout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1 个excutor线程 ， 1个 task</span>topologyBuilder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"green-bolt"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GreenBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 2 个excutor线程 ， </span><span class="token punctuation">.</span><span class="token function">setNumTasks</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 4  个task</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span>"blue<span class="token operator">-</span>spout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、-Rebalance-–-再平衡"><a href="#7、-Rebalance-–-再平衡" class="headerlink" title="7、 Rebalance – 再平衡"></a>7、 Rebalance – 再平衡</h3><p>– 即，动态调整Topology拓扑的Worker进程数量、以及Executor线程数量<br>• 支持两种调整方式：<br>– 1、通过Storm UI<br>– 2、通过Storm CLI</p><h4 id="通过Storm-CLI动态调整："><a href="#通过Storm-CLI动态调整：" class="headerlink" title="通过Storm CLI动态调整："></a>通过Storm CLI动态调整：</h4><p>– 例：</p><pre class="line-numbers language-shell"><code class="language-shell">bin/storm rebalance mytopology -n 5 -e blue-spout=3 -e yellow-bolt=10##将mytopology拓扑worker进程数量调整为5个##“ blue-spout ” 所使用的线程数量调整为3个##“ yellow-bolt ”所使用的线程数量调整为10个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、通信机制-–-Worker内部的消息传递机制"><a href="#3、通信机制-–-Worker内部的消息传递机制" class="headerlink" title="3、通信机制 – Worker内部的消息传递机制"></a>3、通信机制 – Worker内部的消息传递机制</h2><h4 id="•-Worker进程间的数据通信"><a href="#•-Worker进程间的数据通信" class="headerlink" title="• Worker进程间的数据通信"></a>• Worker进程间的数据通信</h4><p>– ZMQ<br>– ZeroMQ 开源的消息传递框架，并不是一个MessageQueue<br>– Netty<br>– Netty是基于NIO的网络框架，更加高效。（之所以Storm 0.9版本之后使用Netty，是因为ZMQ的license和Storm的license不兼容。）</p><h4 id="•-Worker内部的数据通信"><a href="#•-Worker内部的数据通信" class="headerlink" title="• Worker内部的数据通信"></a>• Worker内部的数据通信</h4><p>– Disruptor<br>– 实现了“队列”的功能。<br>– 可以理解为一种事件监听或者消息处理机制，即在队列当中一边由生产者放入消息数据，另一边消费者并行取出消息数据处理。</p><h2 id="4、容错机制"><a href="#4、容错机制" class="headerlink" title="4、容错机制"></a>4、容错机制</h2><h3 id="1、集群节点宕机"><a href="#1、集群节点宕机" class="headerlink" title="1、集群节点宕机"></a>1、集群节点宕机</h3><p>– Nimbus服务器<br>• 单点故障？<br>– 非Nimbus服务器<br>• 故障时，该节点上所有Task任务都会超时，Nimbus会将这些Task任务重新分配到其他服务器上运行</p><h3 id="2、进程挂掉"><a href="#2、进程挂掉" class="headerlink" title="2、进程挂掉"></a>2、进程挂掉</h3><p>– Worker<br>• 挂掉时，Supervisor会重新启动这个进程。如果启动过程中仍然一直失败，并且无法向Nimbus发送心跳，Nimbus会将该Worker重新分配到其他服务器上</p><p>– Supervisor<br>• 无状态（所有的状态信息都存放在Zookeeper中来管理），不影响已经在运行的worker，但是在当前节点worker如果挂掉就无法重启，可以在另一台supervisor节点重启worker<br>• 快速失败（每当遇到任何异常情况，都会自动毁灭）</p><p>– Nimbus<br>• 无状态（所有的状态信息都存放在Zookeeper中来管理）<br>• 快速失败（每当遇到任何异常情况，都会自动毁灭）</p><h3 id="3、消息的完整性"><a href="#3、消息的完整性" class="headerlink" title="3、消息的完整性"></a>3、消息的完整性</h3><p>– 从Spout中发出的Tuple，以及基于他所产生Tuple（例如上个例子当中Spout发出的句子，以及句子当中单词的tuple等）<br>– 由这些消息就构成了一棵tuple树<br>– 当这棵tuple树发送完成，并且树当中每一条消息都被正确处理，就表明spout发送消息被“完整处理”，即消息的完整性</p><h3 id="4、-Acker-–-消息完整性的实现机制"><a href="#4、-Acker-–-消息完整性的实现机制" class="headerlink" title="4、 Acker – 消息完整性的实现机制"></a>4、 Acker – 消息完整性的实现机制</h3><p>给每条数据添加唯一标记ID ， 对于每条数据的发送或接收，都响应给Acker ，通过异或（同为0 ， 异为1） 从而确认消息是否完整</p><p>– Storm的拓扑当中特殊的一些任务</p><p>– 负责跟踪每个Spout发出的Tuple的DAG（有向无环图）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//核心代码</span><span class="token comment" spellcheck="true">/*AckTest.class*/</span>        TopologyBuilder topologyBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        topologyBuilder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"ack"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">AckSpout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        topologyBuilder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"splitbolt"</span><span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">AckSplitBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"ack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        topologyBuilder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"countbolt"</span><span class="token punctuation">,</span>               <span class="token keyword">new</span> <span class="token class-name">AckCountBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fieldsGrouping</span><span class="token punctuation">(</span><span class="token string">"splitbolt"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Config conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">setMessageTimeoutSecs</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalCluster localCluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localCluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"acktest"</span><span class="token punctuation">,</span>conf<span class="token punctuation">,</span>topologyBuilder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*AckSpout.class*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AckSpout</span> <span class="token keyword">implements</span> <span class="token class-name">IRichSpout</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    SpoutOutputCollector collector<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//缓存map...</span>    Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>String<span class="token operator">></span> map <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> lines <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token string">"i love shsxt"</span><span class="token punctuation">,</span>            <span class="token string">"i hate you"</span><span class="token punctuation">,</span>            <span class="token string">"haha xixi xixi"</span><span class="token punctuation">,</span>            <span class="token string">"xidada is good"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// id 用以标志发送的每条数据</span>    <span class="token keyword">long</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>Map conf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> SpoutOutputCollector collector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> lines<span class="token punctuation">[</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        id<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     *  如果数据被完整处理，此时调用ack方法，并把msgid穿进去     * @param msgId     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ack</span><span class="token punctuation">(</span>Object msgId<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msgId <span class="token operator">+</span> <span class="token string">" 执行成功....并删除缓存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>msgId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果数据未被完整处理，即处理失败，则调用fail方法。     * 失败的时候从缓存map里重发数据     * @param msgId     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span>Object msgId<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行失败，重发...  msgid: "</span> <span class="token operator">+</span> msgId<span class="token punctuation">)</span><span class="token punctuation">;</span>        collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>msgId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>msgId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*AckSplitBolt.class*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AckSplitBolt</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRichBolt</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    OutputCollector collector <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> OutputCollector collector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> split<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//继续跟踪数据</span>            collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        collector<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      collector.fail(input);</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*AckCountBolt.class*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AckCountBolt</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRichBolt</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> resultMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    OutputCollector collector<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> OutputCollector collector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String word <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer integer <span class="token operator">=</span> resultMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>integer<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            integer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            integer<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        resultMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>word <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//告诉ack 此tuple接受成功</span>        collector<span class="token punctuation">.</span><span class="token function">ack</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、与MapReduce的区别"><a href="#5、与MapReduce的区别" class="headerlink" title="5、与MapReduce的区别"></a>5、与MapReduce的区别</h2><table><thead><tr><th align="center">Storm</th><th align="center">MapReduce</th></tr></thead><tbody><tr><td align="center">流式处理</td><td align="center">批处理</td></tr><tr><td align="center">（毫）秒级</td><td align="center">分钟级</td></tr><tr><td align="center">DAG模型</td><td align="center">Map+Reduce模型</td></tr><tr><td align="center">常驻内存运行</td><td align="center">反复启停</td></tr><tr><td align="center">进程、线程常驻内存运行，数据不进入磁盘，数据通过网络传递</td><td align="center">为TB、PB级别数据设计的批处理计算框架</td></tr></tbody></table><h2 id="6、和Spark-Streaming的区别"><a href="#6、和Spark-Streaming的区别" class="headerlink" title="6、和Spark Streaming的区别"></a>6、和Spark Streaming的区别</h2><table><thead><tr><th align="center">Storm</th><th align="center">Spark Streaming</th></tr></thead><tbody><tr><td align="center">流式处理</td><td align="center">微批处理</td></tr><tr><td align="center">（毫）秒级</td><td align="center">秒级</td></tr><tr><td align="center">成熟稳定</td><td align="center">稳定性改进中</td></tr><tr><td align="center">独立系统，专为流式计算设计</td><td align="center">Spark核心的一种计算模型<br>能与其他组件很好的结合</td></tr><tr><td align="center">数据传输模式更为简单，很多地方也更为高效</td><td align="center">将RDD做的很小来用小的批处理来接近流式处理</td></tr><tr><td align="center">并不是不能做批处理，<br>它也可以来做微批处理，来提高吞吐</td><td align="center">基于内存和DAG</td></tr></tbody></table><p><strong>小记</strong></p><p>1、storm源码中包含后缀名为<code>.clj</code>的文件，这是一种Clojure编程语言，它是一种运行在JVM上的Lisp方言。而Lisp是一种以表达性和功能强大著称的编程语言。</p><p>2、阿里巴巴在Storm的基础上使用Java代码并做了相关的改进，开发了JStorm，和Storm一样都是开源的。（反哺行为，包括将Flink→Blink）</p><p>3、   at-least        至少处理一次</p><p>​       exactly-once 有且只有一次</p><h2 id="7、Storm-架构设计与Hadoop架构对比"><a href="#7、Storm-架构设计与Hadoop架构对比" class="headerlink" title="7、Storm 架构设计与Hadoop架构对比"></a>7、Storm 架构设计与Hadoop架构对比</h2><table><thead><tr><th align="center"></th><th align="center">Storm</th><th align="center">Hadoop</th></tr></thead><tbody><tr><td align="center">主节点</td><td align="center">Nimbus</td><td align="center">ResourceManager</td></tr><tr><td align="center">从节点</td><td align="center">Supervisor</td><td align="center">NodeManager</td></tr><tr><td align="center">应用程序</td><td align="center">Topology</td><td align="center">Job</td></tr><tr><td align="center">工作进程</td><td align="center">Child</td><td align="center">Worker</td></tr><tr><td align="center">计算模型</td><td align="center">Map/Reduce</td><td align="center">Spout/Bolt</td></tr></tbody></table><h1 id="六、Storm-API-（数据累加）"><a href="#六、Storm-API-（数据累加）" class="headerlink" title="六、Storm API （数据累加）"></a>六、Storm API （数据累加）</h1><p>MyTopology.class</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>LocalCluster<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>generated<span class="token punctuation">.</span>StormTopology<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>TopologyBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTopology</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数据累加... spout  bolt</span>        TopologyBuilder topologyBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        topologyBuilder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"myspout"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MySpout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//shuffleGrouping（）表示将前一个bolt和后一个spout连接</span>        topologyBuilder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"mybolt"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MyBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"myspout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StormTopology topology <span class="token operator">=</span> topologyBuilder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LocalCluster localCluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localCluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"sum"</span><span class="token punctuation">,</span>config<span class="token punctuation">,</span>topology<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MySpout.class</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>SpoutOutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>TopologyContext<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>IRichSpout<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseRichSpout<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Values<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySpout</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRichSpout</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    SpoutOutputCollector collector<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化方法。。框架在执行任务的时候，会先执行此方法     * @param conf   可以得到spout的配置     * @param context 上下文环境     * @param collector  往下游发送数据...     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>Map conf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> SpoutOutputCollector collector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/***     * 此方法是spout的核心方法。     * 框架会一直（无限）调用这个方法，每当调用此方法时，我们应该往下游发送数据     *     *  mysout = new Myspout()     *     *  mysout.open(conf,context,collector)     *     *     *  while(ture)&amp;#123;     *      mysout.nextTuple()     *  &amp;#125;     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/*与下面的“number”对应        *若new Values(i，"zs")        *那么就是"number","name"        */</span>        collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"spout 发送.."</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当需要往下游发送数据时，就要声明字段个数和字段名字。     * @param declarer     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> MyBolt.class</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>OutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>TopologyContext<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>IRichBolt<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseRichBolt<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBolt</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRichBolt</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * bolt 初始化方法。。     * @param stormConf     * @param context     * @param collector     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> OutputCollector collector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * bolt 中 最核心的方法     * 框架会一直调用此方法，每次调用就传一个数据进来。     * @param input     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Integer integer <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        input.getIntegerByField("number");</span>        sum <span class="token operator">+=</span>integer<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"excute : "</span> <span class="token operator">+</span> integer  <span class="token operator">+</span>  <span class="token string">"   sum : "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g1s5fu1zxjj31280gfq6k.jpg"></p><h1 id="七、Storm-API-（单词统计）"><a href="#七、Storm-API-（单词统计）" class="headerlink" title="七、Storm API （单词统计）"></a>七、Storm API （单词统计）</h1><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g1s3u24s62j30pw03wmxc.jpg"></p><p>WordCountToplogy.class</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>LocalCluster<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>StormSubmitter<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>generated<span class="token punctuation">.</span>AlreadyAliveException<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>generated<span class="token punctuation">.</span>InvalidTopologyException<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>TopologyBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountToplogy</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 一对一 线程与task     *  thread0 = new Thread(new bolt0)     *  thread0.start()     *  run()&amp;#123;     *      while(true)&amp;#123;     *           bolt0.excute(tuple)     *      &amp;#125;     *  &amp;#125;     *  thread1 = new Thread ( new bolt1)     *     *  run()&amp;#123;     *       while(true)&amp;#123;     *           bolt1.excute(tuple)     *      &amp;#125;     *  &amp;#125;     *  new Thread (new bolt2)     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        TopologyBuilder topologyBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        topologyBuilder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"wcspout"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">WordCountSpout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//5 在这里指并行度，即task个数</span><span class="token comment" spellcheck="true">//shuffleGrouping() 将bolt 连接至指定的spout之后</span>        topologyBuilder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"splitbolt"</span><span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">SplitBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"wcspout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//并行度 6 </span><span class="token comment" spellcheck="true">//fieldsGrouping() 将bolt 连接至指定 的bolt之后，按指定字段grouping      </span>        topologyBuilder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"countbolt"</span><span class="token punctuation">,</span>                 <span class="token keyword">new</span> <span class="token class-name">CountBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fieldsGrouping</span><span class="token punctuation">(</span><span class="token string">"splitbolt"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setNumWorkers</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                StormSubmitter<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> topologyBuilder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AlreadyAliveException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidTopologyException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            LocalCluster localCluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            localCluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"mytopology"</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> topologyBuilder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>WordCountSpout.class</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>SpoutOutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>TopologyContext<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseRichSpout<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Values<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountSpout</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRichSpout</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    SpoutOutputCollector collector<span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> lines <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token string">"i love learning"</span><span class="token punctuation">,</span>            <span class="token string">"i miss you "</span><span class="token punctuation">,</span>            <span class="token string">"sxt is good"</span><span class="token punctuation">,</span>            <span class="token string">"good good study day day up"</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>Map conf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> SpoutOutputCollector collector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextTuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>lines<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> lines<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SplitBolt.class</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>OutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>TopologyContext<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseRichBolt<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Values<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SplitBolt</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRichBolt</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    OutputCollector collector<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> OutputCollector collector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collector <span class="token operator">=</span> collector<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"split ----- "</span>  <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String line <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String word <span class="token operator">:</span> words<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CountBolt.class</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>OutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>TopologyContext<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseRichBolt<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountBolt</span> <span class="token keyword">extends</span> <span class="token class-name">BaseRichBolt</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> resultMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prepare</span><span class="token punctuation">(</span>Map stormConf<span class="token punctuation">,</span> TopologyContext context<span class="token punctuation">,</span> OutputCollector collector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"countbolt ---- "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple input<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String word <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getStringByField</span><span class="token punctuation">(</span><span class="token string">"word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resultMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Integer integer <span class="token operator">=</span> resultMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>            integer<span class="token operator">++</span><span class="token punctuation">;</span>            resultMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            resultMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" --  "</span> <span class="token operator">+</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、Flume-Kafka-Storm架构设计"><a href="#八、Flume-Kafka-Storm架构设计" class="headerlink" title="八、Flume+Kafka+Storm架构设计"></a>八、Flume+Kafka+Storm架构设计</h1><p>• 采集层：实现日志收集，使用负载均衡策略<br>• 消息队列：作用是解耦及不同速度系统缓冲<br>• 实时处理单元：用Storm来进行数据处理，最终数据流入DB中<br>• 展示单元：数据可视化，使用WEB框架展示</p><p>• 美团Flume架构<br>– <a href="http://tech.meituan.com/mt-log-system-arch.html">http://tech.meituan.com/mt-log-system-arch.html</a><br>• Flume的负载均衡<br>– <a href="http://flume.apache.org/FlumeUserGuide.html#load-balancing-sink-processor">http://flume.apache.org/FlumeUserGuide.html#load-balancing-sink-processor</a></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>Config<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>LocalCluster<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>spout<span class="token punctuation">.</span>SchemeAsMultiScheme<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>OutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>task<span class="token punctuation">.</span>TopologyContext<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>BasicOutputCollector<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>OutputFieldsDeclarer<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>TopologyBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseBasicBolt<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>topology<span class="token punctuation">.</span>base<span class="token punctuation">.</span>BaseRichBolt<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Fields<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Tuple<span class="token punctuation">;</span><span class="token keyword">import</span> backtype<span class="token punctuation">.</span>storm<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span>Values<span class="token punctuation">;</span><span class="token keyword">import</span> storm<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>KafkaSpout<span class="token punctuation">;</span><span class="token keyword">import</span> storm<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>SpoutConfig<span class="token punctuation">;</span><span class="token keyword">import</span> storm<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>StringScheme<span class="token punctuation">;</span><span class="token keyword">import</span> storm<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>ZkHosts<span class="token punctuation">;</span><span class="token keyword">import</span> storm<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>bolt<span class="token punctuation">.</span>KafkaBolt<span class="token punctuation">;</span><span class="token keyword">import</span> storm<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>bolt<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>FieldNameBasedTupleToKafkaMapper<span class="token punctuation">;</span><span class="token keyword">import</span> storm<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>bolt<span class="token punctuation">.</span>selector<span class="token punctuation">.</span>DefaultTopicSelector<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * This topology demonstrates Storm's stream groupings and multilang * capabilities. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogFilterTopology</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FilterBolt</span> <span class="token keyword">extends</span> <span class="token class-name">BaseBasicBolt</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Tuple tuple<span class="token punctuation">,</span> BasicOutputCollector collector<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> tuple<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Accept:  "</span> <span class="token operator">+</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 包含ERROR的行留下</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"ERROR"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Filterbolt:  "</span> <span class="token operator">+</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>                collector<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Values</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">declareOutputFields</span><span class="token punctuation">(</span>OutputFieldsDeclarer declarer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 定义message提供给后面FieldNameBasedTupleToKafkaMapper使用</span>            declarer<span class="token punctuation">.</span><span class="token function">declare</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fields</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        TopologyBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TopologyBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// https://github.com/apache/storm/tree/master/external/storm-kafka</span>        <span class="token comment" spellcheck="true">// config kafka spout，话题</span>        String topic <span class="token operator">=</span> <span class="token string">"kafkatest"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//kafka集群所使用的zookeeper集群</span>        ZkHosts zkHosts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZkHosts</span><span class="token punctuation">(</span><span class="token string">"node01:2181,node02:2181,node03:2181"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//   /kafka_storm，偏移量offset的根目录，记录队列取到了哪里</span>        SpoutConfig spoutConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpoutConfig</span><span class="token punctuation">(</span>zkHosts<span class="token punctuation">,</span> topic<span class="token punctuation">,</span> <span class="token string">"/kafka_storm"</span><span class="token punctuation">,</span> <span class="token string">"test_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对应一个应用</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> zkServers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zkHosts<span class="token punctuation">.</span>brokerZkStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String host <span class="token operator">:</span> zkHosts<span class="token punctuation">.</span>brokerZkStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            zkServers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>host<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//storm的zookeeper集群地址</span>        spoutConfig<span class="token punctuation">.</span>zkServers <span class="token operator">=</span> zkServers<span class="token punctuation">;</span>        spoutConfig<span class="token punctuation">.</span>zkPort <span class="token operator">=</span> <span class="token number">2181</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 是否从头开始消费</span>        spoutConfig<span class="token punctuation">.</span>forceFromStart <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        spoutConfig<span class="token punctuation">.</span>socketTimeoutMs <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// StringScheme将字节流转解码成某种编码的字符串</span>        spoutConfig<span class="token punctuation">.</span>scheme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchemeAsMultiScheme</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KafkaSpout kafkaSpout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaSpout</span><span class="token punctuation">(</span>spoutConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set kafka spout</span>        builder<span class="token punctuation">.</span><span class="token function">setSpout</span><span class="token punctuation">(</span><span class="token string">"kafka_spout"</span><span class="token punctuation">,</span> kafkaSpout<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set bolt</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"filter"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FilterBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"kafka_spout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据写出</span>        <span class="token comment" spellcheck="true">// set kafka bolt</span>        <span class="token comment" spellcheck="true">// withTopicSelector使用缺省的选择器指定写入的topic： LogError</span>        <span class="token comment" spellcheck="true">// withTupleToKafkaMapper tuple==>kafka的key和message</span>        KafkaBolt kafka_bolt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaBolt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withTopicSelector</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DefaultTopicSelector</span><span class="token punctuation">(</span><span class="token string">"Log_error"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withTupleToKafkaMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FieldNameBasedTupleToKafkaMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setBolt</span><span class="token punctuation">(</span><span class="token string">"kafka_bolt"</span><span class="token punctuation">,</span> kafka_bolt<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shuffleGrouping</span><span class="token punctuation">(</span><span class="token string">"filter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Config conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set producer properties.</span>        Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"metadata.broker.list"</span><span class="token punctuation">,</span> <span class="token string">"node01:9092,node02:9092,node03:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Kafka生产者ACK机制 0 ： 生产者不等待Kafka broker完成确认，继续发送下一条数据         *         * 1:生产者等待消息在leader接收成功确认之后，继续发送下一条数据         *         * -1 ：生产者等待消息在follower副本接收到数据确认之后，继续发送下一条数据         *         */</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"request.required.acks"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"serializer.class"</span><span class="token punctuation">,</span> <span class="token string">"kafka.serializer.StringEncoder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        conf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kafka.broker.properties"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        conf.put(Config.STORM_ZOOKEEPER_SERVERS, Arrays.asList(new String[] &amp;#123; "node1", "node2", "node3" &amp;#125;));</span>        <span class="token comment" spellcheck="true">// 本地方式运行</span>        LocalCluster localCluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        localCluster<span class="token punctuation">.</span><span class="token function">submitTopology</span><span class="token punctuation">(</span><span class="token string">"mytopology"</span><span class="token punctuation">,</span> conf<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">createTopology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================haha======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 分布式框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Storm，流式处理框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka学习</title>
      <link href="/2019/01/28/Kafka%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/28/Kafka%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Kafka简介"><a href="#一、Kafka简介" class="headerlink" title="一、Kafka简介"></a>一、Kafka简介</h1><p>Kafka是一个高吞吐量、低延迟分布式的消息队列系统。</p><p>特点：每秒钟可以处理几十万条消息，他的低延迟最低只有几毫秒。</p><p>官网：<a href="https://kafka.apache.org/">https://kafka.apache.org/</a></p><p>底层使用Scala语言实现。</p><p>注意：</p><p>1、A streaming platform has three key capabilities:</p><ul><li>Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system.</li><li>Store streams of records in a fault-tolerant durable way.</li><li>Process streams of records as they occur.</li></ul><p>2、Kafka is generally used for two broad classes of applications:</p><ul><li>Building real-time streaming data pipelines that reliably get data between systems or applications</li><li>Building real-time streaming applications that transform or react to the streams of data</li></ul><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g1qq5c9zntj30hf0e7gnl.jpg"></p><p>3、First a few concepts:</p><ul><li>Kafka is run as a cluster on one or more servers that can span multiple datacenters.</li><li>The Kafka cluster stores streams of <em>records</em> in categories called <em>topics</em>.</li><li>Each record consists of a key, a value, and a timestamp.</li></ul><p>4、Kafka has four core APIs:</p><ul><li>The <a href="https://kafka.apache.org/documentation.html#producerapi">Producer API</a> allows an application to publish a stream of records to one or more Kafka topics.</li><li>The <a href="https://kafka.apache.org/documentation.html#consumerapi">Consumer API</a> allows an application to subscribe to one or more topics and process the stream of records produced to them.</li><li>The <a href="https://kafka.apache.org/documentation/streams">Streams API</a> allows an application to act as a <em>stream processor</em>, consuming an input stream from one or more topics and producing an output stream to one or more output topics, effectively transforming the input streams to output streams.</li><li>The <a href="https://kafka.apache.org/documentation.html#connect">Connector API</a> allows building and running reusable producers or consumers that connect Kafka topics to existing applications or data systems. For example, a connector to a relational database might capture every change to a table.</li></ul><p>5、其他</p><ul><li>Kafka Cluster 中有多个Broker服务器，每个类型的消息被定义为<code>topic</code></li><li>同一个topic内部的消息按照一定的key 和算法被分区（partition）存储到不同的Broker上</li><li>Producer 和consumer 可以在不同的Broker上生产或消费topic</li></ul><p>6、概念理解</p><ul><li><p>Topics and Logs：</p><ul><li>Topic 即为每条发布到 Kafka 集群的消息都有一个类别，topic在 Kafka 中可以由多个消费者订阅、消费。</li><li>每个 topic 包含一个或多个 partition（分区），partition 数量可以在创建 topic 时指定，每个分区日志中记录了该分区的数据以及索引信息。</li><li>Kafka 只保证一个分区内的消息有序，不能保证一个主题的不同分区之间的消息有序。为一个主题分配一个分区，才能保证所有消息绝对有序。</li><li>分区会给每个消息记录分配一个顺序 ID 号（偏移量）， 能够唯一地标识该分区中的每个记录。Kafka 集群保留所有发布的记录，不管这个记录有没有被消费过，Kafka 提供相应策略通过配置从而对旧数据处理。</li></ul><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g1qr0t4gc1j30e108edgs.jpg"></p><ul><li>每个消费者唯一保存的元数据信息就是消费者当前消费日志的位移位置。位移位置是由消费者控制，消费者可以通过修改偏移量读取任何位置的数据。</li></ul><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g1qr8l7bkrj30dn07xaan.jpg"></p></li><li><p>Producers – 生产者<br>指定 topic 来发送消息到 Kafka Broker</p></li><li><p>Consumers – 消费者<br>根据 topic 消费相应的消息</p></li><li><p>Topic – 消息主题（类型）<br> 一个 topic 可以有多个 partition，分布在不同的 broker server 上</p></li></ul><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g1qrbi5tyuj30h008aabe.jpg"></p><p>7、注意：</p><ul><li>consumer自己维护消费消息的offset</li><li>每一个consumer都有对应的group</li><li>group内是queue消费模型<ul><li>每个consumer消费不同的partition</li><li>一个消息被一个group消费一次</li></ul></li><li>group间是publish—subscribe消费模型<ul><li>每个group独立消费，互补影响</li><li>一个消息被各个group消费一次</li></ul></li></ul><p>8、Kafka使用场景（允许数据丢失）</p><ul><li><p>日志收集：收集各log ， 开放给各个consumer ， 如hbase， hadoop ， solr</p></li><li><p>消息系统： 群发消息</p></li><li><p>用户活动跟踪： 记录用户行为发布到topic中，提供给consumer做实时监控分析，或装载到hadoop，数仓中做离线分析</p></li><li><p>运营指标 ： 记录运营监控数据</p></li><li><p>流式处理 ： SparkStreaming ， storm</p></li></ul><h1 id="二、Kafka集群的部署和安装"><a href="#二、Kafka集群的部署和安装" class="headerlink" title="二、Kafka集群的部署和安装"></a>二、Kafka集群的部署和安装</h1><h2 id="1、集群规划："><a href="#1、集群规划：" class="headerlink" title="1、集群规划："></a>1、集群规划：</h2><p>zookeeper ： 三台（Kafka是分布式消息队列 ， 依赖zookeeper）</p><p>kafka  :  三台  node1、node2、node3</p><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><p>安装zookeeper （详见zookeeper学习.md）</p><p>安装Kafka </p><p>下载压缩包（官网地址：<a href="http://kafka.apache.org/downloads.html%EF%BC%89">http://kafka.apache.org/downloads.html）</a></p><h3 id="解压："><a href="#解压：" class="headerlink" title="解压："></a>解压：</h3><pre class="line-numbers language-shell"><code class="language-shell">tar -zxvf kafka_2.10-0.9.0.1.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改配置文件："><a href="#修改配置文件：" class="headerlink" title="修改配置文件："></a>修改配置文件：</h3><p>config/server.properties</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## broker.id broker集群中唯一标识id，0、1、2、3 依次增长（broker即 Kafka 集群中的一台服务器）</span><span class="token comment" spellcheck="true">## 注：当前Kafka 集群共三台节点，分别为：node1、node2、node3。对应的 broker.id 分别为 0、1、2。</span><span class="token attr-name"> broker.id</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true"> ## zookeeper.connect: zk 集群地址列表</span><span class="token attr-name"> zookeeper.connect</span><span class="token punctuation">=</span><span class="token attr-value">node1:2181、node2:2181、node3:2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将当前 node1 服务器上的 Kafka 目录同步到其他 node2、node3 服务器上。</p><h2 id="3、启动kafka集群"><a href="#3、启动kafka集群" class="headerlink" title="3、启动kafka集群"></a>3、启动kafka集群</h2><p>A、启动 Zookeeper 集群。</p><pre class="line-numbers language-shell"><code class="language-shell">zkServer.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>B、启动 Kafka 集群。<br>分别在三台服务器上执行以下命令启动：</p><pre class="line-numbers language-shell"><code class="language-shell">bin/kafka-server-start.sh config/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4、测试"><a href="#4、测试" class="headerlink" title="4、测试"></a>4、测试</h2><p>创建话题（kafka-topics.sh –help 查看帮助手册）</p><p>1、创建 topic：</p><pre class="line-numbers language-shell"><code class="language-shell">bin/kafka-topics.sh --zookeeper node1:2181,node2:2181,node3:2181 --create --replication-factor 2 --partitions 3 --topic test#参数说明#--replication-factor ：指定每个分区的复制因子个数，默认 1 个## 副本有主从之分 ， 且副本分别放在不同的broker节点上#--partitions ：指定当前创建的 kafka 分区数量，默认为 1 个#--topic ：指定新建 topic 的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、查看 topic 列表：</p><pre class="line-numbers language-shell"><code class="language-shell">bin/kafka-topics.sh --zookeeper node1:2181,node2:2181,node3:2181 --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、查看“test”topic 描述：</p><pre class="line-numbers language-shell"><code class="language-shell">bin/kafka-topics.sh --zookeeper node1:2181,node2:2181,node3:2181 --describe --topic test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>–Isr （ in_synchronized_replication ）: 代表数据同步的节点</p><p>4、创建消费者：</p><pre class="line-numbers language-shell"><code class="language-shell">bin/kafka-console-producer.sh --broker-list node1:9092,node2:9092,node3:9092 --topic test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，在当前节点的控制台输入任何内容，表作为生产的topic</p><p>5、创建消费者：（另选一台节点）</p><pre class="line-numbers language-shell"><code class="language-shell">bin/kafka-console-consumer.sh --zookeeper node1:2181,node2:2181,node3:2181 --from-beginning --topic test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，在控制台会打印出消费的topic</p><p>消费的消息的offset存放在zookeeper中，使用<code>get + 路径</code> 命令 获取对应分区的offset</p><p>注：<br>查看帮助手册：</p><pre class="line-numbers language-shell"><code class="language-shell">bin/kafka-console-consumer.sh help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、-Flume-amp-amp-Kafka的结合"><a href="#三、-Flume-amp-amp-Kafka的结合" class="headerlink" title="三、 Flume &amp; &amp; Kafka的结合"></a>三、 Flume &amp; &amp; Kafka的结合</h1><h2 id="1、Flume-安装"><a href="#1、Flume-安装" class="headerlink" title="1、Flume  安装"></a>1、Flume  安装</h2><p>（详见Flume学习.md）</p><h2 id="2、Flume-Kafka"><a href="#2、Flume-Kafka" class="headerlink" title="2、Flume + Kafka"></a>2、Flume + Kafka</h2><p>A、启动 Kafka 集群。</p><pre class="line-numbers language-shell"><code class="language-shell">bin/kafka-server-start.sh config/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>B、配置 Flume 集群，并启动 Flume 集群。</p><pre class="line-numbers language-shell"><code class="language-shell">bin/flume-ng agent -n a1 -c conf -f conf/fk.conf -Dflume.root.logger=DEBUG,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Flume 配置文件 fk.conf 内容如下：</p><pre><code>a1.sources = r1a1.sinks = k1a1.channels = c1# Describe/configure the sourcea1.sources.r1.type = avroa1.sources.r1.bind = node3a1.sources.r1.port = 41414# Describe the sinka1.sinks.k1.type = org.apache.flume.sink.kafka.KafkaSinka1.sinks.k1.topic = testflumea1.sinks.k1.brokerList = node1:9092,node2:9092,node3:9092a1.sinks.k1.requiredAcks = 1a1.sinks.k1.batchSize = 20a1.sinks.k1.channel = c1# Use a channel which buffers events in memorya1.channels.c1.type = memorya1.channels.c1.capacity = 1000000a1.channels.c1.transactionCapacity = 10000# Bind the source and sink to the channela1.sources.r1.channels = c1a1.sinks.k1.channel = c1</code></pre><h2 id="3-、测试"><a href="#3-、测试" class="headerlink" title="3 、测试"></a>3 、测试</h2><ul><li><p>分别启动 Zookeeper、Kafka、Flume 集群。</p></li><li><p>创建 topic：</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">bin/kafka-topics.sh --zookeeper node1:2181,node2:2181,node3:2181 --create --replication-factor 2 --partitions 3 --topic testflume<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动消费者：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">bin/kafka-console-consumer.sh --zookeeper node1:2181,node2:2181,node3:2181 --from-beginning --topic testflume<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>运行“RpcClientDemo”代码，通过 rpc 请求发送数据到 Flume 集群。Flume 中 source 类型为 AVRO 类型，此时通过 Java 发送 rpc 请求，测试数据是否传入 Kafka</li><li>其中，Java 发送 Rpc 请求 Flume 代码示例如下：<br>（参考 Flume 官方文档：<a href="http://flume.apache.org/FlumeDeveloperGuide.html%EF%BC%89">http://flume.apache.org/FlumeDeveloperGuide.html）</a></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flume<span class="token punctuation">.</span>Event<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flume<span class="token punctuation">.</span>EventDeliveryException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flume<span class="token punctuation">.</span>api<span class="token punctuation">.</span>RpcClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flume<span class="token punctuation">.</span>api<span class="token punctuation">.</span>RpcClientFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flume<span class="token punctuation">.</span>event<span class="token punctuation">.</span>EventBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*** Flume官网案例* http://flume.apache.org/FlumeDeveloperGuide.html* @author root*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcClientDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>MyRpcClientFacade client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRpcClientFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Initialize client with the remote Flume agent's host and port</span>client<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token string">"node1"</span><span class="token punctuation">,</span> <span class="token number">41414</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Send 10 events to the remote Flume agent. That agent should be</span><span class="token comment" spellcheck="true">// configured to listen with an AvroSource.</span>String sampleData <span class="token operator">=</span> <span class="token string">"Hello Flume!"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">sendDataToFlume</span><span class="token punctuation">(</span>sampleData<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发送数据："</span> <span class="token operator">+</span> sampleData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyRpcClientFacade</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">private</span> RpcClient client<span class="token punctuation">;</span><span class="token keyword">private</span> String hostname<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>String hostname<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Setup the RPC connection</span><span class="token keyword">this</span><span class="token punctuation">.</span>hostname <span class="token operator">=</span> hostname<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>client <span class="token operator">=</span> RpcClientFactory<span class="token punctuation">.</span><span class="token function">getDefaultInstance</span><span class="token punctuation">(</span>hostname<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Use the following method to create a thrift client (instead of the</span><span class="token comment" spellcheck="true">// above line):</span><span class="token comment" spellcheck="true">// this.client = RpcClientFactory.getThriftInstance(hostname,port);</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendDataToFlume</span><span class="token punctuation">(</span>String data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Create a Flume Event object that encapsulates the sample data</span>Event event <span class="token operator">=</span> EventBuilder<span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Send the event</span><span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>client<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EventDeliveryException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// clean up and recreate the client</span>client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>client <span class="token operator">=</span> null<span class="token punctuation">;</span>client <span class="token operator">=</span> RpcClientFactory<span class="token punctuation">.</span><span class="token function">getDefaultInstance</span><span class="token punctuation">(</span>hostname<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Use the following method to create a thrift client (instead of</span><span class="token comment" spellcheck="true">// the above line):</span><span class="token comment" spellcheck="true">// this.client =RpcClientFactory.getThriftInstance(hostname, port);</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Close the RPC connection</span>client<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="四、Kafka数据丢失问题和重复消费问题"><a href="#四、Kafka数据丢失问题和重复消费问题" class="headerlink" title="四、Kafka数据丢失问题和重复消费问题"></a>四、Kafka数据丢失问题和重复消费问题</h1><h2 id="1、为什么会丢失？"><a href="#1、为什么会丢失？" class="headerlink" title="1、为什么会丢失？"></a>1、为什么会丢失？</h2><p>Kafka ， 高吞吐 ， 一次能处理几十万条数据，</p><p>（1）生产数据时：</p><p>因为服务器（生产者）发送数据给Kafka后，kafka 将数据写入内存后，就直接返回操作成功的消息（ack机制 : 1（默认值）而ack机制 : 0 时，不用管是否操作成功，就发第二条），然后再发第二条，避免的磁盘I/O带来的延迟，可是，这样不安全，万一此时该节点宕机，数据就丢失了。</p><p>而为了解决数据丢失，可以在数据写入内存时，备份到其他节点,再返回操作成功的消息（ack机制 : -1）。</p><p>（2）消费数据时：</p><p>Client消费数据过程中，（频率很短）先更新了消费offset， 再处理数据（如100），结果宕机，那么重启后就会从下一个offset（如101）开始消费消息，那么100这条数据就丢失了。</p><p>解决方案：关闭自动提交  ， 改为 ， 手动提交，保证数据处理完毕后再提交消费offset。但是，解决了数据丢失，提高了性能消耗</p><h2 id="2、数据重复消费问题"><a href="#2、数据重复消费问题" class="headerlink" title="2、数据重复消费问题"></a>2、数据重复消费问题</h2><p>因为Client（消费者）设置定时（频率很长）向zookeeper更新消费消息的offset，（如100 ， 120） 如果在没达到定的时间（如120），client就宕机了，重启后会重新去zookeeper上查询offset， 那么在定的时间之前的消息offset（100到120之间）就不存在，Client就会重新（从100）开始消费，就造成了重复消费问题。</p><p>解决方案：关闭自动定时提交  ， 改为 ， 手动提交，保证数据处理完毕后再提交消费offset。但是，解决重复消费，提高了性能消耗。</p><h2 id="3、注意"><a href="#3、注意" class="headerlink" title="3、注意"></a>3、注意</h2><p>使用解决方案时，要注意业务的要求，是否能允许数据丢失和重复消费问题</p><h2 id="4、API"><a href="#4、API" class="headerlink" title="4、API"></a>4、API</h2><p>​    high level api<br>​    简单，不灵活<br>​     simple api<br>​    复杂，但灵活</p>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 消息队列系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch学习</title>
      <link href="/2019/01/25/Elasticsearch%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/25/Elasticsearch%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Elasticsearch是什么"><a href="#一、Elasticsearch是什么" class="headerlink" title="一、Elasticsearch是什么"></a>一、Elasticsearch是什么</h1><p><a href="https://ideas.spkcn.com/software/os/windows/687.html">https://ideas.spkcn.com/software/os/windows/687.html</a></p><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><ul><li><p>一个基于Lucene的、实时的、分布式搜索和分析引擎</p></li><li><p>应用于云计算中。</p></li><li><p>实时搜索、稳定、可靠、快速</p></li><li><p>安装方便</p></li><li><p>基于Restful接口</p></li></ul><h2 id="2、和Lucene的关系"><a href="#2、和Lucene的关系" class="headerlink" title="2、和Lucene的关系"></a>2、和Lucene的关系</h2><ul><li>Lucene 是一个库。必须使用Java开发。工作原理复杂</li><li>Elasticsearch使用Java开发，以Lucene为核心实现索引和搜索功能。通过简单的Restful API隐藏Lucene的复杂性，简化了全文搜索。</li></ul><h2 id="3、和SOLR对比"><a href="#3、和SOLR对比" class="headerlink" title="3、和SOLR对比"></a>3、和SOLR对比</h2><ul><li><p>热度逐渐远高于solr</p></li><li><p>平均查询速度快于solr倍</p></li><li><p>ES的优势：</p><p>a）Elasticsearch是分布式的。不需要其他组件，分发是实时的，被叫做”Push replication”。</p><p>b）Elasticsearch 完全支持 Apache Lucene 的接近实时的搜索。</p><p>处理多租户（multitenancy）不需要特殊配置，而Solr则需要更多的高级设置。</p><p>c）Elasticsearch 采用 Gateway 的概念，使得备份更加简单。</p><p>d）各节点组成对等的网络结构，某些节点出现故障时会自动分配其他节点代替其进行工作。</p></li></ul><h2 id="4、与关系型数据库对比"><a href="#4、与关系型数据库对比" class="headerlink" title="4、与关系型数据库对比"></a>4、与关系型数据库对比</h2><ul><li>结构相似</li></ul><table><thead><tr><th align="center">database（数据库）</th><th align="center">index（索引库）</th></tr></thead><tbody><tr><td align="center">table（表）</td><td align="center">type（类型）</td></tr><tr><td align="center">row（行）</td><td align="center">document（文档）</td></tr><tr><td align="center">column（列）</td><td align="center">field（字段）</td></tr></tbody></table><ul><li><p>一个ES集群可以有多个索引库。每个索引库包含很多种类型，类型中又包含了很多文档，每个文档又包含很多字段</p></li><li><p>传统数据库为特定列增加一个索引。Elasticsearch和Lucene使用一种叫做倒排索引(inverted index)的数据结构来达到相同目的</p></li><li><p>倒排索引：</p><ul><li>源于实际应用中需要根据属性的值来查找记录。</li><li>种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。</li><li>不是由记录来确定属性值，而是由属性值来确定记录的位置</li></ul></li></ul><p>​      </p><h1 id="二、安装与部署"><a href="#二、安装与部署" class="headerlink" title="二、安装与部署"></a>二、安装与部署</h1><p>环境要求：JDK版本为1.7及以上</p><p>下载位置：<a href="https://www.elastic.co/downloads/">系列产品</a></p><p>1、在安装目录下的config 目录下：编辑elasticsearch.yml文件</p><p>编辑内容： (注意要顶格写，冒号后面要加一个空格)</p><pre><code>a)    Cluster.name:  shsxt              (同一集群要一样)b)    Node.name：node-1                 (同一集群要不一样)c)    Network.Host: 192.168.1.194        (这里不能写127.0.0.1)d)    防止脑裂的配置discovery.zen.ping.multicast.enabled: falsediscovery.zen.ping_timeout: 120sclient.transport.ping_timeout: 60sdiscovery.zen.ping.unicast.hosts: [&quot;192.168.1.191&quot;,&quot;192.168.1.192&quot;, &quot;192.168.1.193&quot;]</code></pre><p>然后，将安装包发送到其他节点，再根据所在节点，进行相应的配置</p><p>2、启动 （开几台起几台）</p><p>ES_HOME/bin/elasticsearch     （ctrl + C 结束服务）</p><p>ES_HOME/bin/elasticsearch -d(后台运行)     （前提页面结束服务或者kill 杀死进程）</p><p><code>启动权限问题</code></p><p>1、启动后会报错，说不能在root用户下执行，所以我们需要添加新用户来执行启动</p><p>（分别在3台节点上）</p><pre><code>useradd espasswd（设置密码）chown —R es:es filename(路径/ES的解压文件)（修改ES安装文件的权限为用户es）su es（切换用户为es）再执行启动命令</code></pre><p>显示：（在启动的所有节点上都会显示出所选举的master节点，此处为node0）</p><pre><code>2019-01-26 03:22:40,594cluster.service           detected_master &amp;#123;node0&amp;#125;&amp;#123;GOmO6SISRHexhlbqcddx9w&amp;#125;&amp;#123;192.168.198.128&amp;#125;&amp;#123;192.168.198.128:9300&amp;#125;, added &amp;#123;&amp;#123;node0&amp;#125;&amp;#123;GOmO6SISRHexhlbqcddx9w&amp;#125;&amp;#123;192.168.198.128&amp;#125;&amp;#123;192.168.198.128:9300&amp;#125;,&amp;#123;node2&amp;#125;&amp;#123;blKR0BxaQ92QjmPuMlPaRw&amp;#125;&amp;#123;192.168.198.131&amp;#125;&amp;#123;192.168.198.131:9300&amp;#125;,&amp;#125;, reason: zen-disco-receive(from master [&amp;#123;node0&amp;#125;&amp;#123;GOmO6SISRHexhlbqcddx9w&amp;#125;&amp;#123;192.168.198.128&amp;#125;&amp;#123;192.168.198.128:9300&amp;#125;])</code></pre><p>4.访问</p><pre><code>浏览器访问 http://localhost:9200</code></pre><p><code>注意</code></p><blockquote><p>9200  : 是HTTP协议所访问的端口，即从浏览器端访问的port</p><p>9300  ：是Java API访问端口</p></blockquote><h1 id="ES整合hive"><a href="#ES整合hive" class="headerlink" title="ES整合hive"></a>ES整合hive</h1><p>创建Hive映射ES的外表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> EXTERNAL <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>es_analysis_order<span class="token punctuation">`</span><span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> string <span class="token keyword">COMMENT</span> <span class="token string">'from deserializer'</span><span class="token punctuation">,</span>   <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> string <span class="token keyword">COMMENT</span> <span class="token string">'from deserializer'</span><span class="token punctuation">,</span>   <span class="token punctuation">`</span>sum_2000<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">COMMENT</span> <span class="token string">'from deserializer'</span><span class="token punctuation">,</span>   <span class="token punctuation">`</span>sum_3000<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">COMMENT</span> <span class="token string">'from deserializer'</span><span class="token punctuation">,</span>   <span class="token punctuation">`</span>day<span class="token punctuation">`</span> <span class="token keyword">int</span> <span class="token keyword">COMMENT</span> <span class="token string">'from deserializer'</span><span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT SERDE   <span class="token string">'org.elasticsearch.hadoop.hive.EsSerDe'</span> STORED <span class="token keyword">BY</span>   <span class="token string">'org.elasticsearch.hadoop.hive.EsStorageHandler'</span> <span class="token keyword">WITH</span> SERDEPROPERTIES <span class="token punctuation">(</span>   <span class="token string">'serialization.format'</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span>TBLPROPERTIES <span class="token punctuation">(</span>  <span class="token string">'es.mapping.id'</span><span class="token operator">=</span><span class="token string">'id'</span><span class="token punctuation">,</span>   <span class="token string">'es.mapping.names'</span><span class="token operator">=</span><span class="token string">'user_id:user_id,sum_2000:sum_2000,sum_3000:sum_3000,day:day'</span><span class="token punctuation">,</span>   <span class="token string">'es.nodes'</span><span class="token operator">=</span><span class="token string">'10.10.65.198,10.10.151.212,10.10.114.206'</span><span class="token punctuation">,</span>   <span class="token string">'es.port'</span><span class="token operator">=</span><span class="token string">'9200'</span><span class="token punctuation">,</span>   <span class="token string">'es.resource'</span><span class="token operator">=</span><span class="token string">'behaviors/order_user'</span><span class="token punctuation">,</span>   <span class="token string">'es.write.operation'</span><span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、REST风格"><a href="#三、REST风格" class="headerlink" title="三、REST风格"></a>三、REST风格</h1><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>表现层状态转换</strong>（<a href="https://zh.wikipedia.org/wiki/%E8%8B%B1%E8%AF%AD">英语</a>：<strong>Representational State Transfer</strong>，<a href="https://zh.wikipedia.org/wiki/%E7%B8%AE%E5%AF%AB">缩写</a>：<strong>REST</strong>）</p><pre><code>一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。表现层状态转换是根基于超文本传输协议(HTTP)之上而确定的一组约束和属性，是一种设计提供万维网络服务的软件构建风格。匹配或兼容于这种架构风格(简称为 REST 或 RESTful)的网络服务，允许客户端发出以统一资源标识符访问和操作网络资源的请求，而与预先定义好的无状态操作集一致化。因此表现层状态转换提供了在互联网络的计算系统之间，彼此资源可交互使用的协作性质(interoperability)。相对于其它种类的网络服务，例如 SOAP服务则是以本身所定义的操作集，来访问网络上的资源。</code></pre><p>要点：</p><pre><code>需要注意的是，REST是设计风格而不是标准。REST通常基于使用HTTP，URI，和XML以及HTML这些现有的广泛流行的协议和标准。* 资源是由URI来指定。* 对资源的操作包括获取、创建、修改和删除资源，这些操作正好对应HTTP协议提供的GET、POST、PUT和DELETE方法。* 通过操作资源的表现形式来操作资源。* 资源的表现形式则是XML或者HTML，取决于读者是机器还是人，是消费web服务的客户软件还是web浏览器。当然也可以是任何其他的格式，例如JSON。</code></pre><blockquote><p>URI  ： 统一资源标识符</p><p>URL  ： 全球资源定位器</p></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzj3dsu1n9j30ha09vn0p.jpg"></p><h2 id="2、Rest操作"><a href="#2、Rest操作" class="headerlink" title="2、Rest操作"></a>2、Rest操作</h2><p>REST的操作分为以下几种：</p><p>– GET：获取对象的当前状态；</p><p>– PUT：改变对象的状态；</p><p>– POST：创建对象；</p><p>– DELETE：删除对象；</p><p>– HEAD：获取头信息。</p><h2 id="3、ES内置的REST接口"><a href="#3、ES内置的REST接口" class="headerlink" title="3、ES内置的REST接口"></a>3、ES内置的REST接口</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzj3feth0wj30fe08taci.jpg"></p><h1 id="四、CURL命令"><a href="#四、CURL命令" class="headerlink" title="四、CURL命令"></a>四、CURL命令</h1><p>-X  指定http请求的方法</p><p>-HEAD  GET POST  PUT DELETE</p><p>-d  指定要传输的数据</p><h2 id="1、索引库的创建与删除"><a href="#1、索引库的创建与删除" class="headerlink" title="1、索引库的创建与删除"></a>1、索引库的创建与删除</h2><p>创建索引库：（PUT/POST都可以）</p><pre><code>curl -XPUT http://192.168.198.128:9200/sukie/</code></pre><p>显示：（成功了）</p><blockquote><p>[root@node00 ~]# curl -XPUT <a href="http://192.168.198.128:9200/sukie/">http://192.168.198.128:9200/sukie/</a><br>{“acknowledged”:true}[root@node00 ~]# </p></blockquote><p>删除索引库：</p><pre><code>curl -XDELETE http://192.168.198.128:9200/sukie/</code></pre><h2 id="2、创建document"><a href="#2、创建document" class="headerlink" title="2、创建document"></a>2、创建document</h2><pre><code>(注意格式：JSON  （英文状态下）)curl -XPUT http://192.168.198.128:9200/sukie/employee/2?pretty -d &#39;&amp;#123; &quot;first_name&quot; : &quot;john&quot;, &quot;last_name&quot; : &quot;smith&quot;, &quot;age&quot; : 25, &quot;love&quot; : &quot;I love to go rock climbing&quot;, &quot;address&quot;: &quot;shanghai&quot;&amp;#125;&#39;</code></pre><p>==employee==  ： 在此处为type（类型）</p><p>==1==  ： 在此处为id</p><p>==pretty==： 表示以良好格式显示结果</p><p>显示：</p><blockquote><pre><code>[root@node00 ~]# curl -XPUT http://192.168.198.128:9200/sukie/employee/2?pretty -d &#39;&amp;#123; &quot;first_name&quot; : &quot;john&quot;, &quot;last_name&quot; : &quot;smith&quot;, &quot;age&quot; : 25, &quot;love&quot; : &quot;I love to go rock climbing&quot;, &quot;address&quot;: &quot;shanghai&quot;&amp;#125;&#39;&amp;#123;  &quot;_index&quot; : &quot;sukie&quot;,  &quot;_type&quot; : &quot;employee&quot;,   &quot;_id&quot; : &quot;2&quot;,   &quot;_version&quot; : 1,  &quot;_shards&quot; : &amp;#123;    &quot;total&quot; : 2,    &quot;successful&quot; : 2,   &quot;failed&quot; : 0  &amp;#125;,   &quot;created&quot; : true&amp;#125;[root@node00 ~]# </code></pre></blockquote><pre><code>curl -XPOST http://192.168.198.128:9200/sukie/employee -d &#39;&amp;#123; &quot;first_name&quot; : &quot;john&quot;, &quot;last_name&quot; : &quot;smith&quot;, &quot;age&quot; : 25, &quot;about&quot; : &quot;I love to go rock climbing&quot;&amp;#125;&#39;</code></pre><p>==未指定id==</p><p>如：（必须使用POST）</p><pre><code>命令：curl -XPOST http://localhost:9200/sukie/employee -d &#39;&amp;#123;&quot;first_name&quot; : &quot;John&quot;&amp;#125;&#39;</code></pre><p>若：（使用PUT会报错）</p><pre><code>命令：curl -XPUT http://localhost:9200/sukie/employee -d &#39;&amp;#123;&quot;first_name&quot; : &quot;John&quot;&amp;#125;&#39; 会报错</code></pre><p><code>创建索引注意事项</code></p><blockquote><ul><li>索引库名称必须要全部**<code>小写</code><strong>，</strong><code>不</code><strong>能以下划线开头，也</strong><code>不</code>**能包含逗号</li><li>如果没有明确指定索引数据的ID，那么es会自动生成一个随机的ID，这时需要使用POST方式，PUT方式会出错</li></ul></blockquote><h2 id="3、更新document"><a href="#3、更新document" class="headerlink" title="3、更新document"></a>3、更新document</h2><pre><code>curl -XPUT http://192.168.198.128:9200/sukie/employee/2 -d &#39;&amp;#123; &quot;first_name&quot; : &quot;god bin&quot;, &quot;last_name&quot; : &quot;pang&quot;, &quot;age&quot; : 38, &quot;about&quot; : &quot;I love to go rock climbing&quot;, &quot;address&quot;: &quot;shanghai&quot;&amp;#125;&#39;</code></pre><pre><code>curl -XPOST http://192.168.198.128:9200/sukie/employee?pretty -d &#39;&amp;#123; &quot;first_name&quot; : &quot;john&quot;, &quot;last_name&quot; : &quot;smith&quot;, &quot;age&quot; : 25, &quot;about&quot; : &quot;I love to go rock climbing&quot;&amp;#125;&#39;</code></pre><p>显示：</p><pre><code>[root@node00 ~]# curl -XPOST http://192.168.198.128:9200/sukie/employee?pretty -d &#39;&amp;#123; &gt; &quot;first_name&quot; : &quot;john&quot;, &gt; &quot;last_name&quot; : &quot;smith&quot;, &gt; &quot;age&quot; : 25, &gt; &quot;about&quot; : &quot;I love to go rock climbing&quot;&gt; &amp;#125;&#39;&amp;#123;  &quot;_index&quot; : &quot;sukie&quot;,  &quot;_type&quot; : &quot;employee&quot;,   &quot;_id&quot; : &quot;AWiFmf347KNgqTe_uJ4-&quot;,    ==自动生成的id==   &quot;_version&quot; : 1,  &quot;_shards&quot; : &amp;#123;    &quot;total&quot; : 2,     &quot;successful&quot; : 2,    &quot;failed&quot; : 0  &amp;#125;,   &quot;created&quot; : true&amp;#125;[root@node00 ~]# </code></pre><p>put  ： 必须指定id   ，若id存在，这更新数据（全局更新）；若id不存在，则新增数据</p><pre><code>curl -XPUT http://localhost:9200/sukie/employee/1 -d &#39;&amp;#123;&quot;city&quot;:&quot;beijing&quot;,&quot;car&quot;:&quot;BMW&quot;&amp;#125;&#39;</code></pre><p><code>注意;</code>执行更新操作时：</p><p>– ES首先将旧的文档标记为删除状态 </p><p>– 然后添加新的文档 </p><p>– 旧的文档不会立即消失，但是你也无法访问 </p><p>– ES会在你继续添加更多数据的时候在后台清理已经标记为删除状态的文档</p><hr><p>post  ： id若不指定，会自动生成随机的id</p><p>​                id若指定，就实现局部更新操作（添加新字段或更新已有字段）</p><pre><code> curl -XPOST http://localhost:9200/sukie/employee/1/_update -d &#39;&amp;#123;&quot;doc&quot;:&amp;#123;&quot;city&quot;:&quot;beijing&quot;,  “sex”:”male”&amp;#125;&amp;#125;&#39;</code></pre><p>（同一个索引库，会默认创建5个分片，用以实现分布式搜索；</p><p>   每个分片均另外还有一个副本分布在不同的另一个节点上，用以提高可靠性和查询速率）</p><p>==注意==</p><hr><p>同一个索引库中不同的文档之间若用相同的字段，则这个字段的数据类型必须是一致的；</p><p>字段的数据类型是由第一次推送数据是确定</p><hr><h2 id="4、普通查询索引"><a href="#4、普通查询索引" class="headerlink" title="4、普通查询索引"></a>4、普通查询索引</h2><pre><code>– 根据员工id查询 curl -XGET http://localhost:9200/sukie/employee/1?pretty– 在任意的查询字符串中添加pretty参数，es可以得到易于识别的json结果。 – curl后添加-i 参数，这样你就能得到反馈头文件curl -i XGET http://localhost:9200/sukie/employee/1?pretty– 检索文档中的一部分，如果只需要显示指定字段curl -XGET http://localhost:9200/sukie/employee/1?_source=name,age 如果只需要source的数据 curl -XGET http://localhost:9200/sukie/employee/1/_source?pretty– 查询所有curl -XGET http://localhost:9200/sukie/employee/_search?pretty – 根据条件进行查询 curl -XGET http://localhost:9200/sukie/employee/_search?q=last_name:smith</code></pre><h2 id="5-DSL查询"><a href="#5-DSL查询" class="headerlink" title="5.DSL查询"></a>5.DSL查询</h2><p>DSL查询 •Domain Specific Language </p><p>– 领域特定语言 </p><pre><code>curl -XGET http://localhost:9200/shsxt/employee/_search?pretty -d &#39;&amp;#123;&quot;query&quot;:&amp;#123;&quot;match&quot;:&amp;#123;&quot;last_name&quot;:&quot;smith&quot;&amp;#125;&amp;#125;&amp;#125;&#39;</code></pre><p>#对多个field发起查询：multi_match</p><pre><code>curl -XGET http://localhost:9200/shsxt/employee/_search?pretty -d &#39;&amp;#123; &quot;query&quot;:  &amp;#123;&quot;multi_match&quot;:   &amp;#123;    &quot;query&quot;:&quot;bin&quot;,    &quot;fields&quot;:[&quot;last_name&quot;,&quot;first_name&quot;]   &amp;#125;  &amp;#125;&amp;#125;&#39;</code></pre><p>复合查询，must，must_not, should </p><p>must： AND   </p><p>must_not：NOT</p><p>should：OR</p><pre><code>curl -XGET http://192.168.78.101:9200/shsxt/employee/_search?pretty -d &#39;&amp;#123; &quot;query&quot;:  &amp;#123;&quot;bool&quot; :   &amp;#123;    &quot;must&quot; :      &amp;#123;&quot;match&quot;:      &amp;#123;&quot;first_name&quot;:&quot;bin&quot;&amp;#125;     &amp;#125;,    &quot;must&quot; :      &amp;#123;&quot;match&quot;:      &amp;#123;&quot;age&quot;:37&amp;#125;     &amp;#125;   &amp;#125;  &amp;#125;&amp;#125;&#39;</code></pre><p>查询first_name=bin的，并且年龄不在20岁到30岁之间的</p><pre><code>curl -XGET http://192.168.78.101:9200/shsxt/employee/_search -d &#39;&amp;#123; &quot;query&quot;:  &amp;#123;&quot;bool&quot; :   &amp;#123;   &quot;must&quot; :    &amp;#123;&quot;term&quot; :      &amp;#123; &quot;first_name&quot; : &quot;bin&quot; &amp;#125;    &amp;#125;   ,   &quot;must&quot; :     &amp;#123;&quot;range&quot;:     &amp;#123;&quot;age&quot; : &amp;#123; &quot;from&quot; : 30, &quot;to&quot; : 40 &amp;#125;    &amp;#125;   &amp;#125;   &amp;#125;  &amp;#125;&amp;#125;&#39;</code></pre><h2 id="6-删除索引"><a href="#6-删除索引" class="headerlink" title="6.删除索引"></a>6.删除索引</h2><pre><code>curl -XDELETE http://localhost:9200/shsxt/employee/1?pretty</code></pre><p>• 如果文档存在，es会返回200 ok的状态码，found属性值为 true，_version属性的值+1 </p><p>• found属性值为false，但是_version属性的值依然会+1，这个就是内部管理的一部分，它保证了我们在多个节点间的不同操作的顺序都被正确标记了 </p><p>• 注意：删除一个文档也不会立即生效，它只是被标记成已删除。 Elasticsearch将会在你之后添加更多索引的时候才会在后台进行删除内容的清理</p><h1 id="五、Elasticsearch插件安装"><a href="#五、Elasticsearch插件安装" class="headerlink" title="五、Elasticsearch插件安装"></a>五、Elasticsearch插件安装</h1><h2 id="1、head"><a href="#1、head" class="headerlink" title="1、head"></a>1、head</h2><p>（至少一台）</p><p>方式一：</p><p>在bin目录下执行</p><pre><code>./plugin install mobz/elasticsearch-head</code></pre><p>来安装head插件</p><p>方式二：</p><p>使用elasticsearch-head-master.zip文件安装</p><p>在bin目录下执行</p><pre><code>./plugin install file:/usr/soft/elasticsearch-head-master.zip</code></pre><p>来安装head插件</p><p>方式三：</p><p>将elasticsearch-head-master.zip挤压解压安装后的包拷贝到elasticsearch安装目录的plugins目录下</p><p>安装后启动elasticsearch（至少2台）</p><p>访问<a href="http://ip:9200/_plugin/head">http://ip:9200/_plugin/head</a></p><h2 id="2-Kibana"><a href="#2-Kibana" class="headerlink" title="2.Kibana"></a>2.Kibana</h2><p>（1台）</p><blockquote><p>它是一个基于浏览器页面的ES前端展示工具，是为ES提供日志分析的web接口，可用它对日志进行高效的搜索、可视化、分析等操作。</p></blockquote><p>解压安装,然后修改配置文件config/kibana.yml的elasticsearch.url属性即可</p><h2 id="3、Marvel"><a href="#3、Marvel" class="headerlink" title="3、Marvel"></a>3、Marvel</h2><blockquote><p>Marvel插件可以帮助使用者监控elasticsearch的运行状态，不过这个插件需要license。安装完license后可以安装marvel的agent，agent会收集elasticsearch的运行状态</p></blockquote><p><strong>Step 1:</strong> <strong>Install Marvel into Elasticsearch:(3</strong>台<strong>es</strong>都装)</p><p>Es_home/bin/plugin install license<br> Es_home/bin/plugin install marvel-agent</p><p>（注意：Es_home/plugins 目录的权限问题，是否为当前用户的）</p><p><strong>Step 2:</strong> **Install Marvel into Kibana(**在kibana机器上安)</p><p>Kibana_home/bin/kibana plugin –install elasticsearch/marvel/latest</p><p><strong>Step 3: Start Elasticsearch and Kibana</strong></p><p>bin/elasticsearch</p><p>bin/kibana</p><p><strong>Step 4: 浏览器访问</strong>  <a href="http://node00:5601/app/marvel">http://node00:5601/app/marvel</a></p><p>==注意：多台节点的时间同步==</p><h2 id="4、分词器安装"><a href="#4、分词器安装" class="headerlink" title="4、分词器安装"></a>4、分词器安装</h2><p>从地址<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>下载elasticsearch中文分词器</p><p>（1）在安装好的elasticsearch中在plugins目录下新建ik目录</p><p>（2）将此zip包拷贝到ik目录下</p><p>（3）将权限修改为elasticsearch启动用户的权限</p><p>（4）过unzip命令解压缩：</p><pre><code>unzip  elasticsearch-analysis-ik-1.8.0.zip</code></pre><p>（5）每台机器都这样操作，重新启动elasticsearch集群</p><p><code>例子：</code></p><p>a. 创建索引库</p><pre><code>curl -XPUT http://localhost:9200/ik</code></pre><p>b. 设置mapping</p><pre><code>curl -XPOST http://localhost:9200/ik/ikType/_mapping -d&#39;&amp;#123;        &quot;properties&quot;: &amp;#123;            &quot;content&quot;: &amp;#123;                &quot;type&quot;: &quot;string&quot;,                &quot;index&quot;:&quot;analyzed&quot;,                &quot;analyzer&quot;: &quot;ik_max_word&quot;,                &quot;search_analyzer&quot;: &quot;ik_max_word&quot;            &amp;#125;       &amp;#125;&amp;#125;&#39;</code></pre><p>c.  插入数据</p><pre><code>curl -XPOST http://localhost:9200/ik/ikType/1 -d&#39;&amp;#123;&quot;content&quot;:&quot;美国留给伊拉克的是个烂摊子吗&quot;&amp;#125;&#39;curl -XPOST http://localhost:9200/ik/ikType/2 -d&#39;&amp;#123;&quot;content&quot;:&quot;公安部：各地校车将享最高路权&quot;&amp;#125;&#39;curl -XPOST http://localhost:9200/ik/ikType/3 -d&#39;&amp;#123;&quot;content&quot;:&quot;中韩渔警冲突调查：韩警平均每天扣1艘中国渔船&quot;&amp;#125;&#39;curl -XPOST http://localhost:9200/ik/ikType/4 -d&#39;&amp;#123;&quot;content&quot;:&quot;中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首&quot;&amp;#125;&#39;</code></pre><p>d. 查询</p><pre><code>curl -XGET http://localhost:9200/ik/ikType/_search?pretty  -d&#39;&amp;#123;    &quot;query&quot; : &amp;#123; &quot;term&quot; : &amp;#123; &quot;content&quot; : &quot;中国&quot; &amp;#125;&amp;#125;   &amp;#125;&#39;</code></pre><p>本地分片</p><p>只在主分片</p><p>优先主分片</p><p>只在某个节点分片</p><p>指定几个节点分片</p><p>优先指定分片</p><p>脑裂：</p><p>集群中出现两个master；1、负载过高时，master所在的节点负责管理和检索，忙不过来了，slaves节点就选出了另一个master；（功能解耦，用两台节点分别负责一个模块；一个放master，一个放data）；</p><p>2、网络波动，节点间的通信出现问题，超时连接，另一台master就又被选出来了;(解决：异地服务器）；</p><p>优化：</p><p>系统最大文件打开数量（默认1024个）</p><p>ES JVM内存大小（256m，1g，最好设为相同值）</p><p>【256m用满了，启动垃圾回收机制，然后扩容；弹性伸缩，因为GC会影响性能。】</p><p>设置mlockall来锁定物理进程true</p><p>【Linux：swap交换区（磁盘空间：存放不用的内存）】</p><p>分片数要合理</p><p>单个分片存储：20g~30g</p><p>个数=数据总量/20g</p><p>再建一个索引库，因为支持多个索引库检索</p><p>副本：数据迁移时，先设置为0，网络和磁盘IO可以降低。</p><p>segment分片存储时的片段设为1 </p><p>删除文档时，添加del标记，到客户端时再过滤。</p><p>hash取余再放到对应的分片</p>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统环境 </tag>
            
            <tag> 分布式搜索和分析引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDH部署操作</title>
      <link href="/2019/01/18/CDH%E6%93%8D%E4%BD%9C%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/18/CDH%E6%93%8D%E4%BD%9C%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="报错："><a href="#报错：" class="headerlink" title="报错："></a><strong>报错：</strong></h1><p>1、<code>Error:JAVA_HOME is not set and Java could not fund.Cloudera Manager requires Java 1.6 or later .NOTE：This script will find Oracle Java whether you install using the binary or the RPM based installer</code></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzc3r48t1wj30f004qq3s.jpg"></p><p>原因：它运行时会默认到（ /usr/java/default）这个路径下找jdk</p><blockquote><p>在 /usr/java/default目录下创建jdk访问的软连接，</p><pre class="line-numbers language-shell"><code class="language-shell">ln -s /home/jdk1.8.0_191 /usr/java/default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> CDH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flume学习</title>
      <link href="/2019/01/18/Flume%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/18/Flume%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、理论理解"><a href="#一、理论理解" class="headerlink" title="一、理论理解"></a>一、理论理解</h2><p>1、官网:：<a href="http://flume.apache.org/">http://flume.apache.org/</a></p><p>2、概念：</p><p>​    Flume是一个分布式、可扩展、可靠、高可用的海量日志有效聚合及移动的框架。</p><p>​    它通常用于log数据，支持在系统中定制各类数据发送方，用于收集数据。它具有可靠性和容错可调机制和许多故障转移和恢复机制</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDly1g1jra7eyl9j30gi0e5jt8.jpg"></p><p>3、Flume1.0X         —-FlumeNG</p><p>flume1.0x版本中flume只有agent,由3个部分组成</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDly1g1jrc5v43yj30me071q39.jpg" alt="FlumeNG"></p><p>4、架构解释</p><p>Agent ：将数据源的数据发送给collector ，Agent由source、channel、sink三大组件组成。</p><ul><li>Source：</li></ul><blockquote><p>  从Client收集数据，传递给Channel。可以接收外部源发送过来的数据。</p><p>  不同的 source，可以接受不同的数据格式。</p><p>  比如有目录池(spooling directory)数据源，可以监控指定文件夹中的新文件变化，如果目录中有文件产生，就会立刻读取其内容。</p></blockquote><ul><li>Channel</li></ul><blockquote><p> 是一个存储地，接收source的输出，直到有sink消费掉channel中的数据，Channel中的数据直到进入到下一个channel中或者进入终端才会被删除；</p><p>当sink写入失败后，可以自动重启，不会造成数据丢失，因此很可靠。</p></blockquote><ul><li>Sink</li></ul><blockquote><p>用于数据输出</p></blockquote><p>4、Flume使用原理图</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDly1g1jrhaxmslj30mx0dbju2.jpg"></p><p>Flume使用Agent内部原理图</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDly1g1jri44xz1j30l80d00uq.jpg"></p><h2 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h2><h3 id="A、数据可靠性（内部实现）"><a href="#A、数据可靠性（内部实现）" class="headerlink" title="A、数据可靠性（内部实现）"></a>A、数据可靠性（内部实现）</h3><p>​     当节点出现故障时，日志能够被传送到其他节点上而不会丢失。</p><p> Flume提供了三种级别的可靠性保障,从强到弱依次分别为：</p><p>​    1、end-to-end：收到数据agent首先将event写到磁盘上，当数据传送成功后，再删除；如果数据发送失败，可以重新发送。</p><p>​    2、Store on failure：当数据接收方crash时</p><p>​    3、Best effort：数据发送到接收方后，不会进行确认。(udp)</p><h3 id="B、自身可扩展性"><a href="#B、自身可扩展性" class="headerlink" title="B、自身可扩展性"></a>B、自身可扩展性</h3><ul><li><p>Flume采用了三层架构，分别为agent，collector和storage，每一层均可以水平扩展。所有agent和 collector由master统一管理，使得系统容易监控和维护。master允许有多个（使用ZooKeeper进行管理和负载均衡），避免单点故障问题。</p></li><li><p>【1.0自身agent实现扩展】</p></li></ul><h3 id="C、功能可扩展性"><a href="#C、功能可扩展性" class="headerlink" title="C、功能可扩展性"></a>C、功能可扩展性</h3><p>  用户可以根据需要添加自己的agent。</p><p>   Flume自带了很多组件，包括各种agent（file，syslog，HDFS等）</p><h2 id="三、Flume安装"><a href="#三、Flume安装" class="headerlink" title="三、Flume安装"></a>三、Flume安装</h2><p>​       1)将下载的flume包，解压</p><p>　　2)修改 flume-env.sh 配置文件,主要是JAVA_HOME设置[可选局部环境变量设置]</p><p>​        3)验证是否安装成功 flume-ng version</p><p>telnet 相关安装：</p><p>​     yum list telnet*   查看telnet相关的安装包</p><p>​     直接yum –y install telnet 就OK</p><p>​     yum -y install telnet-server 安装telnet服务</p><p>​     yum -y install telnet-client  安装telnet客户端(大部分系统默认安装)</p><h2 id="四、分类"><a href="#四、分类" class="headerlink" title="四、分类"></a>四、分类</h2><pre><code>Flume 关于Event的笔记　　在Flume中使用Event对象来作为传递数据的格式。　　Sources端在flume-ng-core子项目中的org.apache.flume.serialization包下，有一个名为LineDeserializer的类，这个类负责把数据按行来读取，每一行封装成一个Event（实现方式：按字节读取，当遇到&quot;\n&quot;时封装成Event返回，下一次获取Event时继续获取下一字节并判断）。然后按用户设置的批量传输的值来封装List&lt;Event&gt;备注：capacity：默认该通道中最大的可以存储的event数量是1000trasactionCapacity：每次最大可以source中拿到或者送到sink中的event数量也是100</code></pre><p><code>exec</code>：</p><blockquote><p> Unix等操作系统执行命令行，如tail ，cat 。可监听文件</p></blockquote><p><code>netcat</code></p><blockquote><p>监听一个指定端口，并将接收到的数据的每一行转换为一个event事件</p></blockquote><p><code>avro</code></p><blockquote><p>序列化的一种，实现RPC（一种远程过程调用协议）。</p><p>监听AVRO端口来接收外部AVRO客户端事件流</p></blockquote><h3 id="1、-netcat（监听端口，在本地控制台打印）"><a href="#1、-netcat（监听端口，在本地控制台打印）" class="headerlink" title="1、 netcat（监听端口，在本地控制台打印）"></a>1、 netcat（监听端口，在本地控制台打印）</h3><h4 id="（1）-vim-netcat-logger"><a href="#（1）-vim-netcat-logger" class="headerlink" title="（1） vim netcat_logger"></a>（1） vim netcat_logger</h4><pre><code># example.conf: A single-node Flume configuration# Name the components on this agenta1.sources = r1a1.sinks = k1a1.channels = c1# Describe/configure the sourcea1.sources.r1.type = netcata1.sources.r1.bind = localhosta1.sources.r1.port = 44444# Describe the sinka1.sinks.k1.type = logger# Use a channel which buffers events in memorya1.channels.c1.type = memorya1.channels.c1.capacity = 1000a1.channels.c1.transactionCapacity = 100# Bind the source and sink to the channela1.sources.r1.channels = c1a1.sinks.k1.channel = c1</code></pre><h4 id="（2）命令操作"><a href="#（2）命令操作" class="headerlink" title="（2）命令操作"></a>（2）命令操作</h4><ul><li>（在会话1端）</li></ul><blockquote><p>在node00节点的控制台输入<code>启动</code>命令：</p><p>(<code>方式一</code>：指定配置文件的路径+文件名)</p><pre class="line-numbers language-shell"><code class="language-shell">flume-ng agent --conf-file /root/flume/netcat_logger --name a1 -Dflume.root.logger=INFO,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（<code>方式二</code>：配置文件所在当前目录）</p><pre class="line-numbers language-shell"><code class="language-shell">flume-ng agent --conf ./ --conf-file netcat_logger --name a1 -Dflume.root.logger=INFO,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><code>特别注意</code>：</p><p>#####<code>官网方式</code>#########</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">flume-ng agent --conf conf --conf-file netcat_logger --name a1 -Dflume.root.logger=INFO,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释：此命令适用于将配置文件放在flume解压安装目录的conf中（不常用）</p></blockquote><p><code>控制台显示</code>:</p><pre><code>​````````19/01/18 12:27:31 INFO instrumentation.MonitoredCounterGroup: Component type: CHANNEL, name: c1 started19/01/18 12:27:31 INFO node.Application: Starting Sink k119/01/18 12:27:31 INFO node.Application: Starting Source r119/01/18 12:27:31 INFO source.NetcatSource: Source starting19/01/18 12:27:31 INFO source.NetcatSource: Created serverSocket:sun.nio.ch.ServerSocketChannelImpl[/127.0.0.1:44444]</code></pre><ul><li>(在会话2端)</li></ul><blockquote><p>在node00节点的控制台输入命令：</p><p>1、在节点上安装telnet</p><pre class="line-numbers language-shell"><code class="language-shell">yum install -y telnetyum -y install telnet-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、启动：</p><pre class="line-numbers language-shell"><code class="language-shell">telnet localhost 44444  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>注意：</code>：</p><pre><code>a1.sources.r1.bind = localhost  # 监控本地端口44444的数据</code></pre><p>前提是/etc/hosts中已经配置</p><p>如果此处配置localhost 那么启动时，localhost  或127.0.0.1都可以，node00就不行</p><p>如果此处配置node00那么启动时，node00或ip都可以，localhost就不行</p><p>3、在会话2控制台输入任何内容;</p><p>都会在会话1端显示，且会话1端（ctrl+c）退出服务，会话2端也自动结束</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">  yum list telnet*   查看telnet相关的安装包   直接yum –y install telnet 就OK     yum -y install telnet-server 安装telnet服务     yum -y install telnet-client  安装telnet客户端(大部分系统默认安装)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、avro（监听远程发送文件，在本地控制台打印）"><a href="#2、avro（监听远程发送文件，在本地控制台打印）" class="headerlink" title="2、avro（监听远程发送文件，在本地控制台打印）"></a>2、avro（监听远程发送文件，在本地控制台打印）</h3><h4 id="（1）vim-avro-logger"><a href="#（1）vim-avro-logger" class="headerlink" title="（1）vim avro_logger"></a>（1）vim avro_logger</h4><pre><code>#test avro sources##使用avro方式在某节点上将文件发送到本服务器上且通过logger方式显示##当前flume节点执行：#flume-ng agent --conf ./ --conf-file avro_loggers --name a1 -Dflume.root.logger=INFO,console##其他flume节点执行：#flume-ng avro-client --conf ./ -H 192.168.198.128 -p 55555 -F ./logsa1.sources=r1a1.channels=c1a1.sinks=k1a1.sources.r1.type = avro  a1.sources.r1.bind=192.168.198.128a1.sources.r1.port=55555a1.sinks.k1.type=loggera1.channels.c1.type = memorya1.channels.c1.capacity=1000a1.channels.c1.transactionCapacity = 100a1.sources.r1.channels=c1a1.sinks.k1.channel=c1</code></pre><p>实现功能：</p><blockquote><p>使用avro方式在某节点上将文件发送到本服务器上且通过logger方式显示</p></blockquote><h4 id="（2）命令操作-1"><a href="#（2）命令操作-1" class="headerlink" title="（2）命令操作"></a>（2）命令操作</h4><h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a><code>启动</code></h5><p>（在会话1端）</p><p>在node00上</p><ul><li>当前flume节点执行（配置文件在当前目录）：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">flume-ng agent --conf ./ --conf-file avro_logger --name a1 -Dflume.root.logger=INFO,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>显示：</code></p><pre><code>19/01/18 13:53:16 INFO instrumentation.MonitoredCounterGroup: Component type: CHANNEL, name: c1 started19/01/18 13:53:16 INFO node.Application: Starting Sink k119/01/18 13:53:16 INFO node.Application: Starting Source r119/01/18 13:53:16 INFO source.AvroSource: Starting Avro source r1: &amp;#123; bindAddress: 192.168.198.128, port: 55555 &amp;#125;...19/01/18 13:53:17 INFO instrumentation.MonitoredCounterGroup: Monitored counter group for type: SOURCE, name: r1: Successfully registered new MBean.19/01/18 13:53:17 INFO instrumentation.MonitoredCounterGroup: Component type: SOURCE, name: r1 started19/01/18 13:53:17 INFO source.AvroSource: Avro source r1 started.</code></pre><h5 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h5><p>(在会话2端)</p><p>在node00上发送文件到node00</p><p><code>启动</code></p><p>可在本地和其他flume节点执行（配置文件在当前目录）：</p><pre class="line-numbers language-shell"><code class="language-shell">flume-ng avro-client --conf ./ -H 192.168.198.128 -p 55555 -F ./flume.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(在会话1端)</p><pre><code>19/01/18 14:12:57 INFO sink.LoggerSink: Event: &amp;#123; headers:&amp;#123;&amp;#125; body: 68 65 6C 6C 6F 20 62 69 67 64 61 74 61          hello bigdata &amp;#125;</code></pre><p>时刻监听传输文件的内容</p><p><code>注意</code></p><blockquote><p>该过程也可应用于不同节点之间</p></blockquote><h3 id="3、exec（监听某一命令，在本地控制台打印）"><a href="#3、exec（监听某一命令，在本地控制台打印）" class="headerlink" title="3、exec（监听某一命令，在本地控制台打印）"></a>3、exec（监听某一命令，在本地控制台打印）</h3><h4 id="（1）vim-exec-logger"><a href="#（1）vim-exec-logger" class="headerlink" title="（1）vim exec_logger"></a>（1）vim exec_logger</h4><pre><code>#单节点flume配置# example.conf: A single-node Flume configuration   #给agent三大结构命名# Name the components on this agenta1.sources = r1a1.sinks = k1a1.channels = c1#描述source的配置：类型、命令（监听/root/flume.log文件）# Describe/configure the sourcea1.sources.r1.type = execa1.sources.r1.command = tail -F /root/flume.log#描述sink的配置：类型# Describe the sinka1.sinks.k1.type = logger#在内存中使用一个channel缓存事件# Use a channel which buffers events in memorya1.channels.c1.type = memorya1.channels.c1.capacity = 1000a1.channels.c1.transactionCapacity = 100#将source和sink绑定到channel上# Bind the source and sink to the channela1.sources.r1.channels = c1a1.sinks.k1.channel = c1</code></pre><p>（xshell会话1：）</p><blockquote><p>在node00上：<code>启动</code></p><p>在exec_logger文件所在的目录下</p><p>命令：</p><pre class="line-numbers language-shell"><code class="language-shell">flume-ng agent  --conf-file exec_logger --name a1 -Dflume.root.logger=INFO,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>r1 启动</p></blockquote><blockquote><p>（复制会话：会话2）</p><p>在node00上：</p><p>在root目录下</p><p>命令：</p><pre class="line-numbers language-shell"><code class="language-shell">echo hello bigdata >>flume.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p>之后在会话1上</p><p><code>logger本地控制台打印：</code></p><pre><code>19/01/18 12:03:23 INFO sink.LoggerSink: Event: &amp;#123; headers:&amp;#123;&amp;#125; body: 68 65 6C 6C 6F 20 62 69 67 64 61 74 61  hello bigdata &amp;#125;</code></pre></blockquote><h3 id="4、netcat–hdfs-监听数据，传到hdfs上"><a href="#4、netcat–hdfs-监听数据，传到hdfs上" class="headerlink" title="4、netcat–hdfs(监听数据，传到hdfs上)"></a>4、netcat–hdfs(监听数据，传到hdfs上)</h3><h4 id="（1）vim-netcat-hdfs"><a href="#（1）vim-netcat-hdfs" class="headerlink" title="（1）vim netcat_hdfs"></a>（1）vim netcat_hdfs</h4><pre><code># a1 which ones we want to activate.a1.channels = c1a1.sources = r1a1.sinks = k1a1.sources.r1.type = netcata1.sources.r1.bind = node00a1.sources.r1.port = 41414a1.sinks.k1.type = hdfsa1.sinks.k1.hdfs.path = hdfs://Sunrise/myflume/%y-%m-%da1.sinks.k1.hdfs.useLocalTimeStamp=true# Define a memory channel called c1 on a1a1.channels.c1.type = memory#默认值，可省#a1.channels.c1.capacity = 1000#a1.channels.c1.transactionCapacity = 100# Define an Avro source called r1 on a1 and tell ita1.sources.r1.channels = c1a1.sinks.k1.channel = c1</code></pre><h4 id="2-操作"><a href="#2-操作" class="headerlink" title="(2)操作"></a>(2)操作</h4><p>在node00的会话1上</p><p>启动</p><blockquote><p>在node00上：</p><p>在netcat_hdfs文件所在的目录下</p><p>命令：</p><pre class="line-numbers language-shell"><code class="language-shell">flume-ng agent  --conf-file netcat_hdfs --name a1 -Dflume.root.logger=INFO,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>显示：</p><pre><code>19/01/18 14:34:44 INFO instrumentation.MonitoredCounterGroup: Component type: CHANNEL, name: c1 started19/01/18 14:34:44 INFO node.Application: Starting Sink k119/01/18 14:34:44 INFO node.Application: Starting Source r119/01/18 14:34:44 INFO source.NetcatSource: Source starting19/01/18 14:34:44 INFO instrumentation.MonitoredCounterGroup: Monitored counter group for type: SINK, name: k1: Successfully registered new MBean.19/01/18 14:34:44 INFO instrumentation.MonitoredCounterGroup: Component type: SINK, name: k1 started19/01/18 14:34:44 INFO source.NetcatSource: Created serverSocket:sun.nio.ch.ServerSocketChannelImpl[/192.168.198.128:41414]</code></pre><p>在node00的会话2上</p><p>启动</p><pre class="line-numbers language-shell"><code class="language-shell">telnet node00 41414<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示</p><pre><code>Trying 192.168.198.128...Connected to node00.Escape character is &#39;^]&#39;.</code></pre><p>输入任意内容</p><p>在node00会话1端会显示</p><pre><code>19/01/18 14:36:50 INFO hdfs.HDFSSequenceFile: writeFormat = Writable, UseRawLocalFileSystem = false19/01/18 14:36:51 INFO hdfs.BucketWriter: Creating hdfs://Sunrise/myflume/19-01-18/FlumeData.1547822210259.tmp19/01/18 14:37:29 INFO hdfs.BucketWriter: Closing hdfs://Sunrise/myflume/19-01-18/FlumeData.1547822210259.tmp19/01/18 14:37:29 INFO hdfs.BucketWriter: Renaming hdfs://Sunrise/myflume/19-01-18/FlumeData.1547822210259.tmp to hdfs://Sunrise/myflume/19-01-18/FlumeData.154782221025919/01/18 14:37:29 INFO hdfs.HDFSEventSink: Writer callback called.</code></pre><p>在HDF分布式系统上会显示，生成的文件</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzb4acaz5fj30u10blmzc.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzb4bsv8d2j30wd08k74i.jpg"></p><p><code>注意：</code></p><p>这种情况会在hdfs上生成很多小文件，</p><p><a href="http://flume.apache.org/releases/content/1.8.0/FlumeUserGuide.html">在官网</a></p><p>HDFS Sink：<a href="http://flume.apache.org/releases/content/1.8.0/FlumeUserGuide.html#hdfs-sink"><em>文档</em></a></p><p>有很多关于文件生成过程中的配置</p><table><thead><tr><th>Name</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><strong>channel</strong></td><td>–</td><td></td></tr><tr><td><strong>type</strong></td><td>–</td><td>The component type name, needs to be <code>hdfs</code></td></tr><tr><td><strong>hdfs.path</strong></td><td>–</td><td>HDFS directory path (eg hdfs://namenode/flume/webdata/)</td></tr><tr><td>hdfs.filePrefix</td><td>FlumeData</td><td>Name prefixed to files created by Flume in hdfs directory</td></tr><tr><td>hdfs.fileSuffix</td><td>–</td><td>Suffix to append to file (eg <code>.avro</code> - <em>NOTE: period is not automatically added</em>)</td></tr><tr><td>hdfs.inUsePrefix</td><td>–</td><td>Prefix that is used for temporal files that flume actively writes into</td></tr><tr><td>hdfs.inUseSuffix</td><td><code>.tmp</code></td><td>Suffix that is used for temporal files that flume actively writes into</td></tr><tr><td>hdfs.rollInterval</td><td>30</td><td>Number of seconds to wait before rolling current file (0 = never roll based on time interval)</td></tr><tr><td>hdfs.rollSize</td><td>1024</td><td>File size to trigger roll, in bytes (0: never roll based on file size)</td></tr><tr><td>hdfs.rollCount</td><td>10</td><td>Number of events written to file before it rolled (0 = never roll based on number of events)</td></tr><tr><td>hdfs.idleTimeout</td><td>0</td><td>Timeout after which inactive files get closed (0 = disable automatic closing of idle files)</td></tr><tr><td>hdfs.batchSize</td><td>100</td><td>number of events written to file before it is flushed to HDFS</td></tr><tr><td>hdfs.codeC</td><td>–</td><td>Compression codec. one of following : gzip, bzip2, lzo, lzop, snappy</td></tr><tr><td>hdfs.fileType</td><td>SequenceFile</td><td>File format: currently <code>SequenceFile</code>, <code>DataStream</code> or <code>CompressedStream</code> <br>(1)DataStream will not compress output file and please don’t set codeC<br> (2)CompressedStream requires set hdfs.codeC with an available codeC</td></tr><tr><td>hdfs.maxOpenFiles</td><td>5000</td><td>Allow only this number of open files. If this number is exceeded, the oldest file is closed.</td></tr><tr><td>hdfs.minBlockReplicas</td><td>–</td><td>Specify minimum number of replicas per HDFS block. If not specified, it comes from the default Hadoop config in the classpath.</td></tr><tr><td>hdfs.writeFormat</td><td>Writable</td><td>Format for sequence file records. One of <code>Text</code> or <code>Writable</code>. Set to <code>Text</code> before creating data files with Flume, otherwise those files cannot be read by either Apache Impala (incubating) or Apache Hive.</td></tr><tr><td>hdfs.callTimeout</td><td>10000</td><td>Number of milliseconds allowed for HDFS operations, such as open, write, flush, close. This number should be increased if many HDFS timeout operations are occurring.</td></tr><tr><td>hdfs.threadsPoolSize</td><td>10</td><td>Number of threads per HDFS sink for HDFS IO ops (open, write, etc.)</td></tr><tr><td>hdfs.rollTimerPoolSize</td><td>1</td><td>Number of threads per HDFS sink for scheduling timed file rolling</td></tr><tr><td>hdfs.kerberosPrincipal</td><td>–</td><td>Kerberos user principal for accessing secure HDFS</td></tr><tr><td>hdfs.kerberosKeytab</td><td>–</td><td>Kerberos keytab for accessing secure HDFS</td></tr><tr><td>hdfs.proxyUser</td><td></td><td></td></tr><tr><td>hdfs.round</td><td>false</td><td>Should the timestamp be rounded down (if true, affects all time based escape sequences except %t)</td></tr><tr><td>hdfs.roundValue</td><td>1</td><td>Rounded down to the highest multiple of this (in the unit configured using <code>hdfs.roundUnit</code>), less than current time.</td></tr><tr><td>hdfs.roundUnit</td><td>second</td><td>The unit of the round down value - <code>second</code>, <code>minute</code> or <code>hour</code>.</td></tr><tr><td>hdfs.timeZone</td><td>Local Time</td><td>Name of the timezone that should be used for resolving the directory path, e.g. America/Los_Angeles.</td></tr><tr><td>hdfs.useLocalTimeStamp</td><td>false</td><td>Use the local time (instead of the timestamp from the event header) while replacing the escape sequences.</td></tr><tr><td>hdfs.closeTries</td><td>0</td><td>Number of times the sink must try renaming a file, after initiating a close attempt. <br>If set to 1, this sink will not re-try a failed rename (due to, for example, NameNode or DataNode failure), and may leave the file in an open state with a .tmp extension.<br> If set to 0, the sink will try to rename the file until the file is eventually renamed (there is no limit on the number of times it would try). The file may still remain open if the close call fails but the data will be intact and in this case, the file will be closed only after a Flume restart.</td></tr><tr><td>hdfs.retryInterval</td><td>180</td><td>Time in seconds between consecutive attempts to close a file. Each close call costs multiple RPC round-trips to the Namenode, so setting this too low can cause a lot of load on the name node. If set to 0 or less, the sink will not attempt to close the file if the first attempt fails, and may leave the file open or with a ”.tmp” extension.</td></tr><tr><td>serializer</td><td><code>TEXT</code></td><td>Other possible options include <code>avro_event</code> or the fully-qualified class name of an implementation of the <code>EventSerializer.Builder</code> interface.</td></tr></tbody></table><h3 id="avro-hdfs"><a href="#avro-hdfs" class="headerlink" title="avro-hdfs"></a>avro-hdfs</h3><p>（配置方式二）</p><pre><code># a1 which ones we want to activate.a1.channels = c1a1.sources = r1a1.sinks = k1a1.sources.r1.type = avroa1.sources.r1.bind=node01a1.sources.r1.port=55555a1.sinks.k1.type = hdfsa1.sinks.k1.hdfs.path = hdfs://shsxt/hdfsflume# Define a memory channel called c1 on a1a1.channels.c1.type = memorya1.channels.c1.capacity=1000a1.channels.c1.transactionCapacity = 100# Define an Avro source called r1 on a1 and tell ita1.sources.r1.channels = c1a1.sinks.k1.channel = c1</code></pre><p>##当前flume节点执行：<br>#flume-ng agent –conf ./ –conf-file avro_loggers –name a1 -Dflume.root.logger=INFO,console<br>##其他flume节点执行：<br>#flume-ng avro-client –conf ./ -H 192.168.198.128 -p 55555 -F ./logs</p><h3 id="5、结合版（netcat-avro）"><a href="#5、结合版（netcat-avro）" class="headerlink" title="5、结合版（netcat-avro）"></a>5、结合版（netcat-avro）</h3><h4 id="（1）编辑配置文件"><a href="#（1）编辑配置文件" class="headerlink" title="（1）编辑配置文件"></a>（1）编辑配置文件</h4><p>（node00：vim netcat_avro1）</p><pre><code># example.conf: A single-node Flume configuration#flume-ng agent --conf ./ --conf-file netcat_avro1 --name a1 -Dflume.root.logger=INFO,console#flume-ng --conf conf --conf-file /root/flume_test/netcat_hdfs -n a1 -Dflume.root.logger=INFO,console#telnet 192.168.235.15 44444# Name the components on this agent a1.sources = r1 a1.sinks = k1 a1.channels = c1 # Describe/configure the source a1.sources.r1.type = netcat a1.sources.r1.bind = node00 a1.sources.r1.port = 44444 # Describe the sink a1.sinks.k1.type = avro a1.sinks.k1.hostname = node01 a1.sinks.k1.port = 60000 # Use a channel which buffers events in memory a1.channels.c1.type = memory a1.channels.c1.capacity = 1000 a1.channels.c1.transactionCapacity = 100 # Bind the source and sink to the channel a1.sources.r1.channels = c1 a1.sinks.k1.channel = c1#---------------------------#flume-ng agent --conf-file etect2_logger --name a1 -#Dflume.root.logger=INFO,console#flume-ng agent --conf conf --conf-file netcat_logger --name a1 -#Dflume.root.logger=INFO,console</code></pre><p>（node01：netcat_avro2）</p><pre><code>#flume-ng agent --conf ./ --conf-file avro2 -n a1 a1.sources = r1a1.sinks = k1a1.channels = c1a1.sources.r1.type = avroa1.sources.r1.bind = node01a1.sources.r1.port = 60000a1.sinks.k1.type = logger# Use a channel which buffers events in memorya1.channels.c1.type = memorya1.channels.c1.capacity = 1000a1.channels.c1.transactionCapacity = 100# Bind the source and sink to the channela1.sources.r1.channels = c1a1.sinks.k1.channel = c1</code></pre><p>(2)操作</p><blockquote><p>先启动后面的flume节点node01  ，在启动node00，最后启动node02</p></blockquote><p>在node01上</p><p><code>启动</code></p><pre class="line-numbers language-shell"><code class="language-shell">flume-ng agent --conf conf --conf-file netcat_avro1 -n a1 -Dflume.root.logger=INFO,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示</p><pre><code>19/01/18 23:22:27 INFO node.Application: Starting Channel c119/01/18 23:22:28 INFO instrumentation.MonitoredCounterGroup: Monitored counter group for type: CHANNEL, name: c1: Successfully registered new MBean.19/01/18 23:22:28 INFO instrumentation.MonitoredCounterGroup: Component type: CHANNEL, name: c1 started19/01/18 23:22:28 INFO node.Application: Starting Sink k119/01/18 23:22:28 INFO node.Application: Starting Source r119/01/18 23:22:28 INFO source.AvroSource: Starting Avro source r1: &amp;#123; bindAddress: node01, port: 60000 &amp;#125;...19/01/18 23:22:30 INFO instrumentation.MonitoredCounterGroup: Monitored counter group for type: SOURCE, name: r1: Successfully registered new MBean.19/01/18 23:22:30 INFO instrumentation.MonitoredCounterGroup: Component type: SOURCE, name: r1 started19/01/18 23:22:30 INFO source.AvroSource: Avro source r1 started.</code></pre><p>在node00上：</p><p><code>启动</code></p><pre class="line-numbers language-shell"><code class="language-shell">flume-ng agent --conf ./ --conf-file netcat_avro2 --name a1 -Dflume.root.logger=INFO,console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在node02上</p><p><code>启动</code></p><blockquote><p>telnet node00 44444</p></blockquote><p>然后输入数据文件</p><p>最后在</p><p>node01节点上</p><p>显示文件信息</p><pre><code>19/01/18 23:33:01 INFO sink.LoggerSink: Event: &amp;#123; headers:&amp;#123;&amp;#125; body: 68 65 6C 6C 6F 20 77 6F 72 6C 64 0D             hello world. &amp;#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase性能优化</title>
      <link href="/2019/01/17/HBase%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2019/01/17/HBase%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="HBase性能优化方案"><a href="#HBase性能优化方案" class="headerlink" title="HBase性能优化方案"></a>HBase性能优化方案</h2><h1 id="（一）、表的设计"><a href="#（一）、表的设计" class="headerlink" title="（一）、表的设计"></a>（一）、表的设计</h1><p>一、Pre-Creating Regions 预分区</p><p>详情参见：<a href="http://hbase.apache.org/book.html#precreate.regions">Table Creation: Pre-Creating Regions</a></p><a id="more"></a><blockquote><p>解决海量导入数据时的热点问题</p></blockquote><p><code>背景：</code></p><blockquote><p>在创建HBase表的时候默认一张表只有一个region，</p><p>所有的put操作都会往这一个region中填充数据，</p><p>当这一个region过大时就会进行split。</p><p>如果在创建HBase的时候就进行预分区</p><p>则会减少当数据量猛增时由于region split带来的资源消耗。</p></blockquote><p><code>注意：</code></p><blockquote><p>Hbase表的预分区需要紧密结合业务场景来选择分区的key值。</p><p>每个region都有一个startKey和一个endKey来表示该region存储的rowKey范围。</p></blockquote><pre><code>&gt; create &#39;t1&#39;, &#39;cf&#39;, SPLITS =&gt; [&#39;20150501000000000&#39;, &#39;20150515000000000&#39;, &#39;20150601000000000&#39;] </code></pre><p>或者</p><pre><code>&gt; create &#39;t2&#39;, &#39;cf&#39;, SPLITS_FILE =&gt; &#39;/home/hadoop/splitfile.txt&#39; /home/hadoop/splitfile.txt中存储内容如下： 201505010000000002015051500000000020150601000000000</code></pre><p>该语句会创建4个region：</p><p>Hbase的Web UI中可以查看到表的分区情况：</p><p>其中，<strong>每个region的命名方式如下：[table],[region start key],[region id]</strong></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDly1g1hs6n9iroj30j404uwg2.jpg"></p><p>二、row key</p><p>1、特性</p><blockquote><ul><li><p>在Hbase中 rowKey 可以是任意字符串，最大长度为64KB ， 一般为10—100bytes ,存储在bytes[ ]字节数组中，一般设计为定长。</p></li><li><p>rowKey是按字典排序</p></li><li><p><strong>Rowkey规则：</strong></p><p>1、 定长 越小越好</p><p>2、 Rowkey的设计是要根据实际业务来</p><p>3、 散列性</p><p>a)     反转   001  002  100 200</p><p>b)     Hash</p></li></ul></blockquote><p>2、HBase中row key用来检索表中的记录，支持以下三种方式：</p><blockquote><p>· 通过单个row key访问：即按照某个row key键值进行get操作；</p><p>·  通过row key的range进行scan：即通过设置startRowKey和endRowKey，在这个范围内进行扫描；过滤器</p><p>·  全表扫描：即直接扫描整张表中所有行记录。</p></blockquote><p>三、column family</p><p>个数限定在2~3个</p><p>原因：</p><blockquote><p>因为某个column family 在flush会，他临近的column family也会因关联效应被触发flush，最终导致系统会产生更多的I/O。</p></blockquote><p>四、参数设置</p><blockquote><ul><li>In Memory</li></ul><p>创建表时，HColumnDescriptor.setInMemory(true)将表放到RegionServer的缓存中，保证在读取的时候被cache命中。</p><ul><li>Max Version</li></ul><p>创建表时，HColumnDescriptor.setMaxVersions(int maxVersions)设置表中数据的最大版本，如果只需要保存最新版本的数据，那么可以设置setMaxVersions(1)。</p><ul><li>Time To Live</li></ul><p>创建表时，HColumnDescriptor.setTimeToLive(int timeToLive)设置表中数据的存储生命期，过期数据将自动被删除，例如如果只需要存储最近两天的数据，那么可以设置setTimeToLive(2 * 24 * 60 * 60)。</p></blockquote><p>五、Compact &amp; Split</p><p>六、高表和宽表的选择</p><p>资源链接：</p><p><a href="http://www.cnblogs.com/rocky24/p/3372ad2a037a73daf0ff4ed4a9f43625.html">http://www.cnblogs.com/rocky24/p/3372ad2a037a73daf0ff4ed4a9f43625.html</a></p><p><a href="https://yq.aliyun.com/articles/213705">https://yq.aliyun.com/articles/213705</a></p><p>1、分类</p><p>Hbase表设计：</p><p>高表：行多列少；</p><p>宽表：行少列多。</p><p>2、根据KeyValue信息的筛选粒度，用户应尽量将需要查询的维度和信息存储在行键中，才能达到更好的数据筛选效率。</p><p>在Hbase中，数据操作具有行级原子性，按行分片。根据用户是否批量修改Value内容来决定高表和宽表的选择，宽表每一行存储的数据信息量多，易超过最大HFile的限制，若用户不存在全局value操作的需求，宽表比较适合。</p><h1 id="（二）、写表操作"><a href="#（二）、写表操作" class="headerlink" title="（二）、写表操作"></a>（二）、写表操作</h1><p>一、多HTable客户端并发写</p><p>创建多个HTable客户端用于写操作，提高写数据的吞吐量。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> Configuration conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> String table_log_name <span class="token operator">=</span> “user_log”<span class="token punctuation">;</span>wTableLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTable</span><span class="token punctuation">[</span>tableN<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tableN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    wTableLog<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTable</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> table_log_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    wTableLog<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setWriteBufferSize</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//5MB</span>    wTableLog<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAutoFlush</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、HTable参数设置</p><ul><li>Auto Flush</li></ul><blockquote><p>通过调用HTable.setAutoFlush(false)方法可以将HTable写客户端的自动flush关闭，这样可以批量写入数据到HBase，而不是有一条put就执行一次更新，只有当put填满客户端写缓存时，才实际向HBase服务端发起写请求。默认情况下auto flush是开启的</p></blockquote><ul><li>Write Buffer</li></ul><blockquote></blockquote><p>三、批量写</p><p>四、多线程并发写</p><h1 id="（三）、读表操作"><a href="#（三）、读表操作" class="headerlink" title="（三）、读表操作"></a>（三）、读表操作</h1><p>一、多HTable客户端并发读</p><p>创建多个HTable客户端用于读操作，提高读数据的吞吐量。</p><pre><code>static final Configuration conf = HBaseConfiguration.create();static final String table_log_name = “user_log”;rTableLog = new HTable[tableN];for (int i = 0; i &lt; tableN; i++) &amp;#123;    rTableLog[i] = new HTable(conf, table_log_name);    rTableLog[i].setScannerCaching(50);&amp;#125;</code></pre><p>二、HTable参数设置</p><p>三、批量读</p><p>四、多线程并发读</p><p>五、缓存查询结果</p><p>六、 Blockcache</p>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBase学习</title>
      <link href="/2019/01/15/HBase%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/15/HBase%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>非关系型数据库</p><p><a href="https://cwiki.apache.org/confluence/display/Hive/HBaseIntegration">官网</a></p><h2 id="一、对HBase数据库的-基本了解"><a href="#一、对HBase数据库的-基本了解" class="headerlink" title="一、对HBase数据库的 基本了解"></a>一、对HBase数据库的 基本了解</h2><a id="more"></a><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><blockquote><p>基于Hadoop 的分布式数据库</p><p>特点：</p><p>1、高可靠性</p><p>2、高性能</p><p>（以上两点：基于分布式的特点）</p><p>3、面向列</p><p>（以（K,V）存储，有唯一标记的rowkey，value包含的是数据库中的列值）</p><p>4、可伸缩</p><p>（搭建在集群上）</p><p>5、实时读写</p><p>（用时间戳唯一标记每一版本的数据记录）</p></blockquote><h3 id="2、工作结构"><a href="#2、工作结构" class="headerlink" title="2、工作结构"></a>2、工作结构</h3><blockquote><p>1,利用Hadoop的HDFS作为其文件存储系统</p><p>2,利用Hadoop的MapReduce来计算处理HBase中的海量数据</p><p>3,利用Zookeeper作为其分布式协同服务</p><p>4,主要用来存储非结构化和半结构化的松散数据（NoSQL非关系型数据库有redis、MongoDB等</p></blockquote><h3 id="3、关系型数据库"><a href="#3、关系型数据库" class="headerlink" title="3、关系型数据库"></a>3、关系型数据库</h3><blockquote><p>1、定义</p><p>关系模型指的就是二维表格模型；</p><p>而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织</p><p>2、三大优点</p><ul><li>容易理解</li><li>使用方便</li><li>易于维护</li></ul><p>3、三大瓶颈</p><ul><li>高并发读写需求</li></ul><p>硬盘I/O是一个很大的瓶颈，并且很难能做到数据的强一致性。</p><ul><li>海量数据的读写性能低</li></ul><p>在一张包含海量数据的表中查询，效率是非常低的。</p><ul><li>​    扩展性和可用性差</li></ul><p>丰富的完整性使得横向扩展把难度加大了</p></blockquote><p><code>ACID特性</code></p><blockquote><p>ACID，指数据库事务正确执行的四个基本要素的缩写;</p><p><code>原子性</code>（Atomicity）:<strong>事务不可再分割</strong></p><p>整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</p><p><code>一致性</code>（Consistency）:<strong>事务前后数据保持一致</strong></p><p>事务必须始终保持系统处于一致的状态，不管在任何给定的时间并发事务有多少。如果事务是并发多个，系统也必须如同串行事务一样操作。</p><p><code>隔离性</code>（Isolation）：<strong>串行化</strong>，使得同一时间仅有一个请求用于同一数据。</p><p>事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。</p><p><code>持久性</code>（Durability）：</p><p>在事务完成以后，该事务对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</p></blockquote><h3 id="4、非关系型数据库"><a href="#4、非关系型数据库" class="headerlink" title="4、非关系型数据库"></a>4、非关系型数据库</h3><blockquote><p>1、存储格式：key value键值对，文档，图片等等，结构不固定 </p><p>2、可以减少一些时间和空间的开销，仅需要根据id取出相应的value就可以完成查询。</p><p>3、一般不支持ACID特性，无需经过SQL解析，读写性能高</p><p>4、不提供where字段条件过滤</p><p>5、难以体现设计的完整性，只适合存储一些较为简单的数据</p></blockquote><h2 id="二、对HBase的基本里了解"><a href="#二、对HBase的基本里了解" class="headerlink" title="二、对HBase的基本里了解"></a>二、对HBase的基本里了解</h2><h3 id="1、数据结构组成"><a href="#1、数据结构组成" class="headerlink" title="1、数据结构组成"></a>1、数据结构组成</h3><p>（ 1）Row key  :</p><blockquote><p>唯一标记决定一行数据<br>按照字典排序<br>最大只能存储64KB的字节数据<br>设计非常关键</p></blockquote><p>（2）Column Family列族 &amp; qualifier列</p><blockquote><p><code>列族</code必须作为表模式(schema)定义的一部分预先给出，</p><p>表中的每个列都归属于某个列族；</p><p>权限控制、存储以及调优都是在列族层面进行的；</p><p><code>列名</code></p><p>以列族作为前缀，每个“列族”都可以有多个列成员(column)； </p><p>新的列可以随后按需、动态加入；</p></blockquote><p>（3）Cell单元格</p><blockquote><p> 由行和列的坐标交叉决定； 单元格是有版本的（有时间戳决定）；</p><p> 单元格的内容是未解析的字节数组；cell中的数据是没有类型的，全部是字节码形式存贮。</p><pre class="line-numbers language-tex"><code class="language-tex">由&#123;rowkey， column( =<family> +<qualifier>)， version&#125; 唯一确定的单元。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>（4）Timestamp时间戳</p><blockquote><p>在HBase每个cell存储单元对同一份数据有多个版本，</p><p>根据唯一的时间戳来区分每个版本之间的差异，</p><p>不同版本的数据按照时间倒序排序，最新的数据版本排在最前面</p><p>时间戳的类型是64位整型。</p><p>时间戳可以由HBase(在数据写入时自动)赋值，精确到毫秒</p><p>时间戳也可以由客户显式赋值，但必须唯一性</p></blockquote><p>（5）HLog(WAL log)</p><blockquote><ul><li>HLog文件就是一个普通的Hadoop SequenceFile</li><li>HLog Sequence File的Key是HLogKey对象<ul><li>HLogKey中记录了写入数据的归属信息，包括table和region名字，sequence number（起始值为0或是最近一次存入文件系统中sequence  number）和timestamp（写入时间）</li></ul></li><li>HLog SequeceFile的Value是HBase的KeyValue对象，即对应HFile中的KeyValue<ul><li>存储hbase表的操作记录，(K，V)数据信息   </li></ul></li></ul></blockquote><p>2、体系架构</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDly1g1gla9rm43j30lo0c3wjo.jpg"></p><p>（1）Client</p><blockquote><p>包含访问HBase的接口并在缓存中维护着已经访问过的Region位置信息来加快对HBase的访问。</p></blockquote><p>（2）Zookeeper</p><blockquote><ul><li><p>保证任何时候，集群中只有一个master；</p></li><li><p>存贮所有Region的寻址入口。</p></li><li><p>实时监控Region server的上线和下线信息，并实时通知Master</p></li><li><p>存储HBase的schema和table元数据</p></li></ul></blockquote><p>Zookeeper是一个很好的集群管理工具，被大量用于分布式计算，提供配置维护、域名服务、分布式同步、组服务等</p><p>（3）Master</p><blockquote><p>为Region server分配region；</p><ul><li>负责Region server的负载均衡；</li><li>发现失效的Region server并将其上的region重新分配；</li><li>在Region分裂或合并后，负责重新调整Region的分布</li><li>管理用户对table的增删改操作；</li></ul></blockquote><p>（4）RegionServer    </p><blockquote><ul><li><p>维护region，处理对这些region的IO请求</p></li><li><p>负责切分在运行过程中变得过大的region</p></li></ul></blockquote><p>（5）Region</p><blockquote><ul><li><p>保存一个表里面某段连续的数据，每个表一开始只有一个region；</p></li><li><p>随着数据不断插入表，region不断增大，当增大到一个阀值的时候，region就会等分会两个新的region（裂变）</p><p>（HBase自动把表水平划分成多个区域(region)）</p></li><li><p>当table中的行不断增多，就会有越来越多的region。这样一张完整的表被保存在多个Regionserver上</p></li></ul></blockquote><p>（6）Memstore与storefile</p><blockquote><ul><li>一个region由2-3store组成，一个store对应一个CF（列族）</li><li>store包括位于内存中的memstore和位于磁盘的storefile。</li><li>写操作先写入memstore，当memstore中的数据达到某个阈值（默认64M），hregionserver会启动flashcache进程写入storefile，每次写入形成单独的一个storefile；</li><li>当storefile文件的数量增长到一定阈值后，系统会进行合并（minor、major，compaction），在合并过程中会进行版本合并和删除工作（majar），形成更大的storefile</li><li>当一个region所有storefile的大小和数量超过一定阈值后，会把当前的region分割为两个，并由hmaster分配到相应的regionserver服务器，实现负载均衡</li><li>客户端检索数据，先在memstore找，找不到再找storefile</li><li>HRegion是HBase中分布式存储和负载均衡的最小单元。最小单元就表示不同的HRegion可以分布在不同的HRegion server上。</li><li>每个Strore又由一个memStore和0至多个StoreFile组成,StoreFile以HFile格式保存在HDFS上(HFile)。</li></ul></blockquote><h2 id="三、Hbase-安装部署"><a href="#三、Hbase-安装部署" class="headerlink" title="三、Hbase 安装部署"></a>三、Hbase 安装部署</h2><p>完全分布式搭建</p><p>1、安装包准备</p><p><a href="http://hbase.apache.org/downloads.html">Hbase</a>（本文使用0.98版本）</p><p>将tar上传至Linux系统，进行解压安装</p><p>2、修改配置文件hbase-env.sh（在Hbase的解压目录的conf目录中）</p><p>修添加JAVA_HOME环境变量</p><pre><code># The java implementation to use.  Java 1.7+ required.# export JAVA_HOME=/usr/java/jdk1.6.0/export JAVA_HOME=/usr/soft/jdk1.8.0_191</code></pre><p>不使用HBase的默认zookeeper配置，（使用自己的）：</p><pre><code># Tell HBase whether it should manage it&#39;s own instance of Zookeeper or not. export HBASE_MANAGES_ZK=false</code></pre><p>3、修改配置hbase-site.xml（在Hbase的解压目录的conf目录中）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!--Hdfs配置时的集群名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://Sukie:8020/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--zookeeper的三台节点--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node1,node2,node3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置http访问的port---></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.master.info.port<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>60010<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意：（会出bug的地方）</code>：</p><p>1、问题描述：</p><blockquote><p>HBase启动时，警告：<br>Java HotSpot(TM) 64-Bit Server VM warning: ignoring option PermSize=128m; support was removed in 8.0 </p></blockquote><p>解决方案：</p><p><code>原因：</code>由于使用了JDK8 ，需要在HBase的配置文件中hbase-env.sh，注释掉两行。</p><pre class="line-numbers language-sh"><code class="language-sh"># Configure PermSize. Only needed in JDK7. You can safely remove it for JDK8+#export HBASE_MASTER_OPTS="$HBASE_MASTER_OPTS -XX:PermSize=128m -XX:MaxPermSize=128m -XX:ReservedCodeCacheSize=256m"#export HBASE_REGIONSERVER_OPTS="$HBASE_REGIONSERVER_OPTS -XX:PermSize=128m -XX:MaxPermSize=128m -XX:ReservedCodeCacheSize=256m"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重新启动HBase。</p><p>2、问题描述：</p><blockquote><p>配置好HBase后，各项服务正常，但想从浏览器通过端口60010看下节点情况，但是提示拒绝访问</p></blockquote><p><code>检测：</code>在服务器上netstat -natl|grep 60010 发现并没有60010端口</p><p><code>原因：</code>HBase 1.0 之后的版本都需要在hbase-site.xml中配置端口，如下</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.master.info.port<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>60010<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重新启动HBase,在浏览器再次访问，就ok了</p><p>4、添加配置regionservers 文件（在Hbase的解压目录的conf目录中）</p><p>添加配置的regionservers 的主机名</p><p>regionservers</p><pre><code>node00node01node02  </code></pre><p>5、添加配置backup-masters</p><p>添加配置的master备份的主机名（在Hbase的解压目录的conf目录中）</p><p>backup-masters</p><pre><code>node02 </code></pre><p>6、将Hadoop安装解压目录/etc/hadoop目录下的hdfs-site.xml文件 拷贝到Hbase的解压目录的conf目录中</p><p>7、配置环境变量 ~/.bash_profile</p><pre class="line-numbers language-sh"><code class="language-sh">JAVA_HOME=/usr/soft/jdk1.8.0_191export PATH=$PATH:$JAVA_HOME/binHADOOP_HOME=/usr/soft/hadoop-2.6.5export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbinZOOKEEPER_HOME=/usr/soft/zookeeper-3.4.13export PATH=$PATH:$ZOOKEEPER_HOME/binHIVE_HOME=/usr/soft/apache-hive-1.2.1-binexport PATH=$PATH:$HIVE_HOME/binSQOOP_HOME=/usr/soft/sqoop-1.4.6export PATH=$PATH:$SQOOP_HOME/binHBASE_HOME=/usr/soft/hbase-1.2.9export PATH=$PATH:$HBASE_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>source ~/.bash_profile</p></blockquote><p>8、将如上配置远程发送至其他节点（Hbase 、 ./bash_profile）</p><p>9、各个节点注意要做时间同步</p><pre class="line-numbers language-shell"><code class="language-shell">ntpdate cn.ntp.org.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10、启动HDFS集群：</p><pre class="line-numbers language-shell"><code class="language-shell">zkServer.sh startstart-hdfs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>11、启动：</p><pre class="line-numbers language-shell"><code class="language-shell">start-hbase.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示：</p><pre class="line-numbers language-shell"><code class="language-shell">starting master, logging to /usr/soft/hbase-1.2.9/bin/../logs/hbase-root-master-node00.outnode02: starting regionserver, logging to /usr/soft/hbase-1.2.9/bin/../logs/hbase-root-regionserver-node02.outnode01: starting regionserver, logging to /usr/soft/hbase-1.2.9/bin/../logs/hbase-root-regionserver-node01.outnode00: starting regionserver, logging to /usr/soft/hbase-1.2.9/bin/../logs/hbase-root-regionserver-node00.outnode02: starting master, logging to /usr/soft/hbase-1.2.9/bin/../logs/hbase-root-master-node02.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>12、查看进程：</p><pre class="line-numbers language-shell"><code class="language-shell">jps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>13、浏览器访问：node00:60010</p><p>14、关闭：</p><pre class="line-numbers language-shell"><code class="language-shell">stop-hbase.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、通过hbase-shell命令进入HBase-命令行接口"><a href="#四、通过hbase-shell命令进入HBase-命令行接口" class="headerlink" title="四、通过hbase shell命令进入HBase 命令行接口"></a>四、通过hbase shell命令进入HBase 命令行接口</h2><pre class="line-numbers language-shell"><code class="language-shell">hbase shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入hbase交互式界面。</p><p>通过<code>help</code>可查看所有命令的支持以及帮助手册</p><blockquote><p>帮助创建</p><p>hbase(main):007:0&gt;  help create</p></blockquote><table><thead><tr><th align="center">名称</th><th>Shell命令</th><th>举例</th></tr></thead><tbody><tr><td align="center">创建表</td><td>create ‘表名’, ‘列族名1’[,…]</td><td>create ‘t1’，‘cf1’</td></tr><tr><td align="center">列出所有表</td><td>list</td><td>list</td></tr><tr><td align="center">添加记录</td><td>put ‘表名’, ‘RowKey’, ‘列族名称:列名’, ‘值’</td><td>put        ‘t1’,‘rk_00101’,‘cf1:name’,‘zs’</td></tr><tr><td align="center">查看记录</td><td>get ‘表名’, ‘RowKey’, ‘列族名称:列名’</td><td>get ‘t1’,‘rk_00101’                         get ‘t1’,‘rk_00101’,‘cf1:name’</td></tr><tr><td align="center">查看所有记录</td><td>count  ‘表名’</td><td>count ‘t1’</td></tr><tr><td align="center">删除记录</td><td>delete  ‘表名’   , ‘RowKey’,   ‘列族名称:列名’</td><td>delete ‘t1’,‘rk_00101’,‘cf1:name’</td></tr><tr><td align="center">删除一张表</td><td>先要屏蔽该表，才能对该表进行删除。 <br>第一步 disable   ‘表名称’ <br>第二步 drop   ‘表名称’</td><td>disable ‘t1’                                                      drop ‘t1’</td></tr><tr><td align="center">查看所有记录</td><td>scan   ‘表名 ‘</td><td>scan ‘t1’</td></tr><tr><td align="center"></td><td>create ‘t2’, {NAME =&gt; ‘cf1’, VERSIONS =&gt; 2}, METADATA =&gt; { ‘mykey’ =&gt; ‘myvalue’ }</td><td></td></tr><tr><td align="center">查看未加工数据中指定版本记录</td><td>scan ‘t1’, {RAW =&gt; true, VERSIONS =&gt; 3}                           raw  未加工的</td><td>3</td></tr><tr><td align="center">查看保存版本记录</td><td>scan ‘t1’, {VERSIONS =&gt; 2}</td><td>2</td></tr><tr><td align="center"></td><td>ctrl + enter</td><td></td></tr></tbody></table><h2 id="五、HBase优化"><a href="#五、HBase优化" class="headerlink" title="五、HBase优化"></a>五、HBase优化</h2><p><code>详见HBase性能优化文档</code></p><h2 id="六、Hive和Hbase的整合"><a href="#六、Hive和Hbase的整合" class="headerlink" title="六、Hive和Hbase的整合"></a>六、Hive和Hbase的整合</h2><p>hive和hbase同步<br><a href="https://cwiki.apache.org/confluence/display/Hive/HBaseIntegration">https://cwiki.apache.org/confluence/display/Hive/HBaseIntegration</a></p><h3 id="1、拷贝jar包"><a href="#1、拷贝jar包" class="headerlink" title="1、拷贝jar包"></a>1、拷贝jar包</h3><p>把hive-hbase-handler-1.2.1.jar  cp到hbase/lib 下<br>​    同时把hbase中的所有的jar，cp到hive/lib</p><p><code>注意</code>：</p><blockquote><p>hive-hbase-handler-1.2.1.jar在Hive的lib目录下</p></blockquote><h3 id="2、在hive的配置文件增加属性："><a href="#2、在hive的配置文件增加属性：" class="headerlink" title="2、在hive的配置文件增加属性："></a>2、在hive的配置文件增加属性：</h3><pre class="line-numbers language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node01,node02,node03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、在hive中创建临时表"><a href="#3、在hive中创建临时表" class="headerlink" title="3、在hive中创建临时表"></a>3、在hive中创建临时表</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">(</span>注意：需要先在Hbase中创建t_order表，列族为<span class="token keyword">order</span>：<span class="token keyword">create</span> <span class="token string">'t_order'</span> <span class="token string">'order'</span><span class="token punctuation">)</span><span class="token keyword">CREATE</span> EXTERNAL <span class="token keyword">TABLE</span> tmp_tbl<span class="token punctuation">(</span>    <span class="token keyword">key</span> string<span class="token punctuation">,</span>     id string<span class="token punctuation">,</span>     user_id string<span class="token punctuation">)</span>  STORED <span class="token keyword">BY</span> <span class="token string">'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span>  <span class="token keyword">WITH</span> SERDEPROPERTIES <span class="token punctuation">(</span><span class="token string">"hbase.columns.mapping"</span> <span class="token operator">=</span> <span class="token string">":key,order:order_id,order:user_id"</span><span class="token punctuation">)</span>  TBLPROPERTIES <span class="token punctuation">(</span><span class="token string">"hbase.table.name"</span> <span class="token operator">=</span> <span class="token string">"t_tbl"</span>，<span class="token string">"hbase.mapred.output.outputtable"</span> <span class="token operator">=</span> <span class="token string">"t_tbl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>（确保xyz没有在Hbase中存在）<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> hbasetbl<span class="token punctuation">(</span>    <span class="token keyword">key</span> <span class="token keyword">int</span><span class="token punctuation">,</span>     name string<span class="token punctuation">,</span>     age string<span class="token punctuation">)</span> STORED <span class="token keyword">BY</span> <span class="token string">'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span><span class="token keyword">WITH</span> SERDEPROPERTIES <span class="token punctuation">(</span><span class="token string">"hbase.columns.mapping"</span> <span class="token operator">=</span> <span class="token string">":key,cf1:name,cf1:age"</span><span class="token punctuation">)</span>TBLPROPERTIES <span class="token punctuation">(</span><span class="token string">"hbase.table.name"</span> <span class="token operator">=</span> <span class="token string">"xyz"</span><span class="token punctuation">,</span> <span class="token string">"hbase.mapred.output.outputtable"</span> <span class="token operator">=</span> <span class="token string">"xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">案例：hbase<span class="token operator">-</span>hive<span class="token keyword">CREATE</span> EXTERNAL <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>srv_mid_analysis_order<span class="token punctuation">`</span><span class="token punctuation">(</span>  <span class="token punctuation">`</span>rowkey<span class="token punctuation">`</span> string<span class="token punctuation">,</span>   <span class="token punctuation">`</span>user_id<span class="token punctuation">`</span> string<span class="token punctuation">,</span>   <span class="token punctuation">`</span>order_id<span class="token punctuation">`</span> string<span class="token punctuation">,</span>   <span class="token punctuation">`</span>order_price<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">,</span>   <span class="token punctuation">`</span>order_status<span class="token punctuation">`</span> string<span class="token punctuation">,</span>   <span class="token punctuation">`</span>pay_type<span class="token punctuation">`</span> string<span class="token punctuation">,</span>   <span class="token punctuation">`</span>promoter_id<span class="token punctuation">`</span> string<span class="token punctuation">,</span>   <span class="token punctuation">`</span>channel<span class="token punctuation">`</span> string<span class="token punctuation">,</span>   <span class="token punctuation">`</span>completed<span class="token punctuation">`</span> string<span class="token punctuation">,</span>   <span class="token punctuation">`</span>created<span class="token punctuation">`</span> string<span class="token punctuation">,</span>  <span class="token punctuation">`</span>accounting_day<span class="token punctuation">`</span> string<span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT SERDE   <span class="token string">'org.apache.hadoop.hive.hbase.HBaseSerDe'</span> STORED <span class="token keyword">BY</span>   <span class="token string">'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span> <span class="token keyword">WITH</span> SERDEPROPERTIES <span class="token punctuation">(</span>   <span class="token string">'hbase.columns.mapping'</span><span class="token operator">=</span>':<span class="token keyword">key</span><span class="token punctuation">,</span>attr:user_id<span class="token comment" spellcheck="true">#b,attr:order_id#b,attr:order_price,attr:order_status#b,attr:pay_type#b,attr:promoter_id#b,attr:channel#b,attr:completed#b,attr:created#b,attr:accounting_day#b', </span>  <span class="token string">'serialization.format'</span><span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">)</span>TBLPROPERTIES <span class="token punctuation">(</span>  <span class="token string">'hbase.table.name'</span><span class="token operator">=</span><span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span>  <span class="token string">'hbase.mapred.output.outputtable'</span> <span class="token operator">=</span> <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">)</span>hbase:创建命名空间：create_namespace <span class="token string">'aries'</span>:创建表<span class="token keyword">create</span> <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'attr'</span>:删除表<span class="token keyword">disable</span> <span class="token string">'srv_mid_analysis_order'</span><span class="token keyword">drop</span>  <span class="token string">'srv_mid_analysis_order'</span>:上传数据put <span class="token string">'ns1:t1'</span><span class="token punctuation">,</span> <span class="token string">'r1'</span><span class="token punctuation">,</span> <span class="token string">'c1'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token number">5e4d5c9938796a0f00ed01b2</span><span class="token punctuation">,</span><span class="token number">5e007fda8430d96242a8578d</span><span class="token punctuation">,</span><span class="token number">299641451</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span>completed<span class="token punctuation">,</span>alipay<span class="token punctuation">,</span><span class="token number">200000069</span><span class="token punctuation">,</span>Samsung<span class="token punctuation">,</span><span class="token number">2020</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">20</span> <span class="token number">0</span>:<span class="token number">04</span><span class="token punctuation">,</span><span class="token number">2020</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">20</span> <span class="token number">0</span>:<span class="token number">04</span><span class="token punctuation">,</span><span class="token number">20200220</span> put <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'5e4d5c9938796a0f00ed01b2'</span><span class="token punctuation">,</span><span class="token string">'attr:user_id'</span><span class="token punctuation">,</span><span class="token string">'5e007fda8430d96242a8578d'</span>put <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'5e4d5c9938796a0f00ed01b2'</span><span class="token punctuation">,</span><span class="token string">'attr:order_id'</span><span class="token punctuation">,</span><span class="token string">'299641451'</span>put <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'5e4d5c9938796a0f00ed01b2'</span><span class="token punctuation">,</span><span class="token string">'attr:order_price'</span><span class="token punctuation">,</span><span class="token string">'100'</span>put <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'5e4d5c9938796a0f00ed01b2'</span><span class="token punctuation">,</span><span class="token string">'attr:order_status'</span><span class="token punctuation">,</span><span class="token string">'completed'</span>put <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'5e4d5c9938796a0f00ed01b2'</span><span class="token punctuation">,</span><span class="token string">'attr:pay_type'</span><span class="token punctuation">,</span><span class="token string">'alipay'</span>put <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'5e4d5c9938796a0f00ed01b2'</span><span class="token punctuation">,</span><span class="token string">'attr:promoter_id'</span><span class="token punctuation">,</span><span class="token string">'200000069'</span>put <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'5e4d5c9938796a0f00ed01b2'</span><span class="token punctuation">,</span><span class="token string">'attr:channel'</span><span class="token punctuation">,</span><span class="token string">'Samsung'</span>put <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'5e4d5c9938796a0f00ed01b2'</span><span class="token punctuation">,</span><span class="token string">'attr:completed'</span><span class="token punctuation">,</span><span class="token string">'2020/2/20 0:04'</span>put <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'5e4d5c9938796a0f00ed01b2'</span><span class="token punctuation">,</span><span class="token string">'attr:created'</span><span class="token punctuation">,</span><span class="token string">'2020/2/20 0:04'</span>put <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'5e4d5c9938796a0f00ed01b2'</span><span class="token punctuation">,</span><span class="token string">'attr:accounting_day'</span><span class="token punctuation">,</span><span class="token string">'20200220'</span>:获取数据get <span class="token string">'t1'</span><span class="token punctuation">,</span> <span class="token string">'r1'</span>                      get <span class="token string">'aries:srv_mid_analysis_order'</span><span class="token punctuation">,</span><span class="token string">'5e4d5c9938796a0f00ed01b2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h1><h2 id="Here-is-some-help-for-this-command"><a href="#Here-is-some-help-for-this-command" class="headerlink" title="Here is some help for this command:"></a>Here is some help for this command:</h2><pre class="line-numbers language-shell"><code class="language-shell">Creates a table. Pass a table name, and a set of column family specifications (at least one), and, optionally, table configuration.Column specification can be a simple string (name), or a dictionary(dictionaries are described below in main help output), necessarily including NAME attribute. Examples:Create a table with namespace=ns1 and table qualifier=t1  hbase> create 'ns1:t1', &#123;NAME => 'f1', VERSIONS => 5&#125;Create a table with namespace=default and table qualifier=t1  hbase> create 't1', &#123;NAME => 'f1'&#125;, &#123;NAME => 'f2'&#125;, &#123;NAME => 'f3'&#125;  hbase> # The above in shorthand would be the following:  hbase> create 't1', 'f1', 'f2', 'f3'  hbase> create 't1', &#123;NAME => 'f1', VERSIONS => 1, TTL => 2592000, BLOCKCACHE => true&#125;  hbase> create 't1', &#123;NAME => 'f1', CONFIGURATION => &#123;'hbase.hstore.blockingStoreFiles' => '10'&#125;&#125;Table configuration options can be put at the end.Examples:  hbase> create 'ns1:t1', 'f1', SPLITS => ['10', '20', '30', '40']  hbase> create 't1', 'f1', SPLITS => ['10', '20', '30', '40']  hbase> create 't1', 'f1', SPLITS_FILE => 'splits.txt', OWNER => 'johndoe'  hbase> create 't1', &#123;NAME => 'f1', VERSIONS => 5&#125;, METADATA => &#123; 'mykey' => 'myvalue' &#125;  hbase> # Optionally pre-split the table into NUMREGIONS, using  hbase> # SPLITALGO ("HexStringSplit", "UniformSplit" or classname)  hbase> create 't1', 'f1', &#123;NUMREGIONS => 15, SPLITALGO => 'HexStringSplit'&#125;  hbase> create 't1', 'f1', &#123;NUMREGIONS => 15, SPLITALGO => 'HexStringSplit', CONFIGURATION => &#123;'hbase.hregion.scan.loadColumnFamiliesOnDemand' => 'true'&#125;&#125;You can also keep around a reference to the created table:  hbase> t1 = create 't1', 'f1'Which gives you a reference to the table named 't1', on which you can then call methods.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>HBase Shell, version 0.98.12.1-hadoop2, rb00ec5da604d64a0bdc7d92452b1e0559f0f5d73, Sun May 17 12:55:03 PDT 2015</p><p>Type ‘help “COMMAND”‘, </p><p>(e.g. ‘help “get”‘ – the quotes are necessary) for help on a specific command.<br>Commands are grouped. </p><p>Type ‘help “COMMAND_GROUP”‘, </p><p>(e.g. ‘help “general”‘) for help on a command group.</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">COMMAND GROUPS:  Group name: general  Commands: status, table_help, version, whoami  Group name: ddl  Commands: alter, alter_async, alter_status, create, describe, disable, disable_all, drop, drop_all, enable, enable_all, exists, get_table, is_disabled, is_enabled, list, show_filters  Group name: namespace  Commands: alter_namespace, create_namespace, describe_namespace, drop_namespace, list_namespace, list_namespace_tables  Group name: dml  Commands: append, count, delete, deleteall, get, get_counter, get_splits, incr, put, scan, truncate, truncate_preserve  Group name: tools  Commands: assign, balance_switch, balancer, catalogjanitor_enabled, catalogjanitor_run, catalogjanitor_switch, close_region, compact, compact_rs, flush, hlog_roll, major_compact, merge_region, move, split, trace, unassign, zk_dump  Group name: replication  Commands: add_peer, disable_peer, disable_table_replication, enable_peer, enable_table_replication, list_peers, list_replicated_tables, remove_peer, set_peer_tableCFs, show_peer_tableCFs  Group name: snapshots  Commands: clone_snapshot, delete_all_snapshot, delete_snapshot, list_snapshots, restore_snapshot, snapshot  Group name: security  Commands: grant, revoke, user_permission  Group name: visibility labels  Commands: add_labels, clear_auths, get_auths, list_labels, set_auths, set_visibility<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>SHELL USAGE:Quote all names in HBase Shell such as table and column names.  Commas delimit command parameters.  Type &lt;RETURN&gt; after entering a command to run it.Dictionaries of configuration used in the creation and alteration of tables are Ruby Hashes. They look like this:  &amp;#123;&#39;key1&#39; =&gt; &#39;value1&#39;, &#39;key2&#39; =&gt; &#39;value2&#39;, ...&amp;#125;and are opened and closed with curley-braces.  Key/values are delimited by the &#39;=&gt;&#39; character combination.  Usually keys are predefined constants such as NAME, VERSIONS, COMPRESSION, etc.  Constants do not need to be quoted.  Type &#39;Object.constants&#39; to see a (messy) list of all constants in the environment.If you are using binary keys or values and need to enter them in the shell, use double-quote&#39;d hexadecimal representation. For example:  hbase&gt; get &#39;t1&#39;, &quot;key\x03\x3f\xcd&quot;  hbase&gt; get &#39;t1&#39;, &quot;key\003\023\011&quot;  hbase&gt; put &#39;t1&#39;, &quot;test\xef\xff&quot;, &#39;f1:&#39;, &quot;\x01\x33\x40&quot;The HBase shell is the (J)Ruby IRB with the above HBase-specific commands added. For more on the HBase Shell, see http://hbase.apache.org/book.html</code></pre><pre><code>Here is some help for this command:Put a delete cell value at specified table/row/column and optionallytimestamp coordinates.  Deletes must match the deleted cell&#39;scoordinates exactly.  When scanning, a delete cell suppresses olderversions. To delete a cell from  &#39;t1&#39; at row &#39;r1&#39; under column &#39;c1&#39;marked with the time &#39;ts1&#39;, do:  hbase&gt; delete &#39;ns1:t1&#39;, &#39;r1&#39;, &#39;c1&#39;, ts1  hbase&gt; delete &#39;t1&#39;, &#39;r1&#39;, &#39;c1&#39;, ts1  hbase&gt; delete &#39;t1&#39;, &#39;r1&#39;, &#39;c1&#39;, ts1, &amp;#123;VISIBILITY=&gt;&#39;PRIVATE|SECRET&#39;&amp;#125;The same command can also be run on a table reference. Suppose you had a referencet to table &#39;t1&#39;, the corresponding command would be:  hbase&gt; t.delete &#39;r1&#39;, &#39;c1&#39;,  ts1  hbase&gt; t.delete &#39;r1&#39;, &#39;c1&#39;,  ts1, &amp;#123;VISIBILITY=&gt;&#39;PRIVATE|SECRET&#39;&amp;#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqoop学习</title>
      <link href="/2019/01/13/Sqoop%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/13/Sqoop%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Sqoop简介"><a href="#一、Sqoop简介" class="headerlink" title="一、Sqoop简介"></a>一、Sqoop简介</h1><p><a href="http://sqoop.apache.org/">官网</a></p><blockquote><ul><li><p>是将关系数据库（oracle、mysql、postgresql等）数据与hadoop数据进行<code>转换的工具</code>。</p></li><li><p>可以将一个关系型数据库(例如MySQL、Oracle)中的数据导入到Hadoop(例如HDFS、Hive、Hbase)中，也可以将Hadoop(例如HDFS、Hive、Hbase)中的数据导入到关系型数据库(例如Mysql、Oracle)中。</p></li></ul></blockquote><p>版本：(两个版本完全不兼容)</p><ul><li><p>sqoop1：1.4.x    （推荐）</p></li><li><p>sqoop2：1.99.x</p></li></ul><p><img src="https://wx1.sinaimg.cn/large/005zftzDly1g1gjqrd7n8j30se0c9glv.jpg"></p><h1 id="二、sqoop-架构"><a href="#二、sqoop-架构" class="headerlink" title="二、sqoop 架构"></a>二、sqoop 架构</h1><p>hadoop生态系统的架构最简单的框架。</p><blockquote><p>sqoop1由client端直接接入hadoop，任务通过解析生成对应的mapreduce执行</p></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDly1g1gjqvsixcj30pk0fsmxf.jpg"></p><h1 id="三、Sqoop安装"><a href="#三、Sqoop安装" class="headerlink" title="三、Sqoop安装"></a>三、Sqoop安装</h1><h2 id="1、安装包解压："><a href="#1、安装包解压：" class="headerlink" title="1、安装包解压："></a>1、安装包解压：</h2><p>Sqoop1  : <a href="http://mirrors.shu.edu.cn/apache/sqoop/1.99.7">1.4.7</a> (推荐) </p><p>Sqoop2 :  <a href="http://mirrors.shu.edu.cn/apache/sqoop/1.99.7">1.99.7</a></p><h2 id="2、配置环境变量（追加）"><a href="#2、配置环境变量（追加）" class="headerlink" title="2、配置环境变量（追加）"></a>2、配置环境变量（追加）</h2><blockquote><p>vim  ~/.bash_profile</p></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">JAVA_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/soft/jdk1.8.0_191</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$JAVA_HOME/bin</span><span class="token attr-name">HADOOP_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/soft/hadoop-2.6.5</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><span class="token attr-name">ZOOKEEPER_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/soft/zookeeper-3.4.13</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$ZOOKEEPER_HOME/bin</span><span class="token attr-name">HIVE_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/soft/apache-hive-1.2.1-bin</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$HIVE_HOME/bin</span><span class="token attr-name">SQOOP_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/soft/sqoop-1.4.6</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$SQOOP_HOME/bin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(编辑结束后，保存并退出，然后在控制台输入下面的命令，从而是环境变量生效)</p><p>链接资源：</p><blockquote><p>source /etc/profile</p></blockquote><h2 id="3、添加数据库驱动包"><a href="#3、添加数据库驱动包" class="headerlink" title="3、添加数据库驱动包"></a>3、添加数据库驱动包</h2><blockquote><p>在Sqoop的安装解压目录下的lib目录下添加jar包</p><p>mysql-connector-java-5.1.10.jar</p><p>用以连接Mysql</p></blockquote><h2 id="4、重命名配置文件"><a href="#4、重命名配置文件" class="headerlink" title="4、重命名配置文件"></a>4、重命名配置文件</h2><p>在Sqoop的解压安装目录下的conf目录下</p><pre class="line-numbers language-shell"><code class="language-shell">mv sqoop-env-template.sh sqoop-env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑sqoop-env.sh</p><pre class="line-numbers language-sh"><code class="language-sh">#Set path to where bin/hadoop is availableexport HADOOP_COMMON_HOME=/usr/soft/hadoop-2.6.5#Set path to where hadoop-*-core.jar is availableexport HADOOP_MAPRED_HOME=/usr/soft/hadoop-2.6.5#set the path to where bin/hbase is availableexport HBASE_HOME=/usr/soft/hbase-1.2.9#Set the path to where bin/hive is availableexport HIVE_HOME=/usr/soft/apache-hive-1.2.1-bin#Set the path for where zookeper config dir is#export ZOOCFGDIR=/usr/soft/zookeeper-3.4.13export ZOOKEEPER_HOME=/usr/soft/zookeeper-3.4.13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、修改配置configure-sqoop"><a href="#5、修改配置configure-sqoop" class="headerlink" title="5、修改配置configure-sqoop"></a>5、修改配置configure-sqoop</h2><p>在Sqoop的解压安装目录的bin目录下</p><blockquote><p>注释掉未安装服务相关内容</p><p>例如（HBase、HCatalog、Accumulo）：</p></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#if [ -z "$&amp;#123;HCAT_HOME&amp;#125;" ]; then</span><span class="token comment" spellcheck="true">#  if [ -d "/usr/lib/hive-hcatalog" ]; then</span><span class="token comment" spellcheck="true">#    HCAT_HOME=/usr/lib/hive-hcatalog</span><span class="token comment" spellcheck="true">#  elif [ -d "/usr/lib/hcatalog" ]; then</span><span class="token comment" spellcheck="true">#    HCAT_HOME=/usr/lib/hcatalog</span><span class="token comment" spellcheck="true">#  else</span><span class="token comment" spellcheck="true">#    HCAT_HOME=$&amp;#123;SQOOP_HOME&amp;#125;/../hive-hcatalog</span><span class="token comment" spellcheck="true">#    if [ ! -d $&amp;#123;HCAT_HOME&amp;#125; ]; then</span><span class="token comment" spellcheck="true">#       HCAT_HOME=$&amp;#123;SQOOP_HOME&amp;#125;/../hcatalog</span><span class="token comment" spellcheck="true">#    fi</span><span class="token comment" spellcheck="true">#  fi</span><span class="token comment" spellcheck="true">#fi</span><span class="token comment" spellcheck="true">#if [ -z "$&amp;#123;ACCUMULO_HOME&amp;#125;" ]; then</span><span class="token comment" spellcheck="true">#  if [ -d "/usr/lib/accumulo" ]; then</span><span class="token comment" spellcheck="true">#    ACCUMULO_HOME=/usr/lib/accumulo</span><span class="token comment" spellcheck="true">#  else</span><span class="token comment" spellcheck="true">#    ACCUMULO_HOME=$&amp;#123;SQOOP_HOME&amp;#125;/../accumulo</span><span class="token comment" spellcheck="true">#  fi</span><span class="token comment" spellcheck="true">#fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6、运行sqoop"><a href="#6、运行sqoop" class="headerlink" title="6、运行sqoop"></a>6、运行sqoop</h2><pre class="line-numbers language-shell"><code class="language-shell">sqoop version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前提:</p><p>MySQL运行正常，且服务启动</p><pre class="line-numbers language-shell"><code class="language-shell">service mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动sqoop连接mysql</p><pre class="line-numbers language-shell"><code class="language-shell">sqoop list–databases --connect jdbc:mysql://node00:3306/ -username root -password 123456或sqoop list-tables --connect jdbc:mysql://192.168.198.128:3306/mysql --username root --password 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>警告：</code></p><p>关于zookeeper环境变量配置的问题：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@node00 conf]# sqoop versionWarning: /usr/soft/sqoop-1.4.6/bin/../../zookeeper does not exist! Accumulo imports will fail.Please set $ZOOKEEPER_HOME to the root of your Zookeeper installation.19/01/18 17:02:14 INFO sqoop.Sqoop: Running Sqoop version: 1.4.6Sqoop 1.4.6git commit id c0c5a81723759fa575844a0a1eae8f510fa32c25Compiled by root on Mon Apr 27 14:38:36 CST 2015<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>解决方案：</code></p><p>在sqoop解压安装目录的conf目录下，在sqoop-env.sh文件中</p><pre class="line-numbers language-shell"><code class="language-shell"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加本地ZOOKEEPER_HOME的配置</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">export</span> <span class="token attr-value">ZOOKEEPER_HOME=/usr/soft/zookeeper-3.4.13</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="四、Sqoop导入导出选项"><a href="#四、Sqoop导入导出选项" class="headerlink" title="四、Sqoop导入导出选项"></a>四、Sqoop导入导出选项</h1><h2 id="1、导入工具import："><a href="#1、导入工具import：" class="headerlink" title="1、导入工具import："></a>1、导入工具import：</h2><pre><code>   选项                                 含义说明--append                            将数据追加到HDFS上一个已存在的数据集上--as-avrodatafile                    将数据导入到Avro数据文件--as-sequencefile                    将数据导入到SequenceFile--as-textfile                        将数据导入到普通文本文件（默认）--boundary-query &lt;statement&gt;        边界查询，用于创建分片（InputSplit）--columns &lt;col,col,col…&gt;            从表中导出指定的一组列的数据--delete-target-dir                    如果指定目录存在，则先删除掉--direct                            使用直接导入模式（优化导入速度）--direct-split-size &lt;n&gt;                分割输入stream的字节大小（在直接导入模式下）--fetch-size &lt;n&gt;                    从数据库中批量读取记录数--inline-lob-limit &lt;n&gt;                设置内联的LOB对象的大小-m,--num-mappers &lt;n&gt;                使用n个map任务并行导入数据-e,--query &lt;statement&gt;                 导入的查询语句--split-by &lt;column-name&gt;            指定按照哪个列去分割数据--table &lt;table-name&gt;                导入的源表表名--target-dir &lt;dir&gt;                    导入HDFS的目标路径--warehouse-dir &lt;dir&gt;                HDFS存放表的根路径--where &lt;where clause&gt;                指定导出时所使用的查询条件-z,--compress                        启用压缩--compression-codec &lt;c&gt;                指定Hadoop的codec方式（默认gzip）--null-string &lt;null-string&gt;            如果指定列为字符串类型，使用指定字符串替换值为null的该类                                     列的值--null-non-string &lt;null-string&gt;     如果指定列为非字符串类型，使用指定字符串替换值为null的该                                     类列的值</code></pre><h2 id="2、导出工具export："><a href="#2、导出工具export：" class="headerlink" title="2、导出工具export："></a>2、导出工具export：</h2><pre><code>   选项                                         含义说明--validate &lt;class-name&gt;             启用数据副本验证功能，仅支持单表拷贝，可以指定验证使用的实现类--validation-threshold &lt;class-name&gt;      指定验证门限所使用的类--direct                              使用直接导出模式（优化速度）--export-dir &lt;dir&gt;                      导出过程中HDFS源路径--m,--num-mappers &lt;n&gt;                  使用n个map任务并行导出--table &lt;table-name&gt;                  导出的目的表名称--call &lt;stored-proc-name&gt;              导出数据调用的指定存储过程名--update-key &lt;col-name&gt;                  更新参考的列名称，多个列名使用逗号分隔--update-mode &lt;mode&gt;                指定更新策略，包括：updateonly（默认）、allowinsert--input-null-string &lt;null-string&gt;      使用指定字符串，替换字符串类型值为null的列--input-null-non-string &lt;null-string&gt;    使用指定字符串，替换非字符串类型值为null的列--staging-table &lt;staging-table-name&gt;    在数据导出到数据库之前，数据临时存放的表名称--clear-staging-table                  清除工作区中临时存放的数据--batch                                  使用批量模式导出</code></pre><h1 id="四、Sqoop导入导出操作"><a href="#四、Sqoop导入导出操作" class="headerlink" title="四、Sqoop导入导出操作"></a>四、Sqoop导入导出操作</h1><h2 id="1、导入"><a href="#1、导入" class="headerlink" title="1、导入"></a>1、导入</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDly1g1gje9uswwj30rp0gxmzv.jpg"></p><pre class="line-numbers language-shell"><code class="language-shell">sqoop     ##sqoop命令import    ##表示导入--connect jdbc:mysql://ip:3306/sqoop    ##告诉jdbc，连接mysql的url--username root              ##连接mysql的用户名--password 123456            ##连接mysql的密码--table myuser               ##从mysql到出的表名-m 1                         ##使用1个map任务进行导出--hive-import                ##把mysql表数据导入到hive中，如果不适用该选项意味着导入到hdfs中--target-dir <dir>           ##HDFS destination dir <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1、将MySQL中的数据导入到HDFS-Hive-Hbase"><a href="#1、将MySQL中的数据导入到HDFS-Hive-Hbase" class="headerlink" title="1、将MySQL中的数据导入到HDFS/Hive/Hbase"></a>1、将MySQL中的数据导入到HDFS/Hive/Hbase</h3><pre class="line-numbers language-shell"><code class="language-shell">MySQL--> HDFS：sqoop import --connect jdbc:mysql://node00:3306/test --username root --password 123456 --table myuser -m 1 -target-dir hdfs://Sunrise/my02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">MySQL--> Hive：sqoop import --connect jdbc:mysql://node00:3306/test --username root --password root --table myuser --hive-import -m 1##由于使用Sqoop从MySQL导入数据到Hive需要指定target-dir，因此导入的是普通表而不能为外部表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">MySQL--> HBase:sqoop import --connect jdbc:mysql://node00:3306/test --username root --password 1234 --table mysqoop --hbase-create-table --hbase-table sukie  --hbase-row-key name --column-family cf1 -m 1##选项解释--column-family        ##指定列族名--hbase-row-key        ##指定rowkey对应的mysql中的键--hbase-create-table   ##自动在Hbase中创建表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、导出"><a href="#2、导出" class="headerlink" title="2、导出"></a>2、导出</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDly1g1gjeoi0pej30tu0hqq5y.jpg"></p><pre class="line-numbers language-shell"><code class="language-shell">sqoopexport                                 ##表示如hive数据导出到mysql--connect jdbc:mysql://ip:3306/test --username root --password 123 --table mysqoop                       ##mysql中的表（必须已存在）--export-dir /root/hive               ## hive中导出的文件目录--fields-terminated-by '\t'           ##表示如hive导出文件中的行的字段分隔符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、使用Sqoop将HDFS-Hive-HBase中的数据导出到MySQL"><a href="#2、使用Sqoop将HDFS-Hive-HBase中的数据导出到MySQL" class="headerlink" title="2、使用Sqoop将HDFS/Hive/HBase中的数据导出到MySQL"></a>2、使用Sqoop将HDFS/Hive/HBase中的数据导出到MySQL</h3><pre class="line-numbers language-shell"><code class="language-shell">HDFS-->MySQL:sqoop export --connect jdbc:mysql://192.168.198.128:3306/test --username root --password 123 --table my --export-dir /root/my<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>将HDFS/Hive/HBase中的数据导出到MySQL操作都基本大同小异</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">Hive-->MySQL:sqoop export --connect jdbc:mysql://192.168.198.128:3306/test --username root --password 123 --table testa --export-dir /user/hive/warehouse/testa --input-fields-terminated-by '\001’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>HBase–&gt;mysql:</p><blockquote><p> 目前没有直接的命令将HBase的数据导出到mysql，但可以先将数据导出到hdfs，再导出到mysql </p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">sqoop export --connect jdbc:mysql://192.168.198.128:3306/mysql --username root --password 123456 --table bb --export-dir  '/mysql_data/part-m-00000'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>也可以通过Hive建立2个表，一个外部表是基于这个Hbase表的，另一个是单纯的基于hdfs的hive原生表，然后把外部表的数据导入到原生表（临时），然后通过hive将临时表里面的数据导出到mysql</p></blockquote><p>1、mysql建立空表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span><span class="token keyword">TABLE</span>  <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>rowkey<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span>  <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span>   <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MyISAM  <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、Hbase建立employee表,并加载数据</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token string">'employee'</span><span class="token punctuation">,</span><span class="token string">'info'</span>put <span class="token string">'employee'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'info:id'</span><span class="token punctuation">,</span><span class="token number">1</span>put <span class="token string">'employee'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'info:name'</span><span class="token punctuation">,</span><span class="token string">'peter'</span>put <span class="token string">'employee'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'info:id'</span><span class="token punctuation">,</span><span class="token number">2</span>put <span class="token string">'employee'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'info:name'</span><span class="token punctuation">,</span><span class="token string">'paul'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、建立Hive外部表</p><p>hive 有分为原生表和外部表，原生表是以简单文件方式存储在hdfs里面，外部表依赖别的框架，比如Hbase，我们现在建立一个依赖于我们刚刚建立的employee hbase表的hive 外部表 </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> EXTERNAL <span class="token keyword">TABLE</span> h_employee<span class="token punctuation">(</span><span class="token keyword">key</span> <span class="token keyword">int</span><span class="token punctuation">,</span> id <span class="token keyword">int</span><span class="token punctuation">,</span> name string<span class="token punctuation">)</span> STORED <span class="token keyword">BY</span> <span class="token string">'org.apache.hadoop.hive.hbase.HBaseStorageHandler'</span><span class="token keyword">WITH</span> SERDEPROPERTIES <span class="token punctuation">(</span><span class="token string">"hbase.columns.mapping"</span> <span class="token operator">=</span> <span class="token string">":key, info:id,info:name"</span><span class="token punctuation">)</span>TBLPROPERTIES <span class="token punctuation">(</span><span class="token string">"hbase.table.name"</span> <span class="token operator">=</span> <span class="token string">"employee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>hive&gt; select * from h_employee;OK1   1   peter2   2   paul</code></pre><p>4、建立Hive原生表</p><p>这个hive原生表只是用于导出的时候临时使用的，所以取名叫 h_employee_export，字段之间的分隔符用逗号</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> h_employee_export<span class="token punctuation">(</span>    <span class="token keyword">key</span> <span class="token keyword">INT</span><span class="token punctuation">,</span>     id <span class="token keyword">INT</span><span class="token punctuation">,</span>    name STRING<span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">'\054'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、源Hive表导入数据到临时表</p><p>将数据从 h_employee(基于Hbase的外部表)导入到 h_employee_export(原生Hive表) </p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> h_employee_export <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> h_employee<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> h_employee_export<span class="token punctuation">;</span>OK<span class="token number">1</span>   <span class="token number">1</span>   peter<span class="token number">2</span>   <span class="token number">2</span>   paul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>我们去看下实际存储的文本文件是什么样子的 </p><pre class="line-numbers language-shell"><code class="language-shell">$ hdfs dfs -cat /user/hive/warehouse/h_employee_export/000000_01,1,peter2,2,paul<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>6、从Hive导出数据到mysql</p><pre class="line-numbers language-shell"><code class="language-shell">$ sqoop export --connect jdbc:mysql://localhost:3306/sqoop_test --username root --password root --table employee -m 1 --export-dir /user/hive/warehouse/h_employee_export/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、注意</p><p>在这段日志中有这样一句话</p><pre><code>`14/12/05 08:49:46 INFO mapreduce.Job: The url ``to` `track the job: https://hadoop01:8088/proxy/application_1406097234796_0037/`</code></pre><p>意思是你可以用  浏览器 访问这个地址去看下任务的执行情况，如果你的任务长时间卡主没结束就是出错了，可以去这个地址查看详细的错误日志 </p><p>8、查询结果</p><pre><code>mysql&gt; select * from employee;+--------+----+-------+| rowkey | id | name  |+--------+----+-------+|      1 |  1 | peter ||      2 |  2 | paul  |+--------+----+-------+2 rows in set (0.00 sec) mysql&gt;</code></pre><pre class="line-numbers language-shell"><code class="language-shell">1、Sqoop增量导入sqoop import -D sqoop.hbase.add.row.key=true --connect jdbc:mysql://node00:3306/spider --username root --password root --table TEST_GOODS --columns ID,GOODS_NAME,GOODS_PRICE --hbase-create-table --hbase-table t_goods --column-family cf --hbase-row-key ID --incremental lastmodified --check-column U_DATE --last-value '2017-06-27' --split-by U_DATE--incremental lastmodified 增量导入支持两种模式 append 递增的列；lastmodified时间戳。--check-column 增量导入时参考的列--last-value 最小值，这个例子中表示导入2017-06-27到今天的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">2、Sqoop job：   sqoop job    --create testjob01    --import    --connect jdbc:mysql://node00:3306/spider    --username root --password root    --table TEST_GOODS    --columns ID,GOODS_NAME,GOODS_PRICE    --hbase-create-table    --hbase-table t_goods    --column-family cf    --hbase-row-key ID    -m 1   设置定时执行以上sqoop job   使用linux定时器：crontab -e   例如每天执行   0 0 * * * /opt/local/sqoop-1.4.6/bin/sqoop job ….   --exec testjob01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sqoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive中常用的UDF函数总结</title>
      <link href="/2019/01/12/Hive%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84UDF%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
      <url>/2019/01/12/Hive%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84UDF%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>一、网络资源</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">1</span>、类型转换cast<span class="token punctuation">(</span>expr <span class="token keyword">as</span> <span class="token operator">&lt;</span><span class="token keyword">type</span><span class="token operator">></span><span class="token punctuation">)</span>  如： cast<span class="token punctuation">(</span><span class="token string">'1'</span> <span class="token keyword">as</span> <span class="token keyword">BIGINT</span><span class="token punctuation">)</span> 字符串转换为数字<span class="token number">2</span>、<span class="token keyword">if</span>语句<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> testCondition<span class="token punctuation">,</span> T valueTrue<span class="token punctuation">,</span> T valueFalseOrNull<span class="token punctuation">)</span>如果 testCondition 为 <span class="token boolean">true</span> 返回 valueTrue， 否则返回 valueFalse 或 <span class="token boolean">Null</span>如： <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> 结果为<span class="token number">1</span><span class="token number">3</span>、<span class="token keyword">case</span>语句<span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> <span class="token number">a</span> <span class="token keyword">THEN</span> <span class="token number">b</span> <span class="token punctuation">[</span><span class="token keyword">WHEN</span> <span class="token number">c</span> <span class="token keyword">THEN</span> <span class="token number">d</span><span class="token punctuation">]</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token keyword">ELSE</span> <span class="token number">e</span><span class="token punctuation">]</span> <span class="token keyword">END</span>如：<span class="token keyword">case</span> <span class="token keyword">when</span> <span class="token number">a</span> <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">b</span> <span class="token keyword">then</span> <span class="token number">b</span> <span class="token keyword">when</span> <span class="token number">a</span> <span class="token operator">=</span><span class="token operator">=</span> <span class="token number">c</span> <span class="token keyword">then</span> <span class="token number">c</span> <span class="token keyword">else</span> <span class="token number">d</span> <span class="token keyword">end</span><span class="token number">4</span>、字符串连接concat<span class="token punctuation">(</span>string1<span class="token punctuation">,</span> string2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>如：concat<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">' word'</span><span class="token punctuation">)</span> 结果为 hello word<span class="token number">5</span>、计算字符串长度length<span class="token punctuation">(</span>string<span class="token punctuation">)</span>如：length<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> 结果为<span class="token number">5</span><span class="token number">6</span>、查找子串的位置locate<span class="token punctuation">(</span>string substr<span class="token punctuation">,</span> string str<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">]</span><span class="token punctuation">)</span>如：locate<span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'100%'</span><span class="token punctuation">)</span> 返回<span class="token number">3</span><span class="token number">7</span>、聚合某一列数据collect_set<span class="token punctuation">(</span>col<span class="token punctuation">)</span>    会去重collect_list<span class="token punctuation">(</span>col<span class="token punctuation">)</span>    不会去重这两个函数均会返回一个索引数组将数组转换为分割符分割的字符串，如下concat_ws<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> collect_set<span class="token punctuation">(</span>tblsecondtagmap<span class="token punctuation">.</span>tag_name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token number">8</span>、将数组或者map类型的数据分成多行explode<span class="token punctuation">(</span>ARRAY<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token number">a</span><span class="token punctuation">)</span>explode<span class="token punctuation">(</span>MAP<span class="token operator">&lt;</span>Tkey<span class="token punctuation">,</span>Tvalue<span class="token operator">></span> m<span class="token punctuation">)</span>如：<span class="token keyword">select</span> explode<span class="token punctuation">(</span>array<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   对应<span class="token number">abc</span>三行ABC<span class="token keyword">select</span> explode<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>对应键值对三行A    <span class="token number">10</span>B    <span class="token number">20</span>C    <span class="token number">30</span><span class="token number">9</span>、解析json数据get_json_object<span class="token punctuation">(</span>string json_string<span class="token punctuation">,</span> string path<span class="token punctuation">)</span>path在不同的hive版本中支持情况不同$ : json对象的根<span class="token punctuation">.</span> : 子对象的操作符<span class="token punctuation">[</span><span class="token punctuation">]</span> : 数组类型的下标形式<span class="token operator">*</span> :  通配符，结合 <span class="token punctuation">[</span><span class="token punctuation">]</span> 一起使用如：get_json_object<span class="token punctuation">(</span>'<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"name":"bob"&amp;#125;', '$.name')  返回bob</span>       get_json_object<span class="token punctuation">(</span>'<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"name":["own","one"]&amp;#125;','$.name[]') 返回 ["own","one"]</span>       get_json_object<span class="token punctuation">(</span>'<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"name":["own","one"]&amp;#125;','$.name[0]') 返回 own</span><span class="token number">10</span>、支持的复杂数据类型array  数组类型，类比索引数组map   map类型， 类比关联数组<span class="token number">11</span>、支持<span class="token operator">rlike</span>语句<span class="token operator">rlike</span>支持正则表达式。如：title <span class="token operator">rlike</span> <span class="token string">'^.*?医.*?(公司|院|网|中心|会|联盟|所|门诊|店|厂|门户|集团|美容|整型).*?$'</span><span class="token number">12</span>、字母大小写转换upper<span class="token punctuation">(</span>string A<span class="token punctuation">)</span>   <span class="token function">ucase</span><span class="token punctuation">(</span>string A<span class="token punctuation">)</span>    将字符串转换为大写字母lower<span class="token punctuation">(</span>string A<span class="token punctuation">)</span>    <span class="token function">lcase</span><span class="token punctuation">(</span>string A<span class="token punctuation">)</span>     将字符串转换为小写字母<span class="token number">13</span>、时间戳与时间的转换from_unixtime<span class="token punctuation">(</span><span class="token keyword">bigint</span> unixtime<span class="token punctuation">[</span><span class="token punctuation">,</span> string format<span class="token punctuation">]</span><span class="token punctuation">)</span>    将时间戳转换为时间，形如“<span class="token number">2008</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">03</span>:<span class="token number">28</span>:<span class="token number">54</span>”这种的形式unix_timestamp<span class="token punctuation">(</span>string <span class="token keyword">date</span><span class="token punctuation">)</span>                                   将时间转换为时间戳，将形如“<span class="token number">2008</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">07</span> <span class="token number">03</span>:<span class="token number">28</span>:<span class="token number">54</span>”这种形式的时间转换为时间戳<span class="token number">14</span>、获取时间或者日期year<span class="token punctuation">(</span>string <span class="token keyword">date</span><span class="token punctuation">)</span>         年    month<span class="token punctuation">(</span>string <span class="token keyword">date</span><span class="token punctuation">)</span>      月day<span class="token punctuation">(</span>string <span class="token keyword">date</span><span class="token punctuation">)</span>          日hour<span class="token punctuation">(</span>string <span class="token keyword">date</span><span class="token punctuation">)</span>         小时minute<span class="token punctuation">(</span>string <span class="token keyword">date</span><span class="token punctuation">)</span>      分钟second<span class="token punctuation">(</span>string <span class="token keyword">date</span><span class="token punctuation">)</span>     秒<span class="token comment" spellcheck="true">--PS</span><span class="token comment" spellcheck="true">--前三个函数支持‘2008-10-07 03:28:54’ ‘2008-10-07’ 这两种形式</span><span class="token comment" spellcheck="true">--后三个函数支持‘2008-10-07 03:28:54’ ‘03:28:54’ 这两种形式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive优化</title>
      <link href="/2019/01/12/Hive%E4%BC%98%E5%8C%96/"/>
      <url>/2019/01/12/Hive%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="一、核心思想："><a href="#一、核心思想：" class="headerlink" title="一、核心思想："></a>一、核心思想：</h2><blockquote><p>把Hive SQL 当做MapReduce程序进行优化</p></blockquote><p><code>注意：</code>以下不能HQL转化为Mapreduce任务运行</p><p>—select 仅查询本表字段</p><p>—where 仅对本表字段做条件过滤</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--比如</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><a id="more"></a><h2 id="二、explain"><a href="#二、explain" class="headerlink" title="二、explain"></a>二、explain</h2><blockquote><p>用以显示任务执行计划</p><p>格式：</p><p>EXPLAIN [EXTENDED|DEPENDENCY|AUTHORIZATION] query</p></blockquote><p><code>语法解释</code></p><blockquote><p>从语法组成可以看出来是一个“explain ”+三个可选参数+查询语句。大家可以积极尝试一下，后面两个显示内容很简单的，我介绍一下第一个 extended 这个可以显示hql语句的语法树</p><p>其次，执行计划一共有三个部分：</p><ul><li><p>这个语句的抽象语法树</p></li><li><p>这个计划不同阶段之间的依赖关系</p></li><li><p>对于每个阶段的详细描述</p></li></ul></blockquote><p><code>例子：</code></p><blockquote><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> log<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><code>拓展</code>课下查询MySQl的执行计划。</p><h2 id="三、Hive运行方式"><a href="#三、Hive运行方式" class="headerlink" title="三、Hive运行方式"></a>三、Hive运行方式</h2><h3 id="集群模式："><a href="#集群模式：" class="headerlink" title="集群模式："></a>集群模式：</h3><pre class="line-numbers language-sql"><code class="language-sql">执行hql：hive<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> log<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>结论：</code></p><blockquote><p>函数（如count）是在reduce阶段进行<br>默认提交到yarn所在的节点上运行，</p></blockquote><hr><h3 id="优化一"><a href="#优化一" class="headerlink" title="优化一:"></a>优化一:</h3><p>设置  本地模式（运行速度加快。但对加载文件有限制）</p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>查看：hive<span class="token operator">></span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>但是</code>如果加载文件的最大值大于配置（默认配置为100M），仍会使用集群模式运行（在yarn所在的节点）</p><pre class="line-numbers language-sql"><code class="language-sql">查看最大加载文件hive<span class="token operator">></span> <span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span class="token punctuation">.</span>inputbytes<span class="token punctuation">.</span>max<span class="token punctuation">;</span>显示：hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span class="token punctuation">.</span>inputbytes<span class="token punctuation">.</span>max<span class="token operator">=</span><span class="token number">134217728</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="优化二："><a href="#优化二：" class="headerlink" title="优化二："></a>优化二：</h3><p>设置 严格模式:</p><pre class="line-numbers language-sql"><code class="language-sql">通过设置以下参数开启严格模式<span class="token punctuation">[</span>防止误操作<span class="token punctuation">]</span>：hive<span class="token operator">></span> <span class="token keyword">set</span> hive<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>mode<span class="token operator">=</span>strict<span class="token punctuation">;</span>（默认为：nonstrict非严格模式）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>但是</code>存在查询限制:</p><p>​          可以防止用户执行那些可能产生不好的效果的查询。即某些查询在严格模式下无法执行。</p><blockquote><p>1、对分区表查询时，必须添加where对于分区字段的条件过滤；</p><p>就是用户不允许扫描所有的分区。进行这个限制的原因是，通常分区表都拥有非常大的数据集，而且数据增加迅速。如果没有进行分区限制的查询可能会消耗令人不可接受的巨大资源来处理这个表</p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> day_table <span class="token keyword">where</span> dt<span class="token operator">=</span><span class="token string">'2019-01-13'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、order by语句必须包含limit输出限制；</p><p>因为orderby为了执行排序过程会讲所有的结果分发到同一个reducer中进行处理，强烈要求用户增加这个limit语句可以防止reducer额外执行很长一段时间。</p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> log <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>这里的<span class="token number">1</span>， 表示显示前多少条记录，只能设一个数字和Mysql（可以从<span class="token number">0</span> 开始）不同的是，它只能从<span class="token number">1</span>开始mysql可以有两个数字，表示从第几条开始，显示几条<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、限制执行笛卡尔积的查询；</p><p>因为在关系型数据库中，可以使用where充当on，但是在hive数据仓库中，必须使用on，否则，查询会出此案不可控的情况。</p></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzhry9ni0xj30m10cjdgp.jpg" alt="imit"></p><h3 id="优化三："><a href="#优化三：" class="headerlink" title="优化三："></a>优化三：</h3><p>设置并行计算:</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--通过设置一下参数设置并行模式</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>parallel<span class="token operator">=</span><span class="token boolean">true</span><span class="token comment" spellcheck="true">--通过以下设置一次SQL计算中允许并行执行的job个数的最大值</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>parallel<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行sql：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> t1<span class="token number">.cf1</span><span class="token punctuation">,</span>t2<span class="token number">.cf2</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token number">cf1</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">)</span> t1<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token number">cf2</span> <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">)</span> t2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="四、Hive排序"><a href="#四、Hive排序" class="headerlink" title="四、Hive排序"></a>四、Hive排序</h2><h3 id="1、Order-By"><a href="#1、Order-By" class="headerlink" title="1、Order By"></a>1、Order By</h3><p>— 对于查询结果做<code>全局</code>排序，只允许有<code>一个</code>reduce处理<br>（当数据量较大时，reduce数量有限，应慎用。</p><p>​     严格模式下，必须结合limit来使用）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> log <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">limit</span> <span class="token number">9</span><span class="token punctuation">;</span>    （结果有序）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示：</p><blockquote><p>Time taken: 102.065 seconds, Fetched: 7 row(s)</p></blockquote><h3 id="2、Sort-By"><a href="#2、Sort-By" class="headerlink" title="2、Sort By"></a>2、Sort By</h3><p>– 对于<code>单个</code>reduce的数据进行排序</p><p>–局部（单个reduce）有序，全局无序</p><pre><code>可以通过设置mapred.reduce.tasks的值来控制reduce的数，然后对reduce输出的结果做二次排序</code></pre><p><code>案例</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> log sort <span class="token keyword">by</span> id<span class="token punctuation">;</span>       <span class="token punctuation">(</span>结果无序<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>显示</code></p><blockquote><p>Time taken: 147.077 seconds, Fetched: 7 row(s)</p></blockquote><h3 id="3、Distribute-By"><a href="#3、Distribute-By" class="headerlink" title="3、Distribute By"></a>3、Distribute By</h3><p>– 分区排序，经常和 Sort By 结合使用 全局有序，局部无序</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> log distribute <span class="token keyword">by</span> id<span class="token punctuation">;</span>     （结果无序）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Time taken: 144.708 seconds, Fetched: 7 row(s)</p></blockquote><p><code>注意：</code>hive要求DISTRIBUTE BY语句出现在SORT BY语句之前</p><blockquote><p>Distribute By可以将Map阶段输出的数据按指定的字段划分到不同的reduce文件中，然后，sort by 对reduce阶段的输出数据做排序。</p></blockquote><p>情况一、(无序)</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">table</span> distrubute <span class="token keyword">by</span> class  sort <span class="token keyword">by</span> acore<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>情况二、（？？）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> log distribute <span class="token keyword">by</span> id <span class="token punctuation">)</span> t2 sort <span class="token keyword">by</span> t2<span class="token punctuation">.</span>id <span class="token keyword">asc</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、Cluster-By"><a href="#4、Cluster-By" class="headerlink" title="4、Cluster By"></a>4、Cluster By</h3><p>– 相当于 Sort By + Distribute By<br>（Cluster By不能通过asc、desc的方式指定排序规则；<br>可通过 distribute by column sort by column asc|desc 的方式）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> log cluster <span class="token keyword">by</span> id <span class="token punctuation">)</span> <span class="token number">a</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">a</span><span class="token punctuation">.</span>id <span class="token keyword">limit</span> <span class="token number">9</span> <span class="token punctuation">;</span> <span class="token punctuation">(</span>结果有序<span class="token punctuation">)</span><span class="token number">9</span> 在这里是表中数据记录的总条数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示：</p><blockquote><p> Time taken: 234.593 seconds, Fetched: 7 row(s)</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> log cluster <span class="token keyword">by</span> id<span class="token punctuation">)</span> <span class="token number">a</span>； <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、-Hive-Join-（重难点）"><a href="#五、-Hive-Join-（重难点）" class="headerlink" title="五、==Hive Join  （重难点）=="></a>五、==Hive Join  （重难点）==</h2><h3 id="1、Join-连接时，将小表（驱动表）放在join的左边"><a href="#1、Join-连接时，将小表（驱动表）放在join的左边" class="headerlink" title="1、Join 连接时，将小表（驱动表）放在join的左边"></a>1、Join 连接时，将小表（驱动表）放在join的左边</h3><h3 id="2、Map-Join-："><a href="#2、Map-Join-：" class="headerlink" title="2、Map Join ："></a>2、Map Join ：</h3><blockquote><p>因为Map Join 是在Map端且在内存中进行的，所以不需要启动Reduce任务，也没有shuffle阶段，从而在一定程度上节省资源，提高Join效率。</p></blockquote><h3 id="方式：（两种）"><a href="#方式：（两种）" class="headerlink" title="方式：（两种）"></a>方式：（两种）</h3><h4 id="1、SQL方式："><a href="#1、SQL方式：" class="headerlink" title="1、SQL方式："></a>1、SQL方式：</h4><p>​     在HQl语句中添加MapJoin标记（mapjoin）(将小表加入到内存，注意小表的大小)</p><p>​     语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token comment" spellcheck="true">/*+ MAPJOIN(smallTable) */</span>  smallTable<span class="token punctuation">.</span><span class="token keyword">key</span><span class="token punctuation">,</span>  bigTable<span class="token punctuation">.</span><span class="token keyword">value</span>               <span class="token keyword">FROM</span>  smallTable  <span class="token keyword">JOIN</span>  bigTable  <span class="token keyword">ON</span>  smallTable<span class="token punctuation">.</span><span class="token keyword">key</span>  <span class="token operator">=</span> bigTable<span class="token punctuation">.</span><span class="token keyword">key</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>案例：</code></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token comment" spellcheck="true">/*+ MAPJOIN(log1) */</span>  log<span class="token punctuation">.</span>id<span class="token punctuation">,</span>log1<span class="token punctuation">.</span>name              <span class="token keyword">FROM</span>  log  <span class="token keyword">JOIN</span>  log1  <span class="token keyword">ON</span>  log<span class="token punctuation">.</span>id  <span class="token operator">=</span> log1<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2、自动的MapJoin"><a href="#2、自动的MapJoin" class="headerlink" title="2、自动的MapJoin"></a>2、自动的MapJoin</h4><p>​           通过修改以下配置启用自动的mapjoin：</p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">set</span> hive<span class="token punctuation">.</span>auto<span class="token punctuation">.</span><span class="token keyword">convert</span><span class="token punctuation">.</span><span class="token keyword">join</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    （  该参数为true时，Hive自动对左边的表统计数据量，如果是小表就加入内存，即对小表使用Map join）</p><p>其他相关配置参数：</p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">set</span> hive<span class="token punctuation">.</span>mapjoin<span class="token punctuation">.</span>smalltable<span class="token punctuation">.</span>filesize<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认：大表小表判断的阈值25MB左右，如果表的大小小于该值则会被加载到内存中运行，可自定义）</p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">ignore</span><span class="token punctuation">.</span>mapjoin<span class="token punctuation">.</span>hint<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认值：true；是否忽略mapjoin hint 即mapjoin标记；如果为false，这则需要添加-MapJoin标记，mapjoin（smalltable））</p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">set</span> hive<span class="token punctuation">.</span>auto<span class="token punctuation">.</span><span class="token keyword">convert</span><span class="token punctuation">.</span><span class="token keyword">join</span><span class="token punctuation">.</span>noconditionaltask<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认值：true；将普通的join转化为普通的mapjoin时，是否将多个mapjoin转化为一个mapjoin）</p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">set</span> hive<span class="token punctuation">.</span>auto<span class="token punctuation">.</span><span class="token keyword">convert</span><span class="token punctuation">.</span><span class="token keyword">join</span><span class="token punctuation">.</span>noconditionaltask<span class="token punctuation">.</span>size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认：10M；将多个mapjoin转化为一个mapjoin时，其表的最大值为10M，可自定义）</p><h2 id="六、Map-Side聚合"><a href="#六、Map-Side聚合" class="headerlink" title="六、Map-Side聚合"></a>六、Map-Side聚合</h2><blockquote><p>相当于聚合函数：count（）</p></blockquote><p>设置参数，开启在Map端的聚合(相当于combiner)</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>map<span class="token punctuation">.</span>aggr<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相关配置参数：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>groupby<span class="token punctuation">.</span>mapaggr<span class="token punctuation">.</span>checkinterval；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认为：100000，表示 map端group by执行聚合时处理的多少行数据）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>map<span class="token punctuation">.</span>aggr<span class="token punctuation">.</span><span class="token keyword">hash</span><span class="token punctuation">.</span>min<span class="token punctuation">.</span>reduction；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认为：0.5，进行聚合的最小比例，预先取100000条数据聚合,如果聚合后的条数/100000&gt;0.5，则不再聚合）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>map<span class="token punctuation">.</span>aggr<span class="token punctuation">.</span><span class="token keyword">hash</span><span class="token punctuation">.</span>percentmemory<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认： 0.5 ，map端聚合使用的内存的最大值）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>map<span class="token punctuation">.</span>aggr<span class="token punctuation">.</span><span class="token keyword">hash</span><span class="token punctuation">.</span><span class="token keyword">force</span><span class="token punctuation">.</span>flush<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>threshold<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认为：0.9，map端做聚合操作是hash表的最大可用内容，大于该值则会触发flush</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>groupby<span class="token punctuation">.</span>skewindata；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认为：false，是否对GroupBy产生的数据倾斜做优化）</p><p><code>附加：</code></p><blockquote><ul><li>数据倾斜问题解决：多种方式（使用MapJoin、使用MapSide）</li></ul></blockquote><p><code>参考</code></p><p><a href="http://www.sohu.com/a/224276626_543508">http://www.sohu.com/a/224276626_543508</a></p><h2 id="七、控制Hive中Map和Reduce的数量"><a href="#七、控制Hive中Map和Reduce的数量" class="headerlink" title="七、控制Hive中Map和Reduce的数量"></a>七、控制Hive中Map和Reduce的数量</h2><h3 id="1、Map数量相关的参数"><a href="#1、Map数量相关的参数" class="headerlink" title="1、Map数量相关的参数"></a>1、Map数量相关的参数</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>max<span class="token punctuation">.</span>split<span class="token punctuation">.</span>size<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认为：256M，一个split的最大值，即每个map处理文件的最大值）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>min<span class="token punctuation">.</span>split<span class="token punctuation">.</span>size<span class="token punctuation">.</span>per<span class="token punctuation">.</span>node<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(一个节点上最小split数：1个)</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>min<span class="token punctuation">.</span>split<span class="token punctuation">.</span>size<span class="token punctuation">.</span>per<span class="token punctuation">.</span>rack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(一个机架上最小split数：1个)</p><h3 id="2、Reduce数量相关的参数"><a href="#2、Reduce数量相关的参数" class="headerlink" title="2、Reduce数量相关的参数"></a>2、Reduce数量相关的参数</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>reduce<span class="token punctuation">.</span>tasks<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(默认为：-1，强制指定reduce任务的数量。-1，是未定义，不发挥作用。如果指定了，就会按指定的数量执行)</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>reducers<span class="token punctuation">.</span>bytes<span class="token punctuation">.</span>per<span class="token punctuation">.</span>reducer<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认为：256M ，每个reduce任务处理的数据量）</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>reducers<span class="token punctuation">.</span>max<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（默认为：1009个，每个任务最大的reduce数 [Map数量 &gt;= Reduce数量 ]）</p><h2 id="八、Hive-JVM重用"><a href="#八、Hive-JVM重用" class="headerlink" title="八、Hive - JVM重用"></a>八、Hive - JVM重用</h2><p><code>适用场景：</code><br>1、小文件个数过多<br>2、task个数过多</p><p><code>原理：</code></p><p>hadoop默认配置是使用派生JVM来执行map和reduce任务的，JVM重用可以使得JVM实例在同一个JOB中重新使用N次</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>job<span class="token punctuation">.</span>reuse<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>num<span class="token punctuation">.</span>tasks<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(默认是1，表示一个JVM上最多可以顺序执行的task数目（属于同一个Job）是1。也就是说一个task启一个JVM)</p><p><code>缺点：</code></p><p>设置开启之后，task插槽会一直占用资源，不论是否有task运行，<br>直到所有的task即整个job全部执行完成时，才会释放所有的task插槽资源！</p>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive学习</title>
      <link href="/2019/01/11/Hive%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/11/Hive%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Hive是什么？"><a href="#一、Hive是什么？" class="headerlink" title="一、Hive是什么？"></a>一、Hive是什么？</h2><h3 id="1、基于-Hadoop-的一个数据仓库工具"><a href="#1、基于-Hadoop-的一个数据仓库工具" class="headerlink" title="1、基于 Hadoop 的一个数据仓库工具"></a>1、基于 Hadoop 的一个<code>数据仓库工具</code></h3><ul><li>可以将<code>结构化</code>的数据文件映射为一张<code>hive数据库表</code>；</li><li>这张Hive数据库表保存不了metadata元数据信息，而是将metadata存储在本地磁盘上的MySQL（关系型数据库）中</li><li>并提供简单的 sql 查询功能；</li><li>可以将 sql 语句转换为 MapReduce 任务进行运行。</li></ul><h3 id="2、快速实现简单的MapReduce-统计的工具"><a href="#2、快速实现简单的MapReduce-统计的工具" class="headerlink" title="2、快速实现简单的MapReduce 统计的工具"></a>2、快速实现简单的MapReduce 统计的工具</h3><ul><li>方便非Java编程者对HDFS的数据做mapreduce操作；</li><li>学习成本低，十分适合数据仓库的统计分析。</li></ul><h3 id="3、什么是数据仓库？"><a href="#3、什么是数据仓库？" class="headerlink" title="3、什么是数据仓库？"></a>3、什么是数据仓库？</h3><ul><li>Data Warehouse(DW 或DWH）是为企业所有级别的决策制定过程，提供所有类型数据支持的战略集合。</li><li>单个数据存储，出于分析性报告和决策支持目的而创建。</li><li>为需要业务智能的企业，提供指导业务流程改进、监视时间、成本、质量以及控制.</li><li><strong>数据仓库</strong>是用来做<strong>查询分析的数据库</strong>，<strong>基本不用来做插入，修改，删除操作</strong>。</li></ul><h3 id="4、数据处理的两大分类"><a href="#4、数据处理的两大分类" class="headerlink" title="4、数据处理的两大分类"></a>4、数据处理的两大分类</h3><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz2wawi0ujj30h106c0tg.jpg" alt="oltp+olap"></p><ul><li><h4 id="联机事务处理OLTP（on-line-transaction-processing）"><a href="#联机事务处理OLTP（on-line-transaction-processing）" class="headerlink" title="联机事务处理OLTP（on-line transaction processing）"></a>联机事务处理OLTP（on-line transaction processing）</h4></li></ul><blockquote><p>OLTP是传统的关系型<a href="http://lib.csdn.net/base/mysql">数据库</a>的主要应用，主要是基本的、日常的事务处理，例如银行交易。</p><p>OLTP系统强调数据库内存效率，强调内存各种指标的命令率，强调绑定变量，强调并发操作；</p></blockquote><ul><li><h4 id="联机分析处理OLAP（On-Line-Analytical-Processing）"><a href="#联机分析处理OLAP（On-Line-Analytical-Processing）" class="headerlink" title="联机分析处理OLAP（On-Line Analytical Processing）"></a>联机分析处理OLAP（On-Line Analytical Processing）</h4></li></ul><blockquote><p>OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</p><p>OLAP系统则强调数据分析，强调SQL执行市场，强调磁盘I/O，强调分区等。</p></blockquote><ul><li>数据文件按结构的分类</li></ul><blockquote><p>结构化数据：关系型</p><p>半结构化数据：K-V</p><p>松散型：</p></blockquote><p>原理：</p><p>Hive包括：解释器、编译器、优化器</p><p>其中，编译器将一个HiveSQL 转换为操作符，操作符是Hive的最小的处理单位，每一个操作符代表HDFS的一个操作或一个MapReduce作业。</p><h2 id="二、Hive架构原理"><a href="#二、Hive架构原理" class="headerlink" title="二、Hive架构原理"></a>二、Hive架构原理</h2><p><img src="https://img-blog.csdnimg.cn/20181113225516701.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d3d3p5ZGNvbQ==,size_16,color_FFFFFF,t_70" alt="Hive架构图"></p><p>1、架构图解释：</p><blockquote><p>Hive通过用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口</p></blockquote><p>2、用户接口</p><blockquote><p> 主要有三个：Client CLI(hive shell 命令行)，JDBC/ODBC(java访问hive)，WEBUI(浏览器访问hive)</p><p>​         其中最常用的是<strong>CLI命令行</strong>，Cli启动的时候，会同时启动一个Hive副本；<strong>Client</strong>是Hive的客户端，用户连接至Hive Server。在启动 Client模式的时候，需要指出Hive Server所在节点，并且在该节点启动Hive Server。</p></blockquote><p>3、元数据:Metastore </p><blockquote><p>元数据包括:</p><p>表名,表所属数据库(默认是default) ,表的拥有者,列/分区字段,表的类型(是否是外部表),表的数据所在目录等；</p><p>默认存储在自带的derby数据库中,推荐使用MySQL存储Metastore</p></blockquote><p>4、任务运行</p><blockquote><p>Hive 使用HDFS进行存储,使用MapReduce进行计算</p><p>(0)驱动器:Driver</p><p>(1)解析器(SQL Parser):将SQL字符转换成抽象语法树AST,这一步一般使用都是第三方工具库完成,比如antlr,对AST进行语法分析,比如表是否存在,字段是否存在,SQL语句是否有误</p><p>(2)编译器(Physical Plan):将AST编译生成逻辑执行计划 </p><p>(3)优化器(Query Optimizer):对逻辑执行计划进行优化</p><p>(4)执行器(Execution):把逻辑执行计划转换成可以运行的物理计划,对于Hive来说,就是MR/Spark</p><p>  其中(select *  不会产生MR任务)</p></blockquote><h2 id="三、Hive搭建及三种模式"><a href="#三、Hive搭建及三种模式" class="headerlink" title="三、Hive搭建及三种模式"></a>三、Hive搭建及三种模式</h2><h3 id="1、Hive的安装配置："><a href="#1、Hive的安装配置：" class="headerlink" title="1、Hive的安装配置："></a>1、Hive的安装配置：</h3><h4 id="（1）基本环境：Hadoop集群环境（至少3个节点）"><a href="#（1）基本环境：Hadoop集群环境（至少3个节点）" class="headerlink" title="（1）基本环境：Hadoop集群环境（至少3个节点）"></a>（1）基本环境：Hadoop集群环境（至少3个节点）</h4><blockquote><p><strong>Hive</strong>是依赖于hadoop系统的，因此在运行Hive之前需要保证已经搭建好hadoop集群环境。</p></blockquote><h4 id="（2）安装一个关系型数据mysql"><a href="#（2）安装一个关系型数据mysql" class="headerlink" title="（2）安装一个关系型数据mysql"></a>（2）安装一个关系型数据mysql</h4><blockquote><p>因为Hive数据仓库的元数据信息是存放在本地磁盘的关系数据库上的</p></blockquote><p><code>安装步骤</code>：详见  “Linux系统数据库MySQL安装.md”</p><h4 id="（3）解压安装（按需在指定节点上）"><a href="#（3）解压安装（按需在指定节点上）" class="headerlink" title="（3）解压安装（按需在指定节点上）"></a>（3）解压安装（按需在指定节点上）</h4><blockquote><p>解压apache-hive-1.2.1-bin.tar.gz</p></blockquote><h4 id="（4）追加配置环境变量"><a href="#（4）追加配置环境变量" class="headerlink" title="（4）追加配置环境变量"></a>（4）追加配置环境变量</h4><pre class="line-numbers language-shell"><code class="language-shell">vim ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">HIVE_HOME</span><span class="token punctuation">=</span><span class="token attr-value">Hive的解压路径</span><span class="token attr-name">HIVE_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/soft/apache-hive-1.2.1-bin</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$HIVE_HOME/bin </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（5）替换和添加相关jar包"><a href="#（5）替换和添加相关jar包" class="headerlink" title="（5）替换和添加相关jar包"></a>（5）替换和添加相关jar包</h4><blockquote><ul><li><p>修改HADOOP_HOME/share/hadoop/yarn/lib目录下的jline-*.jar </p><p>将其替换成HIVE_HOME/lib下的<code>jline-2.12.jar</code>。 </p></li></ul></blockquote><blockquote><ul><li><p>–将如下(<code>hive连接mysql)</code>的jar包拷贝到hive解压目录的lib目录下</p><p><code>mysql-connector-java-5.1.32-bin.jar</code></p></li></ul></blockquote><h4 id="（6）修改配置文件（选择3种模式里哪一种）"><a href="#（6）修改配置文件（选择3种模式里哪一种）" class="headerlink" title="（6）修改配置文件（选择3种模式里哪一种）"></a>（6）修改配置文件（选择3种模式里哪一种）</h4><p><code>见三种安装模式</code></p><p><code>注意：</code></p><p>如果 对应安装的hadoop的/root/usr/hadoop-2.6.5/etc/hadoop路径下存在hive-site.xml文件， 优先级会高于Hive安装路径下的配置文件。</p><h4 id="（7）启动"><a href="#（7）启动" class="headerlink" title="（7）启动"></a>（7）启动</h4><blockquote><pre class="line-numbers language-shell"><code class="language-shell">hive <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动hive交互式界面</p></blockquote><h3 id="2、三种模式"><a href="#2、三种模式" class="headerlink" title="2、三种模式"></a>2、三种模式</h3><table><thead><tr><th>三种模式</th></tr></thead><tbody><tr><td>A、内嵌模式（元数据保存在内嵌的derby中，允许一个会话链接，尝试多个会话链接时会报错）【了解】                                                                                                        B、本地模式（本地安装mysql 替代derby存储元数据）【重要】                                                                                  C、远程模式（远程安装mysql 替代derby存储元数据）【重要】</td></tr></tbody></table><h4 id="（1）内嵌Derby单用户模式（了解）"><a href="#（1）内嵌Derby单用户模式（了解）" class="headerlink" title="（1）内嵌Derby单用户模式（了解）"></a>（1）内嵌Derby单用户模式（了解）</h4><ul><li>元数据是内嵌在Derby数据库中的，只能允许一个会话连接，数据会存放到HDFS上。</li><li>存储方式简单，只需要hive-site.xml </li><li>注：使用 derby<br>存储方式时，运行 hive 会在当前目录生成一个 derby 文件和一个metastore_db</li></ul><p>hive-site.xml ：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:derby:;databaseName=metastore_db;create=true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.derby.jdbc.EmbeddedDriver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.warehouse.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/user/hive/warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）本地用户模式（重要，多用于本地开发测试）"><a href="#（2）本地用户模式（重要，多用于本地开发测试）" class="headerlink" title="（2）本地用户模式（重要，多用于本地开发测试）"></a>（2）本地用户模式（<code>重要</code>，多用于本地开发测试）</h4><table><thead><tr><th>与嵌入式的区别</th></tr></thead><tbody><tr><td>* 不再使用内嵌的Derby作为元数据的存储介质，而是使用其他数据库比如MySQL来存储元数据且是一个多用户的模式，运行多个用户client连接到一个数据库中。这种方式一般作为公司内部同时使用Hive。                                                                                                                                                                               * 这里有一个前提，每一个用户必须要有对MySQL的访问权利，即每一个客户端使用者需要知道MySQL的用户名和密码才行。</td></tr></tbody></table><ul><li>需要在本地运行一个 mysql 服务器</li><li>在node00上（与MySQL在同一个节点上）解压安装Hive</li></ul><blockquote><p>MySQL， Hive      :  node00</p></blockquote><ul><li>需要将 连接mysql 的 jar 包（mysql-connector-java-5.1.32-bin.jar）拷贝到$HIVE_HOME/lib 目录下</li></ul><p>hive-site.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.warehouse.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/user/hive_local/warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://node00:3306/hive_local?createDatabaseIfNotExist=true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意</code>：需要实现在mysql中创建数据库：hive_local</p><h4 id="（3）远程模式（重要）"><a href="#（3）远程模式（重要）" class="headerlink" title="（3）远程模式（重要）"></a>（3）远程模式（重要）</h4><ul><li><h5 id="remote-一体"><a href="#remote-一体" class="headerlink" title="remote 一体"></a>remote 一体</h5></li></ul><blockquote><p>将Hive解压安装与MySQL不同的节点上</p><p>MySQL  ：node00</p><p>Hive  ： node02</p><p>需要在 Hive服务器启动 meta服务</p><p>Hive的服务端和客户端在同一台节点</p></blockquote><p>配置hive-site.xml（在 node02节点上）</p><p>(hadoop 2.6.5)</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.warehouse.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/user/hive_remote/warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://node1:3306/hive_remote?createDatabaseIfNotExist=true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在hadoop2.5.X环境下还需要添加</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.uris<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>thrift://node02:9083<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>注</code><strong>：</strong>这里把hive的服务端和客户端都放在同一台服务器上了。服务端和客户端可以拆开</p><ul><li><h5 id="Remote-分开-公司企业经常用"><a href="#Remote-分开-公司企业经常用" class="headerlink" title="Remote 分开(公司企业经常用)"></a>Remote 分开(公司企业经常用)</h5></li></ul><p>将 hive-site.xml 配置文件拆为如下两部分（此时不与MySQL在同一台节点上）</p><blockquote><p>MySql  ：   node00</p><p>服务端 ：   node02</p><p>客户端 ：   node01</p></blockquote><p><strong>1</strong>）、服务端配置文件（node02）</p><p>配置hive-site.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.warehouse.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/user/hive2/warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://node00:3306/hive2?createDatabaseIfNotExist=true&amp;useSSL=false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>111111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2</strong>）、客户端配置文件（node01）</p><p> 配置hive-site.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.warehouse.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/user/hive2/warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注意这里的路径要和服务端一致--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.uris<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>thrift://node3:9083<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>启动 hive 服务端程序</strong></p><pre class="line-numbers language-shell"><code class="language-shell"> hive --service metastore & <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>客户端启动</strong></p><pre class="line-numbers language-shell"><code class="language-shell">hive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Hive常见问题总汇：</p><p><a href="http://blog.csdn.net/freedomboy319/article/details/44828337">http://blog.csdn.net/freedomboy319/article/details/44828337</a></p><p><a href="https://gengqi88.iteye.com/blog/1983492">https://gengqi88.iteye.com/blog/1983492</a></p><blockquote><p>如果报错：</p><p>org.apache.thrift.transport.TTransportException: Could not create ServerSocket on address 0.0.0.0/0.0.0.0:9083.</p></blockquote><p>查看进程：</p><pre><code>jps</code></pre><p>将启动命令的节点上所以Runjar  进程执行如下kill 命令</p><pre><code>kill -9 pid</code></pre><h2 id="四、HQL详解"><a href="#四、HQL详解" class="headerlink" title="四、HQL详解"></a>四、HQL详解</h2><p><code>Hql 就是HiveSQl语句</code></p><h3 id="1、DDL语句（数据库定义语言）"><a href="#1、DDL语句（数据库定义语言）" class="headerlink" title="1、DDL语句（数据库定义语言）"></a>1、DDL语句（数据库定义语言）</h3><h4 id="（1）具体参见：https-cwiki-apache-org-confluence-display-Hive-LanguageManual-DDL"><a href="#（1）具体参见：https-cwiki-apache-org-confluence-display-Hive-LanguageManual-DDL" class="headerlink" title="（1）具体参见：https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL"></a>（1）具体参见：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL</a></h4><p><code>Hive的数据定义语言</code> （<a href="javascript:changelink('https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL','EN2ZH_CN');">LanguageManual DDL</a>）</p><p><strong><code>重点</code> hive 的建表语句和分区。</strong></p><h4 id="（2）创建-删除-修改-使用数据库"><a href="#（2）创建-删除-修改-使用数据库" class="headerlink" title="（2）创建/删除/修改/使用数据库"></a>（2）创建/删除/修改/使用数据库</h4><ul><li><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5></li></ul><p>（Hive搭建完毕后，会创建一个默认的数据库）</p><blockquote><p>查看    show databases；</p></blockquote><blockquote><p>创建    </p><pre class="line-numbers language-shell"><code class="language-shell">CREATE (DATABASE|SCHEMA) [IF NOT EXISTS] database_name [COMMENT database_comment];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><p>create database attribute;</p><p>create database attr;</p></blockquote><p><code>注意：</code>创建数据时，数据库名不要和系统关键字冲突，否则会报错；</p><p>如下：</p><pre class="line-numbers language-xml"><code class="language-xml">命令：hive> create database out;报错：FAILED: ParseException line 1:16 Failed to recognize predicate 'out'. Failed rule: 'identifier' in create database statement原因：在Hive1.2.0版本开始增加了如下配置选项，默认值为true：hive.support.sql11.reserved.keywords该选项的目的是：是否启用对SQL2011保留关键字的支持。 启用后，将支持部分SQL2011保留关键字。解决：法一：弃用这个关键字，换个名字法二：弃用对保留关键字的支持在conf下的hive-site.xml配置文件中修改配置选项：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.support.sql11.reserved.keywords<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h5><blockquote><pre class="line-numbers language-shell"><code class="language-shell">DROP (DATABASE|SCHEMA) [IF EXISTS] database_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><p>drop database attribute;</p></blockquote></li></ul><ul><li>修改数据库(了解)</li></ul><blockquote><p>ALTER (DATABASE|SCHEMA) database_name SET DBPROPERTIES (property_name=property_value, …);</p><p>ALTER (DATABASE|SCHEMA) database_name SET OWNER [USER|ROLE] user_or_role; </p></blockquote><ul><li><h5 id="使用数据库-（进入某一数据库。如果没有这步操作，会进入默认default数据库）"><a href="#使用数据库-（进入某一数据库。如果没有这步操作，会进入默认default数据库）" class="headerlink" title="使用数据库 （进入某一数据库。如果没有这步操作，会进入默认default数据库）"></a>使用数据库 （进入某一数据库。如果没有这步操作，会进入默认default数据库）</h5></li></ul><blockquote><pre class="line-numbers language-shell"><code class="language-shell">USE database_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><p>use attr；</p></blockquote><h4 id="（3）创建-删除-表（重点）"><a href="#（3）创建-删除-表（重点）" class="headerlink" title="（3）创建/删除/表（重点）"></a>（3）创建/删除/表（重点）</h4><ul><li><h5 id="创建表（重要！）"><a href="#创建表（重要！）" class="headerlink" title="==创建表（重要！）=="></a>==创建表（重要！）==</h5></li></ul><p>数据类型：</p><blockquote><p>data_type<br>  : <code>primitive_type  原始数据类型</code><br>  | <code>array_type        数组</code><br>  | <code>map_type        map</code><br>  | struct_type<br>  | union_type  – (Note: Available in Hive 0.7.0 and later)</p><p><em>primitive_type</em><br>  : TINYINT<br>  | SMALLINT<br>  | <code>INT</code><br>  | <code>BIGINT</code><br>  | BOOLEAN<br>  | FLOAT<br>  | <code>DOUBLE</code><br>  | DOUBLE PRECISION<br>  | <strong>STRING  基本可以搞定一切</strong><br>  | BINARY<br>  | TIMESTAMP<br>  | DECIMAL<br>  | DECIMAL(precision, scale)<br>  | <code>DATE</code><br>  | VARCHAR<br>  | CHAR  </p><p><em>array_type</em><br>  : <code>ARRAY &lt; data_type &gt;</code></p><p><em>map_type</em><br>  : <code>MAP &lt; primitive_type, data_type &gt;</code></p><p><em>struct_type</em><br>  : STRUCT &lt; col_name : data_type [COMMENT col_comment], …&gt;</p><p><em>union_type</em><br>  : UNIONTYPE &lt; data_type, data_type, … &gt;  </p></blockquote><ul><li><h5 id="1、准备数据"><a href="#1、准备数据" class="headerlink" title="1、准备数据"></a>1、准备数据</h5></li></ul><pre><code>1,zshang,18,game-girl-book,stu_addr:beijing-work_addr:shanghai2,lishi,16,shop-boy-book,stu_addr:hunan-work_addr:shanghai3,wang2mazi,20,fangniu-eat,stu_addr:shanghai-work_addr:tianjing</code></pre><ul><li><h5 id="2、创建表"><a href="#2、创建表" class="headerlink" title="2、创建表"></a>2、创建表</h5></li></ul><p>(如果没有指定进入某一数据库，就会在默认数据库中创建)</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> log<span class="token punctuation">(</span> id <span class="token keyword">int</span><span class="token punctuation">,</span> name string<span class="token punctuation">,</span> age <span class="token keyword">int</span><span class="token punctuation">,</span> likes array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span> address map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>string<span class="token operator">></span> <span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">','</span> COLLECTION ITEMS <span class="token keyword">TERMINATED by</span> <span class="token string">'-'</span> map <span class="token keyword">keys</span> <span class="token keyword">terminated by</span> <span class="token string">':'</span> <span class="token keyword">lines</span> <span class="token keyword">terminated by</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>导入数据</strong>（属于DML但是为了演示需要在此应用）</li></ul><pre><code>LOAD DATA [LOCAL] INPATH &#39;filepath&#39; [OVERWRITE] INTO TABLE tablename [PARTITION (partcol1=val1, partcol2=val2 ...)] [LOCAL]:从本地  |  若无，则为从HDFS [OVERWRITE]  ： 会覆盖Hive表中的数据   | 若无则会追加 [PARTITION....] ： 创建分区</code></pre><blockquote><p>将log1文件中的数据加载到log表中</p><p>（log1中数据的格式要和log表格式保持一致，否则会乱；若文件已存在，则会自动重命名）</p><ul><li>本地加载（相当于复制）数据到Hive的制定表中</li></ul><pre class="line-numbers language-shell"><code class="language-shell">LOAD DATA LOCAL INPATH '/root/su/log1' INTO TABLE log;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>HDFS加载（相当于剪切）数据到Hive的制定表中</li></ul><pre class="line-numbers language-shell"><code class="language-shell">LOAD DATA INPATH '/root/su/log1' INTO TABLE log ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><ul><li>查看表中数据</li></ul><blockquote><pre class="line-numbers language-shell"><code class="language-shell">对本表查询不会产生MapReduce任务hive> select * from log;使用函数查询会产生MapReduce任务hive> select count(*) from log;查询表的字段信息：描述字段类型hive> desc log;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>第一个查询结果：</p><pre><code>1    zshang    18    [&quot;game&quot;,&quot;girl&quot;,&quot;book&quot;]    &amp;#123;&quot;stu_addr&quot;:&quot;beijing&quot;,&quot;work_addr&quot;:&quot;shanghai&quot;&amp;#125;1    zhaoliu    18    [&quot;game&quot;,&quot;girl&quot;,&quot;book&quot;]    &amp;#123;&quot;stu_addr&quot;:&quot;beijing&quot;,&quot;work_addr&quot;:&quot;shanghai&quot;&amp;#125;2    lishi    16    [&quot;shop&quot;,&quot;boy&quot;,&quot;book&quot;]    &amp;#123;&quot;stu_addr&quot;:&quot;hunan&quot;,&quot;work_addr&quot;:&quot;shanghai&quot;&amp;#125;3    wang2mazi    20    [&quot;fangniu&quot;,&quot;eat&quot;]    &amp;#123;&quot;stu_addr&quot;:&quot;shanghai&quot;,&quot;work_addr&quot;:&quot;tianjing&quot;&amp;#125;</code></pre><p>第二个查询结果：</p><pre><code>4</code></pre><p><code>附加题</code></p><blockquote><p>查询表中likes字段中有girl的人</p></blockquote><pre><code>hive&gt; select name from log2 where likes[1]=&quot;girl&quot;;</code></pre><blockquote><p>查询表中address字段有stu_addr为beijing的人</p></blockquote><pre><code>hive&gt;  select name from log2 where address[&quot;stu_addr&quot;]=&quot;beijing&quot;;</code></pre><ul><li><h5 id="3、删除表"><a href="#3、删除表" class="headerlink" title="3、删除表"></a>3、删除表</h5></li></ul><blockquote><pre><code>DROP TABLE [IF EXISTS] table_name [PURGE];</code></pre><p>举例：</p><p>（用drop命令删除表，会将表中数据一并删除，其对应在MySQl中的表的元数据信息也会随之删除；</p><p>​    用hdfs命令删除表对应的文件目录，表中数据也一并删除，但其元数据信息依然保存在My  SQL上，</p><p>​     再load数据，可恢复该表）p></blockquote><blockquote><pre><code>drop table log1；</code></pre></blockquote><blockquote><pre><code>hdfs dfs -rmr /user/hive_local/warehouse/attr.db/log1hive&gt; use attr;hive&gt; LOAD DATA LOCAL INPATH &#39;/root/su/log1&#39; INTO TABLE log1;</code></pre></blockquote><ul><li><h5 id="创建外部表（重要）"><a href="#创建外部表（重要）" class="headerlink" title="创建外部表（重要）"></a>创建外部表（重要）</h5></li></ul><blockquote><p>外部关键字EXTERNAL允许您创建一个表,并提供一个位置,以便hive不使用这个表的默认位置。<strong>这方便如果你已经生成了数据，当删除一个外部表</strong>,<strong>表中的数据不会从文件系统中删除</strong>。外部表指向任何HDFS的存储位置,而不是存储在配置属性指定的文件夹<a href="javascript:changelink('https://cwiki.apache.org/confluence/display/Hive/Configuration+Properties#ConfigurationProperties-hive.metastore.warehouse.dir','EN2ZH_CN');"> hive.metastore.warehouse.dir</a>中</p></blockquote><p>创建表：</p><pre><code>create EXTERNAL table log1( id int, name string, age int, likes array&lt;string&gt;, address map&lt;string,string&gt; ) row format delimited fields terminated by &#39;,&#39; COLLECTION ITEMS TERMINATED by &#39;-&#39; map keys terminated by &#39;:&#39; lines terminated by &#39;\n&#39;;</code></pre><p>加载数据：</p><pre><code>LOAD DATA LOCAL INPATH &#39;/root/su/log1&#39; INTO TABLE log1;</code></pre><p>删除外部表（<code>相当于删除的是表的元数据信息，而表中的数据还保存</code>）</p><pre><code>drop table log1；</code></pre><p>结果：</p><blockquote><p>hive&gt; show tables;</p><p>无log1</p><p>MySQl中也无此表元数据信息</p><p>但是，</p><p>在HDFS文件系统中，此表数据依然存在</p><p>也就是说，此表还可以恢复</p></blockquote><p>恢复表：</p><pre><code>重新创建log1表，该表即可恢复</code></pre><h4 id="（4）修改表-更新，删除数据-这些很少用"><a href="#（4）修改表-更新，删除数据-这些很少用" class="headerlink" title="（4）修改表,更新，删除数据(这些很少用)"></a>（4）修改表,更新，删除数据(这些很少用)</h4><p>重命名表</p><blockquote><pre><code>ALTER TABLE table_name RENAME TO new_table_name;Eg: alter table meninem rename to jacke;</code></pre></blockquote><p>更新数据</p><pre><code>UPDATE tablename SET column = value [, column = value ...][WHERE expression]</code></pre><p>删除数据</p><pre><code>DELETE FROM tablename [WHERE expression]</code></pre><h3 id="2、DML语句（数据库管理语言）"><a href="#2、DML语句（数据库管理语言）" class="headerlink" title="2、DML语句（数据库管理语言）"></a>2、DML语句（数据库管理语言）</h3><h4 id="（1）具体参见："><a href="#（1）具体参见：" class="headerlink" title="（1）具体参见："></a>（1）具体参见：</h4><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML</a></p><p>   <strong>重点是数据加载和查询插入语法</strong></p><p>Hive数据操作语言（<a href="javascript:changelink('https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DML','EN2ZH_CN');">LanguageManual DML</a>）</p><h4 id="（2）四种插入-导入数据-重要"><a href="#（2）四种插入-导入数据-重要" class="headerlink" title="（2）四种插入/导入数据(重要)"></a>（2）四种插入/导入数据(重要)</h4><blockquote><p>Hive不能很好的支持用<code>insert</code>语句一条一条的进行插入操作，不支持<code>update</code>操作。数据是以<code>load</code>的方式加载到建立好的表中。数据一旦导入就不可以修改。</p></blockquote><pre><code>create table log3( id int, name string, age int ) row format delimited fields terminated by &#39;,&#39; lines terminated by &#39;\n&#39;;</code></pre><h5 id="1-直接加载数据"><a href="#1-直接加载数据" class="headerlink" title="1.直接加载数据"></a>1.直接加载数据</h5><pre class="line-numbers language-shell"><code class="language-shell">LOAD DATA [LOCAL] INPATH 'filepath' [OVERWRITE] INTO TABLE tablename [PARTITION (partcol1=val1, partcol2=val2 ...)]load data local inpath '/root/su/log1' into table log1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-将表1查询结果插入表2"><a href="#2-将表1查询结果插入表2" class="headerlink" title="2.将表1查询结果插入表2"></a>2.将表1查询结果插入表2</h5><p><code>注意：查询结果的字段个数、类型 要与插入的表的字段一 一匹配对应</code></p><pre><code>创建person2表，然后从表person1查询数据导入：覆盖：INSERT OVERWRITE TABLE person2 [PARTITION(dt=&#39;2008-06-08&#39;, country)]       SELECT id,name, age From ppt;追加：INSERT INTO TABLE log3        SELECT id,name, age From log;</code></pre><h5 id="3-将表1、表2查询结果插入表3、表4"><a href="#3-将表1、表2查询结果插入表3、表4" class="headerlink" title="3.将表1、表2查询结果插入表3、表4"></a>3.将表1、表2查询结果插入表3、表4</h5><p><code>注意：查询结果的字段个数、类型 要与插入的表的字段一 一匹配对应</code></p><pre><code>FROM person t1INSERT OVERWRITE | INTO TABLE person1 [PARTITION(dt=&#39;2008-06-08&#39;, country)]       SELECT t1.id, t1.name, t1.age ;FROM log t1,log1 t2 INSERT OVERWRITE TABLE log4   SELECT t1.id,t1.name,t2.age ; 是否存在笛卡尔积：？？？？存在。 为了防止笛卡尔积： FROM log t1,log1 t2 INSERT OVERWRITE TABLE log4   SELECT t1.id,t1.name,t2.age where t1.id =t2.id;</code></pre><pre><code>【from放前面好处就是后面可以插入多条语句 】FROM abc t1,sun t2 INSERT OVERWRITE TABLE qiniu   SELECT t1.id,t1.name,t1.age,t2.likes,t2.address ;</code></pre><pre><code>FROM abc t1,sun t2 INSERT OVERWRITE TABLE qiniu   SELECT t1.id,t1.name,t1.age,t1.likes,t1.address where…INSERT OVERWRITE TABLE wbb SELECT t2.id,t2.name,t2.age,t2.likes,t2.address where…;</code></pre><h5 id="4-直接列出数据插入表中（大量数据时不推荐）"><a href="#4-直接列出数据插入表中（大量数据时不推荐）" class="headerlink" title="4.直接列出数据插入表中（大量数据时不推荐）"></a>4.直接列出数据插入表中（大量数据时不推荐）</h5><p><code>注意：查询结果的字段个数、类型 要与插入的表的字段一 一匹配对应</code></p><pre><code>INSERT INTO TABLE students   VALUES (1,&#39;zs&#39;,18,&#39;boy&#39;,&#39;beijng&#39;),(2,&#39;wh&#39;,&#39;girl&#39;,&#39;stu_addr&#39;:shanghai&#39;);</code></pre><blockquote><p>本地load数据和从HDFS上load加载数据的过程有什么<code>区别</code>？</p><ul><li><p>本地： local 会自动复制到HDFS上的hive的**目录下</p></li><li><p>Hdfs导入 后移动到hive的**目录下</p></li></ul></blockquote><h4 id="（3）查询数据并保存"><a href="#（3）查询数据并保存" class="headerlink" title="（3）查询数据并保存"></a>（3）查询数据并保存</h4><ol><li><ul><li><h5 id="保存数据到本地："><a href="#保存数据到本地：" class="headerlink" title="保存数据到本地："></a>保存数据到本地：</h5></li></ul><pre class="line-numbers language-shell"><code class="language-shell">insert overwrite local directory '/opt/datas/hive_exp_emp2'     ROW FORMAT DELIMITED FIELDS TERMINATED BY ','         select * from db_1128.emp ;留意两种的区别：保存的数据格式insert overwrite local directory '/sun/temp/hive_save1'     row format delimited fields terminated by ','      COLLECTION ITEMS TERMINATED by '-'      map keys terminated by ':'                select * from log2 ;这里如果将 overwrite  改为into 会报错。        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre><code>//查看数据!cat /sun/temp/hive_save1/000000_0;</code></pre><ol start="2"><li><ul><li><h5 id="保存数据到HDFS上："><a href="#保存数据到HDFS上：" class="headerlink" title="保存数据到HDFS上："></a>保存数据到HDFS上：</h5></li></ul><pre><code>insert overwrite directory &#39;/user/beifeng/hive/hive_exp_emp&#39;     select * from db_1128.emp ;insert overwrite directory &#39;/sun/hive/temp/hive_save1&#39;      row format delimited fields terminated by &#39;,&#39;      COLLECTION ITEMS TERMINATED by &#39;-&#39;      map keys terminated by &#39;:&#39;      select * from log2 ;这里如果将 overwrite  改为into 会报错。  </code></pre></li></ol><ol start="3"><li><ul><li><h5 id="在外部shell中将数据重定向到文件中："><a href="#在外部shell中将数据重定向到文件中：" class="headerlink" title="在外部shell中将数据重定向到文件中："></a>在外部shell中将数据重定向到文件中：</h5></li></ul></li></ol><pre><code>(注意：需要指明是哪个数据库的表)# hive -e &quot;select * from attr.log;&quot; &gt; /sun/hive/temp/hive_save2# cat /sun/hive/temp/hive_save2</code></pre><h4 id="（4）备份数据或还原数据（在HDFS上）"><a href="#（4）备份数据或还原数据（在HDFS上）" class="headerlink" title="（4）备份数据或还原数据（在HDFS上）"></a>（4）备份数据或还原数据（在HDFS上）</h4><ol><li><ul><li>备份数据（包括表的元数据和表中的数据）：</li></ul></li></ol><pre><code>EXPORT TABLE log to &#39;/sun/hive/datas/export/cp1&#39;</code></pre><ol start="2"><li><ul><li>删除再还原数据：</li></ul></li></ol><pre><code>先删除表。drop table log;show tables ;再还原数据：IMPORT FROM &#39;/sun/hive/datas/export/cp1&#39; ; </code></pre><h4 id="（5）其他Hql操作"><a href="#（5）其他Hql操作" class="headerlink" title="（5）其他Hql操作"></a>（5）其他Hql操作</h4><h5 id="Hive的group-by-join-left-join-right-join等-having-sort-by-order-by等操作和MySQL没有什么大的区别："><a href="#Hive的group-by-join-left-join-right-join等-having-sort-by-order-by等操作和MySQL没有什么大的区别：" class="headerlink" title="Hive的group by\join(left join right join等)\having\sort by \order by等操作和MySQL没有什么大的区别："></a>Hive的group by\join(left join right join等)\having\sort by \order by等操作和MySQL没有什么大的区别：</h5><p><a href="http://www.2cto.com/kf/201609/545560.html">http://www.2cto.com/kf/201609/545560.html</a></p><h3 id="3、Hive-SerDe（序列化、反序列化）"><a href="#3、Hive-SerDe（序列化、反序列化）" class="headerlink" title="3、Hive SerDe（序列化、反序列化）"></a>3、Hive SerDe（序列化、反序列化）</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="(1)定义"></a>(1)定义</h4><p><strong><code>Hive SerDe</code></strong> - Serializer and Deserializer  SerDe 用于做序列化和反序列化。</p><p>构建在数据存储和执行引擎之间，对两者实现解耦。</p><p>对数据实现序列化，清洗数据，使之成为有效数据并加载。</p><p>Hive通过ROW FORMAT DELIMITED以及SERDE进行内容的读写。</p><h4 id="（2）实现"><a href="#（2）实现" class="headerlink" title="（2）实现"></a>（2）实现</h4><pre><code>row_format: DELIMITED           [FIELDS TERMINATED BY char [ESCAPED BY char]]           [COLLECTION ITEMS TERMINATED BY char]           [MAP KEYS TERMINATED BY char]           [LINES TERMINATED BY char] : SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, ...)]</code></pre><pre><code>Hive正则匹配（实现数据清洗）创建表 logtbl： CREATE TABLE logtbl (    host STRING,    identity STRING,    t_user STRING,    time STRING,    request STRING,    referer STRING,    agent STRING)  ROW FORMAT SERDE &#39;org.apache.hadoop.hive.serde2.RegexSerDe&#39;  WITH SERDEPROPERTIES ( &quot;input.regex&quot;=&quot;([^ ]*) ([^ ]*) ([^ ]*) \\[(.*)\\] \&quot;(.*)\&quot; (-|[0-9]*) (-|[0-9]*)&quot;)   STORED AS TEXTFILE;加载数据:load data local inpath &#39;/root/su/localhost_access_log.2016-02-29&#39; into table logtbl;查看数据：select * from logtbl;显示：//192.168.57.4 - - [29/Feb/2016:18:14:35 +0800] &quot;GET /bg-upper.png HTTP/1.1&quot; 304 -192.168.57.4    -    -    29/Feb/2016:18:14:35 +0800    GET /bg-upper.png HTTP/1.1    304    -192.168.57.4    -    -    29/Feb/2016:18:14:35 +0800    GET /bg-nav.png HTTP/1.1    304    -192.168.57.4    -    -    29/Feb/2016:18:14:35 +0800    GET /asf-logo.png HTTP/1.1    304    -...(省略。。。)</code></pre><p><code>表数据--见数据文件：localhost_access_log.2016-02-29.txt</code></p><pre class="line-numbers language-tx"><code class="language-tx">192.168.57.4 - - [29/Feb/2016:18:14:35 +0800] "GET /bg-upper.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:35 +0800] "GET /bg-nav.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:35 +0800] "GET /asf-logo.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:35 +0800] "GET /bg-button.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:35 +0800] "GET /bg-middle.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET / HTTP/1.1" 200 11217192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET / HTTP/1.1" 200 11217192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /tomcat.css HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /tomcat.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /asf-logo.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /bg-middle.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /bg-button.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /bg-nav.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /bg-upper.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET / HTTP/1.1" 200 11217192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /tomcat.css HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /tomcat.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET / HTTP/1.1" 200 11217192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /tomcat.css HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /tomcat.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /bg-button.png HTTP/1.1" 304 -192.168.57.4 - - [29/Feb/2016:18:14:36 +0800] "GET /bg-upper.png HTTP/1.1" 304 -  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、Beeline和Hiveserver2（Hive的升级）"><a href="#五、Beeline和Hiveserver2（Hive的升级）" class="headerlink" title="五、Beeline和Hiveserver2（Hive的升级）"></a>五、Beeline和Hiveserver2（Hive的升级）</h2><h4 id="1、Hiveserver2直接启动（只能在服务端启动，相当于服务端）"><a href="#1、Hiveserver2直接启动（只能在服务端启动，相当于服务端）" class="headerlink" title="1、Hiveserver2直接启动（只能在服务端启动，相当于服务端）"></a>1、Hiveserver2直接启动（只能在服务端启动，相当于服务端）</h4><pre><code> # ./hiveserver2</code></pre><p>若已经配置环境变量则启动方式为：</p><pre><code># hivesever2</code></pre><h4 id="2、启动-beeline（可在服务端-客户端启动，相当于客户端）"><a href="#2、启动-beeline（可在服务端-客户端启动，相当于客户端）" class="headerlink" title="2、启动 beeline（可在服务端|客户端启动，相当于客户端）"></a>2、启动 beeline（可在服务端|客户端启动，相当于客户端）</h4><blockquote><p>因为beeline是在Hive安装目录的/bin下，所以只要有hive包都可以启动</p></blockquote><pre><code># ./beelinebeeline&gt; !connect jdbc:hive2://node00:10000 root 123456显示：Connecting to jdbc:hive2://node00:10000Connected to: Apache Hive (version 1.2.1)Driver: Hive JDBC (version 1.2.1)Transaction isolation: TRANSACTION_REPEATABLE_READ0: jdbc:hive2://node00:10000&gt;使用：列出数据库0: jdbc:hive2://node00:10000&gt; show databases;+----------------+--+| database_name  |+----------------+--+| attr           || attribute      || default        |+----------------+--+3 rows selected (7.493 seconds)0: jdbc:hive2://node00:10000&gt;而在服务端：显示：[root@node00 ~]# hiveserver219/01/07 08:52:09 WARN conf.HiveConf: HiveConf of name hive.metastore.local does not existOKOKOKOK退出：服务端：ctrl + c客户端：！quit；  或 ctrl + c作用：对操作结果添加了美化。不过不太常用，耗内存，数据大的时候，还影响页面。</code></pre><h2 id="六、Hive的JDBC"><a href="#六、Hive的JDBC" class="headerlink" title="六、Hive的JDBC"></a>六、Hive的JDBC</h2><blockquote><p>一般是平台使用展示或接口，服务端启动hiveserver2后，在java代码中通过调用hive的jdbc访问默认端口10000进行连接、访问</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HivejdbcClient</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> String driverName <span class="token operator">=</span> <span class="token string">"org.apache.hive.jdbc.HiveDriver"</span><span class="token punctuation">;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// repalace "hive" here with the name of user the queries should run as</span>        Connection con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:hive2://node00:10000/default"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from log limit 0"</span><span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、-Hive分区与自定义函数UDF-UDAF-UDTF"><a href="#七、-Hive分区与自定义函数UDF-UDAF-UDTF" class="headerlink" title="七、==Hive分区与自定义函数UDF  UDAF UDTF=="></a>七、==Hive分区与自定义函数UDF  UDAF UDTF==</h2><h3 id="1、-Hive的分区partition（重要）"><a href="#1、-Hive的分区partition（重要）" class="headerlink" title="1、==Hive的分区partition（重要）=="></a>1、==Hive的分区partition（重要）==</h3><blockquote><p><code>功能：</code></p><p>为了方便海量数据的管理和查询，可以对数据建立分区（可按日期、部门、类型等具体业务）。进行分门别类的管理。</p></blockquote><blockquote><p><code>注意：</code></p><ul><li><p>必须在定义表的时候创建partition分区</p></li><li><p>存储数据时，添加分区字段的数据，直接将数据按分区进行存储。<br>   添加分区时：</p><p>   ​             时间的格式：/   ： 存储时会乱码，用   -  不会。<br>   ​             需要指定分区<br>   ​             多个分区时，存在父子目录关系，按顺序对应，对应父子<br>   ​             创建表时，已经指定分区个数，就只能填加指定个数的字段数据</p><pre><code>  删除分区时：</code></pre><p>   ​            若该分区是父分区的最后一个子区，则父分区也会被删除<br>   ​            若删除父分区，其所有子分区也都会被删除<br>   ​            若删除的分区，分别在多个不同父分区中存在，则都会被删除</p><pre><code>  重命名分区时：</code></pre><p>   ​            修改之后的名字不能是已经存在的</p></li><li><p><strong>注意：在创建 删除多分区等操作时一定要注意分区的先后顺序，他们是父子节点的关系。分区字段不要和表字段相同</strong></p></li></ul></blockquote><blockquote><p><code>类别：</code></p><ul><li>单分区和多分区</li><li>静态分区和动态分区</li></ul></blockquote><h4 id="（1）创建分区"><a href="#（1）创建分区" class="headerlink" title="（1）创建分区"></a>（1）创建分区</h4><ul><li><h5 id="单分区建表"><a href="#单分区建表" class="headerlink" title="单分区建表"></a>单分区建表</h5></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> day_table<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span> content string<span class="token punctuation">)</span> partitioned <span class="token keyword">by</span> <span class="token punctuation">(</span>dt string<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">','</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意：</code>【单分区表，按天分区，在表结构中存在id，content，dt三列；以dt为文件夹区分】</p><ul><li><h5 id="双分区建表"><a href="#双分区建表" class="headerlink" title="双分区建表"></a>双分区建表</h5></li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> day_hour_table <span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>content string<span class="token punctuation">)</span> partitioned <span class="token keyword">by</span> <span class="token punctuation">(</span>dt string<span class="token punctuation">,</span> hour string<span class="token punctuation">)</span> <span class="token keyword">row</span> format delimited <span class="token keyword">fields</span> <span class="token keyword">terminated by</span> <span class="token string">','</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>注意：</code></p><p>【双分区表，按天和小时分区，在表结构中新增加了dt和hour两列；先以dt为文件夹，再以hour子文件夹区分】</p><h4 id="（2）添加分区表的分区"><a href="#（2）添加分区表的分区" class="headerlink" title="（2）添加分区表的分区"></a>（2）添加分区表的分区</h4><p>（表已创建，在此基础上添加分区：按什么分区）：</p><p><code>注意：报错</code>：此时添加，要注意分区的个数相对应，否则会报错：</p><pre><code>FAILED: ValidationFailureSemanticException Partition spec &amp;#123;dt=2008-08-08, hour=08&amp;#125; contains non-partition columns</code></pre><p><code>注意：报错</code>此时添加，要注意分区的字段名要对应添加，否则会报如下错误：</p><pre><code>FAILED: ValidationFailureSemanticException Partition spec &amp;#123;d=2008-08-08&amp;#125; contains non-partition columns</code></pre><p><code>注意：</code>一定是存在分区，才可添加</p><p> 添加分区：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name<span class="token keyword">ADD</span> partition_spec <span class="token punctuation">[</span> LOCATION <span class="token string">'location1'</span> <span class="token punctuation">]</span> partition_spec <span class="token punctuation">[</span> LOCATION <span class="token string">'location2'</span> <span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">例： <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> day_table <span class="token keyword">ADD</span> <span class="token keyword">PARTITION</span> <span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token string">'2028-08-08'</span><span class="token punctuation">,</span> hour<span class="token operator">=</span><span class="token string">'08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> day_table <span class="token keyword">ADD</span> <span class="token keyword">PARTITION</span> <span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token string">'2028-08-08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="（3）删除分区"><a href="#（3）删除分区" class="headerlink" title="（3）删除分区"></a>（3）删除分区</h4><p>语法：（– 用户可以用 ALTER TABLE DROP PARTITION 来删除分区。分区的元数据和数据将被一并删除。）</p><p>删除如双分区中的子级分区时，如果仅剩一个子分区，那么父级分区也会被删除。（连坐）</p><pre><code>ALTER TABLE table_name DROP partition_spec, partition_spec,...</code></pre><pre><code>例：ALTER TABLE day_hour_table DROP PARTITION (dt=&#39;2008-08-08&#39;, hour=&#39;08&#39;);ALTER TABLE day_hour_table DROP PARTITION (dt=&#39;2008-08-08&#39;);</code></pre><h4 id="（4）数据加载进分区表中"><a href="#（4）数据加载进分区表中" class="headerlink" title="（4）数据加载进分区表中"></a>（4）数据加载进分区表中</h4><p>语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token punctuation">[</span><span class="token keyword">LOCAL</span><span class="token punctuation">]</span> INPATH <span class="token string">'filepath'</span> <span class="token punctuation">[</span>OVERWRITE<span class="token punctuation">]</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> tablename <span class="token punctuation">[</span><span class="token keyword">PARTITION</span> <span class="token punctuation">(</span>partcol1<span class="token operator">=</span>val1<span class="token punctuation">,</span>partcol2<span class="token operator">=</span>val2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">HDFS：<span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> INPATH <span class="token string">'/user/pv.txt'</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> day_hour_table <span class="token keyword">PARTITION</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token string">'2008-08-08'</span><span class="token punctuation">,</span> hour<span class="token operator">=</span><span class="token string">'08'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>本地：<span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token keyword">local</span> INPATH <span class="token string">'/user/hua/*'</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> day_hour <span class="token keyword">partition</span><span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token string">'2010-07-07'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（5）查看表的所有分区"><a href="#（5）查看表的所有分区" class="headerlink" title="（5）查看表的所有分区"></a>（5）查看表的所有分区</h4><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">show</span> partitions day_hour_table<span class="token punctuation">;</span><span class="token keyword">show</span> partitions day_table<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="（6）重命名分区"><a href="#（6）重命名分区" class="headerlink" title="（6）重命名分区"></a>（6）重命名分区</h4><p>语法：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">PARTITION</span> partition_spec <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> <span class="token keyword">PARTITION</span> partition_spec1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql">例：<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> day_table               <span class="token keyword">PARTITION</span> <span class="token punctuation">(</span>tian<span class="token operator">=</span><span class="token string">'2018-05-01'</span><span class="token punctuation">)</span> <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> <span class="token keyword">PARTITION</span> <span class="token punctuation">(</span>tain<span class="token operator">=</span><span class="token string">'2018-06-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="（7）-动态分区-重要-–注意外部表"><a href="#（7）-动态分区-重要-–注意外部表" class="headerlink" title="（7）==动态分区(重要)–注意外部表=="></a>（7）==动态分区(重要)–注意外部表==</h4><ol><li><p>在本地文件/home/grid/a  中写入以下4行数据</p><blockquote><p> aaa,US,CA<br> aaa,US,CB<br> bbb,CA,BB<br> bbb,CA,BC</p></blockquote></li><li><p>建立非分区表并加载数据 </p></li></ol><p><strong>创建表</strong>   info1</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span>  <span class="token punctuation">(</span>      name STRING<span class="token punctuation">,</span>       cty STRING<span class="token punctuation">,</span>       st STRING<span class="token punctuation">)</span> <span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span><span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>加载数据</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> <span class="token keyword">LOCAL</span> INPATH <span class="token string">'/root/su/a'</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> info1<span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看</strong></p><pre class="line-numbers language-sql"><code class="language-sql">   <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> info1<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>建立外部分区表  info2   , 并动态加载数据  （注意删除外部表的相关事项）</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> EXTERNAL <span class="token keyword">TABLE</span> info2 <span class="token punctuation">(</span>name STRING<span class="token punctuation">)</span> PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span>country STRING<span class="token punctuation">,</span> state STRING<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现动态分区</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token punctuation">.</span>mode<span class="token operator">=</span>nonstrict<span class="token punctuation">;</span>  <span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>partitions<span class="token punctuation">.</span>pernode<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> info2 <span class="token keyword">PARTITION</span> <span class="token punctuation">(</span>country<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> cty<span class="token punctuation">,</span> st <span class="token keyword">FROM</span> info1<span class="token punctuation">;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> info2 <span class="token keyword">PARTITION</span> <span class="token punctuation">(</span>country<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> cty<span class="token punctuation">,</span> st <span class="token keyword">FROM</span> info1<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--两次插入数据，会有两份相同的数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> info2<span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>使用动态分区需要注意设定以下参数：</li></ol><blockquote><p> <strong>hive.exec.dynamic.partition</strong></p><p>默认值：false</p><p>是否开启动态分区功能，默认false关闭。</p><p>使用动态分区时候，该参数必须设置成true;</p></blockquote><blockquote><p><strong>hive.exec.dynamic.partition.mode</strong></p><p>默认值：strict</p><p>动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区。</p><p>一般需要设置为nonstrict</p></blockquote><blockquote><p> <strong>hive.exec.max.dynamic.partitions.pernode</strong></p><p>默认值：100</p><p>在每个执行MR的节点上，最大可以创建多少个动态分区。</p><p>该参数需要根据实际的数据来设定。</p><p>比如：源数据中包含了一年的数据，即day字段有365个值，那么该参数就需要设置成大于365，如果使用默认值100，则会报错。</p></blockquote><blockquote><p><strong>hive.exec.max.dynamic.partitions</strong></p><p>默认值：1000</p><p>在所有执行MR的节点上，最大一共可以创建多少个动态分区。</p><p>同上参数解释。</p></blockquote><blockquote><p> <strong>hive.exec.max.created.files</strong></p><p>默认值：100000</p><p>整个MR Job中，最大可以创建多少个HDFS文件。</p><p>一般默认值足够了，除非你的数据量非常大，需要创建的文件数大于100000，可根据实际情况加以调整。</p></blockquote><blockquote><p> <strong>hive.error.on.empty.partition</strong></p><p>默认值：false</p><p>当有空分区生成时，是否抛出异常。</p><p>一般不需要设置。</p></blockquote><h3 id="2、自定义函数UDF-UDAF-UDTF"><a href="#2、自定义函数UDF-UDAF-UDTF" class="headerlink" title="2、自定义函数UDF  UDAF UDTF"></a>2、自定义函数UDF  UDAF UDTF</h3><blockquote><p>自定义函数包括三种 UDF、UDAF、UDTF</p><p>UDF：一进一出</p><p>UDAF：聚集函数，多进一出。如：Count/max/min</p><p>UDTF：一进多出，如 lateralview  explore()，（类似于mysql中的视图）</p><p><strong>使用方式</strong> ：在HIVE会话中add自定义函数的jar 文件，然后创建 function 继而使用函数</p></blockquote><h4 id="（1）UDF-开发（用的多一点）"><a href="#（1）UDF-开发（用的多一点）" class="headerlink" title="（1）UDF 开发（用的多一点）"></a>（1）UDF 开发（用的多一点）</h4><p>Hive的函数课参考官网，用时查阅即可： <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF</a></p><p><strong>1、</strong>UDF函数可以直接应用于 select 语句，对查询结构做格式化处理后，再输出内容。</p><p><strong>2、</strong>编写 UDF 函数的时候需要注意一下几点：</p><p>  a）自定义 UDF 需要<code>继承</code> org.apache.hadoop.hive.ql.<code>UDF</code>。</p><p>  b）需要<code>实现</code> <code>evaluate</code> 函数，evaluate 函数支持重载。</p><p><strong>3、</strong>步骤</p><p>  a）把程序打包放到目标机器上去；</p><p>（需要hive和hadoop，jdk 的相关jar包）</p><p>函数一：脱敏处理</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>udf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>UDF<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TuoMing</span> <span class="token keyword">extends</span> <span class="token class-name">UDF</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Text res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Text <span class="token function">evaluate</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 校验参数是否为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>string<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若为单个字符        </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      String str1 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String str2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>str1<span class="token operator">+</span><span class="token string">"***"</span><span class="token operator">+</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数二：add函数</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bigdata<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>udf<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>exec<span class="token punctuation">.</span>UDF<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token keyword">extends</span> <span class="token class-name">UDF</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Text res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Text <span class="token function">evaluate</span><span class="token punctuation">(</span>String num1<span class="token punctuation">,</span>String num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 校验参数是否为空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num1<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num2<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span>n<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  b）进入 hive 客户端，添加 jar 包</p><pre class="line-numbers language-sql"><code class="language-sql">  hive<span class="token operator">></span><span class="token keyword">add</span> jar <span class="token operator">/</span>root<span class="token operator">/</span>su<span class="token operator">/</span>TuoMing<span class="token punctuation">.</span>jar<span class="token punctuation">;</span>  <span class="token punctuation">(</span>相当于添加到环境变量中<span class="token punctuation">)</span>  <span class="token punctuation">(</span>清除缓存时记得删除jar包： <span class="token keyword">delete</span> jar <span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">)</span>  <span class="token keyword">delete</span> jar <span class="token operator">/</span>jar<span class="token operator">/</span>udf_test<span class="token punctuation">.</span>jar<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  c）创建临时函数：</p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span><span class="token keyword">CREATE</span> <span class="token keyword">TEMPORARY</span> <span class="token keyword">FUNCTION</span> add_example <span class="token keyword">AS</span> <span class="token string">'hive.udf.add'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TEMPORARY</span> <span class="token keyword">FUNCTION</span> tm_example <span class="token keyword">AS</span> <span class="token string">'com.bigdata.hive.udf.TuoMing'</span><span class="token punctuation">;</span>（<span class="token keyword">as</span> 后面添加的是：包名<span class="token operator">+</span>类名）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  d）查询 HQL 语句：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span>  add_example<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token keyword">FROM</span>  scores<span class="token punctuation">;</span><span class="token keyword">SELECT</span>  add_example<span class="token punctuation">(</span>scores<span class="token punctuation">.</span>math<span class="token punctuation">,</span>scores<span class="token punctuation">.</span>art<span class="token punctuation">)</span>  <span class="token keyword">FROM</span>  scores<span class="token punctuation">;</span><span class="token keyword">SELECT</span>  tm_example<span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token keyword">FROM</span>  log<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  e）销毁临时函数：</p><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span>  <span class="token keyword">DROP</span>  <span class="token keyword">TEMPORARY</span>  <span class="token keyword">FUNCTION</span>  tm_example<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="（2）UDAF自定义聚集函数-用的少"><a href="#（2）UDAF自定义聚集函数-用的少" class="headerlink" title="（2）UDAF自定义聚集函数(用的少)"></a>（2）UDAF自定义聚集函数(用的少)</h4><blockquote><p>多行进一行出，如 sum()、min()，用在 group  by 时</p></blockquote><p>**1.**必须<code>继承</code>org.apache.hadoop.hive.ql.exec.<code>UDAF</code>(函数类继承)</p><p>org.apache.hadoop.hive.ql.exec.<code>UDAFEvaluator</code>(内部类 Evaluator 实现 UDAFEvaluator 接口)</p><p>**2.**Evaluator 需要实现 <code>init、iterate、terminatePartial、merge、terminate</code> 这几个函数</p><blockquote><ul><li><p>init():类似于构造函数，用于 UDAF 的初始化</p></li><li><p>iterate():接收传入的参数，并进行内部的轮转，返回 boolean</p></li><li><p>terminatePartial():无参数，其为 iterate 函数轮转结束后，返回轮转数据，</p></li></ul><p>类似于 hadoop 的Combinermerge()：接收 terminatePartial 的返回结果，进行数据 merge 操作，</p><p>​                                                                  其返回类型为 boolean </p><ul><li>terminate():返回最终的聚集函数结果</li></ul></blockquote><p>开发一个功能同：</p><blockquote><p>Oracle 的 wm_concat()函数</p><p>Mysql 的 group_concat()</p></blockquote><blockquote><p>Hive  UDF 的数据类型：</p></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz53mse6n1j30fe0c3jxm.jpg" alt="Hive  UDF 的数据类型："></p><h4 id="（3）UDTF（用的少一点）"><a href="#（3）UDTF（用的少一点）" class="headerlink" title="（3）UDTF（用的少一点）"></a>（3）UDTF（用的少一点）</h4><p>UDTF：一进多出，如 lateral  view  explode( )  返回一个数组表</p><blockquote><p><strong>Hive Lateral View</strong>   视图</p><p>Lateral View用于和UDTF函数（explode、split）结合来使用。</p><p>首先通过UDTF函数拆分成多行，再将多行结果组合成一个支持别名的虚拟表。</p><p><code>主要解决</code></p><p>在select使用UDTF做查询过程中，查询只能包含单个UDTF，不能包含其他字段、以及多个UDTF的问题</p></blockquote><blockquote><p><code>语法：</code></p><p>LATERAL VIEW udtf(expression) tableAlias AS columnAlias (‘,’ columnAlias)</p></blockquote><blockquote><p><code>例：</code></p><p>统计人员表中共有多少种爱好、多少个城市?</p><pre><code>select count(distinct(myCol1)), count(distinct(myCol2))，count(distinct(myCol3))from log2       LATERAL VIEW explode(likes) myTable1 AS myCol1       LATERAL VIEW explode(address) myTable2 AS myCol2, myCol3;</code></pre></blockquote><pre><code>select myCol1, myCol2 from log2       LATERAL VIEW explode(likes) myTable1 AS myCol1       LATERAL VIEW explode(address) myTable2 AS myCol2, myCol3;</code></pre><blockquote><p>distinct(myCol1) 表示去重</p></blockquote><blockquote><p>LATERAL VIEW explode(likes) myTable1   AS myCol1   </p><p>将likes查询结果放到mytable1表中，作为字段myCol1     </p></blockquote><blockquote><p> LATERAL VIEW explode(address) myTable2 AS myCol2, myCol3;</p><p>将address查询结果放到myTable2 表中，作为字段myCol2，myCol3，因为address是包含K-V的（两个）</p></blockquote><h2 id="八、Hive索引-知道"><a href="#八、Hive索引-知道" class="headerlink" title="八、Hive索引(知道)"></a>八、Hive索引(知道)</h2><blockquote><p>一个表上创建索引：</p><p>使用给定的列表的列作为键创建一个索引。</p><p>详见创建<a href="javascript:changelink('https://cwiki.apache.org/confluence/display/Hive/IndexDev#IndexDev-CREATEINDEX','EN2ZH_CN');">索引</a>设计文档。</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_name  <span class="token keyword">ON</span> <span class="token keyword">TABLE</span> base_table_name <span class="token punctuation">(</span>col_name<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token keyword">AS</span> index_type  <span class="token punctuation">[</span><span class="token keyword">WITH</span> DEFERRED REBUILD<span class="token punctuation">]</span>  <span class="token punctuation">[</span>IDXPROPERTIES <span class="token punctuation">(</span>property_name<span class="token operator">=</span>property_value<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token operator">IN</span> <span class="token keyword">TABLE</span> index_table_name<span class="token punctuation">]</span>  <span class="token punctuation">[</span>     <span class="token punctuation">[</span> <span class="token keyword">ROW</span> FORMAT <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> STORED <span class="token keyword">AS</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token operator">|</span> STORED <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">]</span>  <span class="token punctuation">[</span>LOCATION hdfs_path<span class="token punctuation">]</span>  <span class="token punctuation">[</span>TBLPROPERTIES <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token keyword">COMMENT</span> <span class="token string">"index comment"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、案例实践"><a href="#九、案例实践" class="headerlink" title="九、案例实践"></a>九、案例实践</h2><h3 id="案例一：-基站掉话率"><a href="#案例一：-基站掉话率" class="headerlink" title="案例一：(基站掉话率)"></a>案例一：(基站掉话率)</h3><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz53p74gyrj30fe07sab1.jpg" alt="基站掉话率"></p><h4 id="1、创建表"><a href="#1、创建表" class="headerlink" title="1、创建表"></a>1、创建表</h4><p>cell_monitor表</p><pre><code>create table cell_monitor(        record_time string,        imei string,        cell string,        ph_num int,        call_num int,        drop_num int,        duration int,        drop_rate DOUBLE,        net_type string,        erl string)ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;,&#39;STORED AS TEXTFILE;</code></pre><p> 结果表cell_drop_monitor</p><pre><code>create table cell_drop_monitor(imei string,total_call_num int,total_drop_num int,d_rate DOUBLE) ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;\t&#39;STORED AS TEXTFILE;</code></pre><h4 id="2、load数据"><a href="#2、load数据" class="headerlink" title="2、load数据"></a><strong>2</strong>、load<strong>数据</strong></h4><pre><code>LOAD DATA LOCAL INPATH &#39;/root/su/cdr_summ_imei_cell_info.csv&#39; OVERWRITE INTO TABLE cell_monitor;</code></pre><h4 id="3、找出掉线率最高的基站"><a href="#3、找出掉线率最高的基站" class="headerlink" title="3、找出掉线率最高的基站"></a><strong>3</strong>、找出掉线率最高的基站</h4><pre><code>from cell_monitor cm insert overwrite table cell_drop_monitor  select cm.imei ,sum(cm.drop_num),sum(cm.duration),sum(cm.drop_num)/sum(cm.duration) d_rate group by cm.imei sort by d_rate desc;</code></pre><h3 id="案例二：（单词统计）"><a href="#案例二：（单词统计）" class="headerlink" title="案例二：（单词统计）"></a>案例二：（单词统计）</h3><h4 id="1、建表"><a href="#1、建表" class="headerlink" title="1、建表"></a><strong>1</strong>、建表</h4><pre><code>create table docs(line string);create table wc(word string, totalword int);</code></pre><h4 id="2、加载数据"><a href="#2、加载数据" class="headerlink" title="2、加载数据"></a>2、加载数据</h4><pre><code>load data local inpath &#39;/tmp/wc&#39; into table docs;</code></pre><h4 id="3、统计"><a href="#3、统计" class="headerlink" title="3、统计"></a>3、统计</h4><pre><code>from (select explode(split(line, &#39; &#39;)) as word from docs) w insert into table wc   select word, count(1) as totalword   group by word   order by word;</code></pre><h4 id="4、查询结果"><a href="#4、查询结果" class="headerlink" title="4、查询结果"></a><strong>4</strong>、查询结果</h4><pre><code>select * from wc;</code></pre><h2 id="十、-分桶（重要）"><a href="#十、-分桶（重要）" class="headerlink" title="十、==分桶（重要）=="></a>十、==分桶（重要）==</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><blockquote><ul><li><p>主要应用于<code>数据抽样</code>。</p></li><li><p>通过对<code>列值取哈希</code>值的方式，将不同数据放到不同的文件中存储。</p></li><li><p>对Hive中每个<code>表</code>、<code>分区</code>都可以进行分桶。</p></li><li><p>列的哈希值 /桶的个数→<code>决定</code>每条数据划分到哪个桶中</p></li></ul></blockquote><h3 id="2、开启支持分桶"><a href="#2、开启支持分桶" class="headerlink" title="2、开启支持分桶"></a>2、开启支持分桶</h3><pre class="line-numbers language-sql"><code class="language-sql">hive<span class="token operator">></span> <span class="token keyword">set</span> hive<span class="token punctuation">.</span>enforce<span class="token punctuation">.</span>bucketing<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>默认：false；</p><p>设置为true之后，mr运行时会根据bucket的个数自动分配reduce task个数。</p><p>（用户也可以通过mapred.reduce.tasks自己设置reduce任务个数，但分桶时不推荐使用）</p><p><strong>一次作业产生的桶数 = reducde task数</strong></p></blockquote><h3 id="3、往分桶表中加载数据"><a href="#3、往分桶表中加载数据" class="headerlink" title="3、往分桶表中加载数据"></a>3、往分桶表中加载数据</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> bucket_table <span class="token keyword">select</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> tbl<span class="token punctuation">;</span><span class="token keyword">insert</span> overwrite <span class="token keyword">table</span> bucket_table <span class="token keyword">select</span> <span class="token keyword">columns</span> <span class="token keyword">from</span> tbl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4、桶表"><a href="#4、桶表" class="headerlink" title="4、桶表"></a>4、桶表</h3><h3 id="抽样查询"><a href="#抽样查询" class="headerlink" title="抽样查询"></a>抽样查询</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> bucket_table tablesample<span class="token punctuation">(</span>bucket <span class="token number">1</span> <span class="token keyword">out</span> <span class="token keyword">of</span> <span class="token number">4</span> <span class="token keyword">on</span> <span class="token keyword">columns</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>TABLESAMPLE语法：</p><pre><code>TABLESAMPLE(BUCKET x OUT OF y)</code></pre><p>x：表示从哪个bucket开始抽取数据，<code>x&lt;=y</code></p><p>y：必须为该表总bucket数的<code>倍数</code>或<code>因子</code></p><p>理解：</p><p>分桶表已经按age分为4桶，然后，有y个人去抽，从第(x 取模 桶数)桶中抽</p></blockquote><h3 id="5、实战"><a href="#5、实战" class="headerlink" title="5、实战"></a>5、实战</h3><p>创建普通表</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> mm<span class="token punctuation">(</span> id <span class="token keyword">INT</span><span class="token punctuation">,</span> name STRING<span class="token punctuation">,</span> age <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试数据</p><pre><code>1,tom,112,cat,223,dog,334,hive,445,hbase,556,mr,667,alice,778,scala,88</code></pre><p>加载数据：</p><pre class="line-numbers language-shell"><code class="language-shell">load data local inpath '/root/su/mm' into table mm;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>创建分桶表</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> psnbucket<span class="token punctuation">(</span> id <span class="token keyword">INT</span><span class="token punctuation">,</span> name STRING<span class="token punctuation">,</span> age <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">CLUSTERED</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">INTO</span> <span class="token number">4</span> BUCKETS <span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED BY</span> <span class="token string">','</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>加载数据：</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> psnbucket <span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age <span class="token keyword">from</span> mm<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>抽样</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age <span class="token keyword">from</span> psnbucket tablesample<span class="token punctuation">(</span>bucket <span class="token number">2</span> <span class="token keyword">out</span> <span class="token keyword">of</span> <span class="token number">4</span> <span class="token keyword">on</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>注意：</code></p><blockquote><p> hive&gt; select id, name, age from psnbucket tablesample(bucket 4 out of 2 on age);<br>FAILED: SemanticException [Error 10061]: Numerator should not be bigger than denominator in sample clause for table psnbucket</p><p>denominator  : 分母</p></blockquote><h2 id="十一、运行方式"><a href="#十一、运行方式" class="headerlink" title="十一、运行方式"></a>十一、运行方式</h2><h3 id="1、Hive运行模式"><a href="#1、Hive运行模式" class="headerlink" title="1、Hive运行模式"></a>1、Hive运行模式</h3><blockquote><h4 id="–-命令行方式cli：控制台模式"><a href="#–-命令行方式cli：控制台模式" class="headerlink" title="– 命令行方式cli：控制台模式"></a>– 命令行方式cli：控制台模式</h4></blockquote><pre><code>--与hdfs交互  * 执行dfs命令  * 例 ：hive&gt; dfs -ls /--与Linux交互   *  ！ 开头   *  hive&gt; !pwd</code></pre><blockquote><h4 id="–脚本运行方式：（生产中常用）"><a href="#–脚本运行方式：（生产中常用）" class="headerlink" title="–脚本运行方式：（生产中常用）"></a>–脚本运行方式：（生产中常用）</h4></blockquote><pre><code>在外部shell中执行,指定数据库,分号可加可不加# hive -e &quot;select * from attr.log &quot;# hive -e &quot;select * from attr.log；select * from default.log2&quot;--------------------------------------------------------------将执行结果重定向到指定文件：# hive -e &quot;select * from attr.log &quot; &gt;&gt;log1--------------------------------------------------------------静默模式执行，不打印log日志# hive -S -e &quot;select * from attr.log &quot; &gt;&gt;log1--------------------------------------------------------------脚本执行先编辑脚本问价# vim file1编辑内容select * from attr.log where id = 1;select * from attr.log where id &lt; 3;执行脚本# hive -f file1--------------------------------------------------------------?? 使用命令文件执行hive-init.sql?? # hive -i /home/hive-init.sql--------------------------------------------------------------在hive cli中执行脚本文件hive&gt; source file1</code></pre><h3 id="？未解决？"><a href="#？未解决？" class="headerlink" title="？未解决？"></a>？未解决？</h3><blockquote><p>?? 使用命令文件执行hive-init.sql<br>?? # hive -i /home/hive-init.sql</p></blockquote><h2 id="十二、hive的GUI接口（web页面）"><a href="#十二、hive的GUI接口（web页面）" class="headerlink" title="十二、hive的GUI接口（web页面）"></a>十二、hive的GUI接口（web页面）</h2><p>Hive Web GUI接口</p><h3 id="web界面安装："><a href="#web界面安装：" class="headerlink" title="web界面安装："></a>web界面安装：</h3><p><strong>1、</strong>下载源码包apache-hive-1.2.1-src.tar.gz,</p><p><strong>2、</strong>在本地Windows系统中解压</p><p>并将\apache-hive-1.2.1-src\hwi\web路径中所有的文件打成war包</p><p><code>制作方法：</code></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz5b7di85fj30rn0eodhm.jpg" alt="war包"></p><blockquote><p>1、到\apache-hive-1.2.1-src\hwi\web路径下</p><p>2、在路径栏输入命令：jar -cvf hive-hwi.war *</p><p>3、即可生成文件：hive-hwi.war</p></blockquote><p><strong>3、</strong>将hwi-war包放在$HIVE_HOME/lib/中（Linux系统）</p><p><strong>4、</strong>复制tools.jar(在jdk的lib目录下)到$HIVE_HOME/lib下</p><p><strong>5、</strong>修改hive-site.xml</p><p>路径：/usr/soft/apache-hive-1.2.1-bin/conf/hive-site.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.hwi.listen.host<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>0.0.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.hwi.listen.port<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>9999<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.hwi.war.file<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>lib/hive-hwi.war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6、</strong>启动hwi服务(端口号9999)</p><pre><code> hive --service hwi</code></pre><p><strong>7、</strong>浏览器通过以下链接来访问</p><p><a href="http://node00:9999/hwi/">http://node00:9999/hwi/</a></p><p><strong>8、</strong>登录页面：</p><p>USER:</p><p>GROUPS:</p><p>自已定义</p><h2 id="十三、权限管理"><a href="#十三、权限管理" class="headerlink" title="十三、权限管理"></a>十三、权限管理</h2><p>Hive - SQL Standards Based Authorization in  HiveServer2</p><h3 id="（1）三种授权模型"><a href="#（1）三种授权模型" class="headerlink" title="（1）三种授权模型"></a>（1）三种授权模型</h3><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz5bus4ks8j30kb08o3zp.jpg"></p><h3 id="（2）常用：基于SQL标准的完全兼容SQL的授权模型"><a href="#（2）常用：基于SQL标准的完全兼容SQL的授权模型" class="headerlink" title="（2）常用：基于SQL标准的完全兼容SQL的授权模型"></a>（2）常用：基于SQL标准的完全兼容SQL的授权模型</h3><p>特点：</p><ul><li><p>支持对于用户的授权认证</p></li><li><p>支持角色role的授权认证</p></li><li><p>role可理解为是一组权限的集合，通过role为用户授权</p><p> 一个用户可以具有一个或多个角色</p><p>​    默认包含俩种角色：public、admin</p></li></ul><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz5c0cf550j30k406tjtk.jpg" alt="限制"></p><h3 id="（3）操作"><a href="#（3）操作" class="headerlink" title="（3）操作"></a>（3）操作</h3><p>在<code>hive服务端</code>修改配置文件hive-site.xml添加以下配置内容：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.security.authorization.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.server2.enable.doAs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.users.in.admin.role<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.security.authorization.manager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdHiveAuthorizerFactory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.security.authenticator.manager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.hive.ql.security.SessionStateUserAuthenticator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>服务端启动hiveserver2；客户端通过beeline进行连接</strong></p><p>角色的添加、删除、查看、设置：</p><p>第一次操作无权限：</p><p>需要：CREATE ROLE  admin；</p><pre><code>CREATE ROLE role_name;               -- 创建角色DROP ROLE role_name;                   -- 删除角色SET ROLE (role_name|ALL|NONE);          -- 设置角色SHOW CURRENT ROLES;                     -- 查看当前具有的角色SHOW ROLES;                             -- 查看所有存在的角色</code></pre><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz5c6wynhnj30hs07kgmv.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz5c8bvsjkj30im077wft.jpg"></p><p>【官网：权限】</p><table><thead><tr><th>Action</th><th>Select</th><th>Insert</th><th>Update</th><th>Delete</th><th>Owership</th><th>Admin</th><th>URL Privilege(RWX   Permission + Ownership)</th></tr></thead><tbody><tr><td>ALTER DATABASE</td><td></td><td></td><td></td><td></td><td></td><td>Y</td><td></td></tr><tr><td>ALTER INDEX PROPERTIES</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td></td></tr><tr><td>ALTER INDEX REBUILD</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td></td></tr><tr><td>ALTER PARTITION LOCATION</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td>Y (for new partition   location)</td></tr><tr><td>ALTER TABLE (all of them   except the ones above)</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td></td></tr><tr><td>ALTER TABLE ADD PARTITION</td><td></td><td>Y</td><td></td><td></td><td></td><td></td><td>Y (for partition location)</td></tr><tr><td>ALTER TABLE DROP PARTITION</td><td></td><td></td><td></td><td>Y</td><td></td><td></td><td></td></tr><tr><td>ALTER TABLE LOCATION</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td>Y (for new location)</td></tr><tr><td>ALTER VIEW PROPERTIES</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td></td></tr><tr><td>ALTER VIEW RENAME</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td></td></tr><tr><td>ANALYZE TABLE</td><td>Y</td><td>Y</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>CREATE DATABASE</td><td></td><td></td><td></td><td></td><td></td><td></td><td>Y (if custom location   specified)</td></tr><tr><td>CREATE FUNCTION</td><td></td><td></td><td></td><td></td><td></td><td>Y</td><td></td></tr><tr><td>CREATE INDEX</td><td></td><td></td><td></td><td></td><td>Y (of table)</td><td></td><td></td></tr><tr><td>CREATE MACRO</td><td></td><td></td><td></td><td></td><td></td><td>Y</td><td></td></tr><tr><td>CREATE TABLE</td><td></td><td></td><td></td><td></td><td>Y (of database)</td><td></td><td>Y  (for create   external table – the location)</td></tr><tr><td>CREATE TABLE AS SELECT</td><td>Y (of input)</td><td></td><td></td><td></td><td>Y (of database)</td><td></td><td></td></tr><tr><td>CREATE VIEW</td><td>Y + G</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>DELETE</td><td></td><td></td><td></td><td>Y</td><td></td><td></td><td></td></tr><tr><td>DESCRIBE TABLE</td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>DROP DATABASE</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td></td></tr><tr><td>DROP FUNCTION</td><td></td><td></td><td></td><td></td><td></td><td>Y</td><td></td></tr><tr><td>DROP INDEX</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td></td></tr><tr><td>DROP MACRO</td><td></td><td></td><td></td><td></td><td></td><td>Y</td><td></td></tr><tr><td>DROP TABLE</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td></td></tr><tr><td>DROP VIEW</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td></td></tr><tr><td>DROP VIEW PROPERTIES</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td></td></tr><tr><td>EXPLAIN</td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>INSERT</td><td></td><td>Y</td><td></td><td>Y (for OVERWRITE)</td><td></td><td></td><td></td></tr><tr><td>LOAD</td><td></td><td>Y (output)</td><td></td><td>Y (output)</td><td></td><td></td><td>Y (input location)</td></tr><tr><td>MSCK (metastore check)</td><td></td><td></td><td></td><td></td><td></td><td>Y</td><td></td></tr><tr><td>SELECT</td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>SHOW COLUMNS</td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>SHOW CREATE TABLE</td><td>Y+G</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>SHOW PARTITIONS</td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>SHOW TABLE PROPERTIES</td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>SHOW TABLE STATUS</td><td>Y</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>TRUNCATE TABLE</td><td></td><td></td><td></td><td></td><td>Y</td><td></td><td></td></tr><tr><td>UPDATE</td><td></td><td></td><td>Y</td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="十四、-Hive优化（重点）"><a href="#十四、-Hive优化（重点）" class="headerlink" title="十四、==Hive优化（重点）=="></a>十四、==Hive优化（重点）==</h2><p><code>详见Hive优化文档</code></p><h1 id="hive-参数与变量"><a href="#hive-参数与变量" class="headerlink" title="hive 参数与变量"></a>hive 参数与变量</h1><h2 id="1、hive当中的参数、变量"><a href="#1、hive当中的参数、变量" class="headerlink" title="1、hive当中的参数、变量"></a>1、hive当中的参数、变量</h2><p>hive当中的参数、变量，都是以命名空间开头</p><table><thead><tr><th align="center">命名空间</th><th align="center">读写权限</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">hiveconf</td><td align="center">可读写</td><td align="center">hive-site.xml当中的各配置变量<br>例：hive –hiveconf hive.cli.print.header=true</td></tr><tr><td align="center">system</td><td align="center">可读写</td><td align="center">系统变量，包含JVM运行参数<br>例：system:user.name=root</td></tr><tr><td align="center">env</td><td align="center">只读</td><td align="center">环境变量<br>例：env:JAVA_HOME</td></tr><tr><td align="center">hivevar</td><td align="center">可读写</td><td align="center">例：hive -d val=key</td></tr></tbody></table><p>通过${}方式进行引用，其中system、env下的变量必须以前缀开头</p><h2 id="2、hive-参数设置方式"><a href="#2、hive-参数设置方式" class="headerlink" title="2、hive 参数设置方式"></a>2、hive 参数设置方式</h2><p>1、修改配置文件 ${HIVE_HOME}/conf/hive-site.xml</p><p>2、启动hive cli时，通过–hiveconf key=value的方式进行设置</p><p>例：</p><pre class="line-numbers language-shell"><code class="language-shell">hive --hiveconf hive.cli.print.header=true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、进入cli之后，通过使用set命令设置</p><h2 id="3、hive-set命令"><a href="#3、hive-set命令" class="headerlink" title="3、hive set命令"></a>3、hive set命令</h2><p>-    在hive CLI控制台可以通过set对hive中的参数进行查询、设置</p><p>-    set设置：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>cli<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">.</span>header<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-     set查看</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>cli<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">.</span>header<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-     hive参数初始化配置</p><p>当前用户家目录下的.hiverc文件</p><p>如:  </p><pre class="line-numbers language-sql"><code class="language-sql"> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>hiverc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有，可直接创建该文件，将需要设置的参数写到该文件中，hive启动运行时，会加载改文件中的配置。</p><p>-     hive历史操作命令集</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>hivehistory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Hive常用函数：</p><p><a href="https://www.cnblogs.com/kimbo/p/6288516.html">https://www.cnblogs.com/kimbo/p/6288516.html</a></p><p><a href="https://www.iteblog.com/archives/2258.html#3_avg">https://www.iteblog.com/archives/2258.html#3_avg</a></p><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-Built-inFunctions">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-Built-inFunctions</a></p><p>MapReducde底层源码：</p><ol><li><a href="http://note.youdao.com/noteshare?id=212e4a69d7bf8fc30979f1e4fc39ff0f&amp;sub=EA7C15DC72DF45248721CE2AD3F93CDD">http://note.youdao.com/noteshare?id=212e4a69d7bf8fc30979f1e4fc39ff0f&amp;sub=EA7C15DC72DF45248721CE2AD3F93CDD</a></li><li><a href="http://note.youdao.com/noteshare?id=86ca5c96d13413f789164ff92f9ab4f9&amp;sub=7F20006D1D714D77AEDE5242603786C1">http://note.youdao.com/noteshare?id=86ca5c96d13413f789164ff92f9ab4f9&amp;sub=7F20006D1D714D77AEDE5242603786C1</a></li><li><a href="http://note.youdao.com/noteshare?id=a518dfed10d824b0995380669ddd28c9&amp;sub=3526F532CDAA49628FEA1FE3A61239F3">http://note.youdao.com/noteshare?id=a518dfed10d824b0995380669ddd28c9&amp;sub=3526F532CDAA49628FEA1FE3A61239F3</a></li><li><a href="http://note.youdao.com/noteshare?id=95d458d779f8e9f391d6ea06b6c6d122&amp;sub=0A13B59E10D94C96ABF5388CE4EB89D4">http://note.youdao.com/noteshare?id=95d458d779f8e9f391d6ea06b6c6d122&amp;sub=0A13B59E10D94C96ABF5388CE4EB89D4</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce源码分析</title>
      <link href="/2019/01/08/MapReduce%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/01/08/MapReduce%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> MapReduce </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDFS </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce案例实践</title>
      <link href="/2019/01/07/MapReduce%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
      <url>/2019/01/07/MapReduce%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>端口统计：</p><table><thead><tr><th align="center">Port</th><th align="center">使用框架</th></tr></thead><tbody><tr><td align="center">50070</td><td align="center">hdfs的http端口</td></tr><tr><td align="center">9000</td><td align="center">hadoop1.X的rpc端口</td></tr><tr><td align="center">8020</td><td align="center">hadoop2.X的rpc端口</td></tr><tr><td align="center">8088</td><td align="center">YARN的http端口</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h1 id="一、单词字数统计"><a href="#一、单词字数统计" class="headerlink" title="一、单词字数统计"></a>一、单词字数统计</h1><p>Job类</p><blockquote><p>新建Configuration ：</p><p>​     设置hdfs和yarn的配置</p><p>获取Job ：</p><p>​     设置Job类和JobName</p><p>​     设置Map端和Reduce端的类</p><p>​    设置Map端输出的key和value的类</p><p>调用FileInputFormat类添加输入的文件</p><p>调用FileOutputFormat类添加计算结果存放的路径</p></blockquote><p>Map类</p><blockquote><p>将输入的（K，V）转换成新的（K,V）：每个单词计数为1</p><p>通过Context写出</p></blockquote><p>Reduce类</p><blockquote><p>遍历获取的value-list ， 实现累加</p><p>通过Context写出</p></blockquote><h1 id="二、二度人脉推荐"><a href="#二、二度人脉推荐" class="headerlink" title="二、二度人脉推荐"></a>二、二度人脉推荐</h1><p>Job类</p><blockquote><p>新建Configuration ：</p><p>​     设置hdfs和yarn的配置</p><p>获取Job ：</p><p>​     设置Job类和JobName</p><p>​     设置Map端和Reduce端的类</p><p>​    设置Map端输出的key和value的类</p><p>调用FileInputFormat类添加输入的文件（在hdfs上）</p><p>调用FileOutputFormat类添加计算结果存放的路径（在hdfs上）</p><p><em>如上配置两个Job任务。</em></p></blockquote><p>Map01类</p><blockquote><p>根据一度好友，建立排序后的某一用户与好友对应关系，作为key ，用0作为value</p><p>同样  ，建立排序后某一用户好友的好友之间的对应关系，作为key ， 用 1 作为value</p><p>用context写出</p></blockquote><p>Reduce01类</p><blockquote><p>排除好友对应关系中value为 0 的 key ， 统计好友关系中value 为非0 的key的个数 ， 并将该好友关系拼接个数，作为key，用context写出，null为value</p></blockquote><p>Map02类</p><blockquote><p>切分输入的key ， 分别获取好友关系以及个数，写出时，根据个数排序，</p></blockquote><p>Reduce02类</p><blockquote><p>再次合并，输出二度好友关系，按热度排序</p></blockquote><h1 id="三、天气统计每月Top"><a href="#三、天气统计每月Top" class="headerlink" title="三、天气统计每月Top"></a>三、天气统计每月Top</h1><p>存在二次排序：需要定义两个比较器</p><p>分组—排序</p><p>排序–再按温度</p><p>Map类</p><blockquote><p>将输入的数据的格式，转换成所需的文件格式对象，并以（K,V）格式写出</p><p>在写出之前，已经按月分组，并按温度排序</p></blockquote><p>Reduce类</p><blockquote><p>将对象转换成字符串，再以新的（K,V）格式写出</p><p>写出之前只取前两个温度最高的</p></blockquote><h1 id="四、tf-idf-：微博热词重要性搜索"><a href="#四、tf-idf-：微博热词重要性搜索" class="headerlink" title="四、tf-idf ：微博热词重要性搜索"></a>四、tf-idf ：微博热词重要性搜索</h1><p>分成三个Job</p><p>Job1</p><blockquote><p>基本配置以及指定输入输出文件路径</p></blockquote><p>Map1</p><blockquote><p>计算词频 ， 分词器ik  ， 得到的单词拼接微博Id ，作为key ， 以1 为value</p><p>以count为key ， 以 1 为value ， 用来对微博计数</p></blockquote><p>Reduce1</p><blockquote><p>对分词累加 ， 对微博数累加 ， 按分区以新的（K,V） 写出</p></blockquote><p>Job 2 </p><blockquote><p>以Job1 的输出作为输入文件，再指定输出文件路径</p></blockquote><p>Map2</p><blockquote><p>获取所有输入的split ， 对所有单词 ， 以单词为key ， 以  1 为value</p></blockquote><p>Reduce2 </p><blockquote><p>对所有单词进行统计，</p></blockquote><p>Job3</p><blockquote><p>以Job1 的输出文件作为输入文件</p></blockquote><p>Map3 </p><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MapReduce </tag>
            
            <tag> 分布式离线计算框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapReduce学习</title>
      <link href="/2019/01/05/MapReduce%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/05/MapReduce%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MapReduce是什么"><a href="#一、MapReduce是什么" class="headerlink" title="一、MapReduce是什么"></a>一、MapReduce是什么</h2><p>1、概念</p><p>MapReduce是一种<code>分布式离线计算框架</code>，是一种编程模型，用于在分布式系统上大规模数据集(大于1TB)的并行运算。</p><p>分布式编程：</p><blockquote><p>借助一个集群，通过多台机器去并行处理大规模数据集，从而获得海量计算能力。</p></blockquote><p>2、理解</p><p><code>Map</code>(映射)</p><p><code>Reduce</code>(归约)</p><blockquote><p>指定一个Map(映射)函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce(归约)函数，用来保证所有映射的键值对中的每一个共享相同的键组。</p></blockquote><h2 id="二、MapReduce设计理念"><a href="#二、MapReduce设计理念" class="headerlink" title="二、MapReduce设计理念"></a>二、MapReduce设计理念</h2><p>1、分布式计算</p><blockquote><p>分布式计算将该应用分解成许多小的部分，分配给多台计算机节点进行处理。这样可以节约整体计算时间，大大提高计算效率。</p></blockquote><p><strong>分而治之</strong>策略：</p><blockquote><p>一个存储在分布式文件系统中的大规模数据集，</p><p>会被切分成许多独立的分片（split），</p><p>这些分片可以被</p><p>多个Map任务并行处理</p></blockquote><p>2、移动计算，而非移动数据</p><blockquote><p>将计算程序应用移动到具有数据的集群计算机节点之上进行计算操作；</p><p>将有用、准确、及时的信息提供给任何时间、任何地点的任何客户。</p></blockquote><p>3、Master/Slave架构</p><blockquote><p>包括一个Master和若干个Slave。<br>Master上运行JobTracker，Slave上运行TaskTracker</p></blockquote><h2 id="三、MapReduce计算框架的组成"><a href="#三、MapReduce计算框架的组成" class="headerlink" title="三、MapReduce计算框架的组成"></a>三、MapReduce计算框架的组成</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz6guaswsqj30fd06pwgh.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz6hucmi5pj30v90exn7e.jpg" alt="MR"></p><p>1、 Mapper负责“<strong>分</strong>”，即把得到的复杂的任务分解为若干个“简单的任务”执行。</p><p>​        “简单的任务”：</p><ul><li><p>数据或计算规模相对于原任务要大大缩小；</p></li><li><p>就近计算，即会被分配到存放了所需数据的节点进行计算；</p></li><li><p>每个map任务之间可以并行计算，不产生任何通信。</p></li></ul><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz6hw158klj30f308eq7e.jpg" alt="split"></p><p>2、Split规则：（取三者的中间值）</p><p>–  max.split(100M)</p><p>–  min.split(10M)</p><p>–  block(64M)</p><p><strong>max(min.split,min(max.split,block))</strong></p><p><strong>split实际大小=block大小</strong>（2.X：128M）</p><p>Map的数目通常是由输入数据的大小决定的，一般就是所有输入文件的总块（block）数</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz6hz81714j30ea07vmzd.jpg"></p><p>3、Reduce详解（总·重要）</p><p>–  Reduce的任务是对map阶段的结果进行“<strong>汇总</strong>”并输出。</p><p>Reducer的数目由mapred-site.xml配置文件里的项目mapred.reduce.tasks决定。缺省值为1，用户可自定义。</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz6i3l3zo1j30fe09mq62.jpg"></p><p>4、Shuffle详解（总·核心）</p><p>– 在mapper和reducer中间的一个步骤</p><p>   可以把mapper的输出按照某种key值重新切分和组合成n份，把key值符合某种范围的输出送到特定的reducer那里去处理。</p><p>–  可以简化reducer过程</p><p>Partitoner ： hash(key) mod R</p><h2 id="四、MapReduce架构"><a href="#四、MapReduce架构" class="headerlink" title="四、MapReduce架构"></a>四、MapReduce架构</h2><h3 id="1、非共享式架构"><a href="#1、非共享式架构" class="headerlink" title="1、非共享式架构"></a>1、非共享式架构</h3><p>每个节点都有自己的内存，容错性比较好。</p><h3 id="2、一主多从架构"><a href="#2、一主多从架构" class="headerlink" title="2、一主多从架构"></a>2、一主多从架构</h3><p>可扩展性好，硬件要求易达到。</p><p>–  主 JobTracker:（ResourceManager资源管理）</p><blockquote><p>负责调度分配每一个子任务task运行于TaskTracker上，</p><p>如果发现有失败的task就重新分配其任务到其他节点。</p><p>每一个hadoop集群中只一个 JobTracker, 一般它运行在Master节点上。</p></blockquote><p>–  从TaskTracker:（NodeManager）</p><blockquote><p>TaskTracker主动与JobTracker通信，接收作业，并负责直接执行每一个任务，</p><p>为了减少网络带宽TaskTracker最好运行在HDFS的DataNode上。</p></blockquote><h1 id="MapReduce的体系结构"><a href="#MapReduce的体系结构" class="headerlink" title="MapReduce的体系结构"></a>MapReduce的体系结构</h1><p>MapReduce主要有以下4个部分组成</p><pre><code>1 ）Client•用户编写的MapReduce程序通过Client提交到JobTracker端•用户可通过Client提供的一些接口查看作业运行状态2 ）JobTracker•JobTracker负责资源监控和作业调度•JobTracker 监控所有TaskTracker与Job的健康状况，一旦发现失败，就将相应的任务转移到其他节点•JobTracker 会跟踪任务的执行进度、资源使用量等信息，并将这些信息告诉任务调度器（TaskScheduler），而调度器会在资源出现空闲时，选择合适的任务去使用这些资源3 ）TaskTracker•TaskTracker 会周期性地通过“心跳”将本节点上资源的使用情况和任务的运行进度汇报给JobTracker，同时接收JobTracker 发送过来的命令并执行相应的操作（如启动新任务、杀死任务等）•TaskTracker 使用“slot”等量划分本节点上的资源量（CPU、内存等）。一个Task 获取到一个slot 后才有机会运行，而Hadoop调度器的作用就是将各个TaskTracker上的空闲slot分配给Task使用。slot 分为Map slot 和Reduce slot 两种，分别供MapTask和Reduce Task使用（所以最好放在DataNode上）4 ）TaskTask 分为Map Task 和Reduce Task 两种，均由TaskTracker 启动</code></pre><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz6i591yd9j30tp0fqq4x.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz6ivspvrcj30y50dujum.jpg"></p><h2 id="五、MapReduce搭建"><a href="#五、MapReduce搭建" class="headerlink" title="五、MapReduce搭建"></a>五、MapReduce搭建</h2><h3 id="1、节点分布情况"><a href="#1、节点分布情况" class="headerlink" title="1、节点分布情况"></a>1、节点分布情况</h3><table><thead><tr><th align="center"></th><th align="center">NN</th><th align="center">DN</th><th align="center">JN</th><th align="center">ZK</th><th align="center">ZKFC</th><th align="center">RM</th><th align="center">NM</th></tr></thead><tbody><tr><td align="center">node00</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center">√</td></tr><tr><td align="center">node01</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">node02</td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center">√</td><td align="center">√</td></tr></tbody></table><h3 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h3><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz6j2l1t72j30fe0begoy.jpg"></p><p>修改配置文件</p><p>备用resourcemanager。</p><p>文件：masters</p><pre><code>node2</code></pre><p>(1)**mapred-site.xml:**（配置mapreudce需要的框架环境）</p><p>路径：F:\hadoop-2.6.5\etc\hadoop\mapred-site.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）**yarn-site.xml:**（配置yarn的任务调度的计算框架）</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<strong>ResourceManager</strong> <strong>和NodeManager</strong>主从结构，RM存在单点故障，要对它做HA（通过ZK）</p><p>修改yarn-site.xml配置文件,完整的内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.cluster-id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Sukie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.rm-ids<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>rm1,rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.zk-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node1:2181,node2:2181,node3:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、个人理解"><a href="#六、个人理解" class="headerlink" title="六、个人理解"></a>六、个人理解</h2><blockquote><p>基于源码，对mapreduce的工作流程的描述：</p></blockquote><pre><code>一个应用程序要进行大规模数据处理分析数据文件保存在HDFS中，分块存储在分布式节点上首先是将数据文件切分成许多split切片每一个split切片单独启动一个map任务，所以会启动多个map任务map阶段的输入是诸多(key,value),输出是新的（key,value）,然后被拉去到不同的reduce上并行处理操作所以每个map的输出阶段都执行分区操作，并决定reduce任务的个数然后对map输出结果进行分区、排序、归并、合并，这个过程叫map阶段的shuffleshuffle结束后，将相应的结果分发给reduce，让reduce完成后续的工作 结束后，将结果输出给HDFS。不同的map之间并行计算，不会通信；不同的reduce也不会通信，整个过程对用户透明。</code></pre><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz6zgfpvqnj30tw0fxace.jpg" alt="shuffle"></p><blockquote><p>MapReduce执行的各个阶段：</p></blockquote><pre><code>1、从HDFS中加载文件，加载读取由InputFormat模块来完成，对输入负责格式验证，同时，对数据进行逻辑上切分成split2、由record read具体根据分片的位置长度信息去找各个block，以（key，value）输出，作为map的输入，3、map中有用户自定义的map函数就可以进行相应的数据处理，并输出一堆（key，value），作为中间结果4、之后，是shuffle（洗牌）过程对这中间结果进行分区、排序、合并，并溢写到磁盘，5、相应的reduce任务就会来fetch对应的分区（key，value-list）6、reduce中有用户自定义的reduce函数就可以完成对数据的分析，结果以新的（key，value）输出7、输出结果借助OutputFormat模块对输出格式进行检查，以及相关目录是否存在等，最后写入到HDFS中。</code></pre><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz6zikp8mbj30vh0fldle.jpg" alt="split"></p><blockquote><p>关于split的切分的理解：</p></blockquote><pre><code>1、InputFormat将大的数据文件分成很多split2、文件在HDFS中是以很多个物理块block分布式存储不同的节点上3、切片是用户自定义的逻辑分片4、split的数量决定map任务的数量5、切片过多会导致map任务启动过多，map任务之间切换的时候就会耗费相关的管理资源，所以切片过多会影响执行效率6、 切片过少又会影响任务执行的并行度，所以理想情况用block块的大小作为切片的大小。</code></pre><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz6ztmqg0oj30s00dg42p.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz85ufnyj9j30ud0b3mz0.jpg"></p><blockquote><p>关于shuffle的理解</p></blockquote><pre><code>map端shuffle1、从HDFS输入数据和执行map任务，在map任务执行之前，RecordReader阅读器还将数据变成满足Map函数所需的（K，V）形式，然后InputFormat会将其切分成若干切片（一堆（K，V））。2、每个切片会分配一个map任务，每个map任务会分配一个默认的缓存，一般默认缓存为100M.map的输出键值对作为中间结果先写入到缓存（直接写入磁盘会增加寻址开销，所以集中写入磁盘一次寻址就可以完成批量写入，就可以将寻址开销分摊到大量数据中，这就是缓存的作用）。3、当写入的内容达到缓存空间的一定比例后（溢写比，一般为0.8，就是80M的时候，为了不影响map任务的继续执行），会启动溢写进程，把缓存中相关数据写入磁盘。4、在溢写过程中，会执行分区（partition）、排序（sort，按照key值）和可能的合并（combine，为了减少溢写到磁盘的数据量，慎用）操作，写入磁盘，生成磁盘的溢写文件。5、在map任务运行结束前，系统会对溢写文件进行归并（merge），形成大文件（里面的键值对是分区，排序的）,文件格式为（key,value&lt;list&gt;），归并时如果溢写文件大于预定值（默认为3），会再次合并reduce端shuffle1、reduce任务会询问JobTracker，去拉取map机器上的属于自己的分区，对来自不同机器的数据进行归并、合并，然后输入到reduce函数中进行数据的处理分析，再写入磁盘</code></pre><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz87b2w9k0j30vg0fijvo.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz87chuik1j30y50g00wu.jpg"></p><p>我</p><h1 id="MapReduce应用程序执行过程"><a href="#MapReduce应用程序执行过程" class="headerlink" title="MapReduce应用程序执行过程"></a>MapReduce应用程序执行过程</h1><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz87d53czuj30vp0fltap.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper学习</title>
      <link href="/2019/01/04/Zookeeper%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/04/Zookeeper%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>动物园管理员</p><p><code>推荐图书：</code>《从Paxo到Zookeeper》</p><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><blockquote><p>开源的、分布式应用程序，提供**<code>一致性</code>**服务，是Haoop （实现HA）和Hbase（和zookeeper是强依赖关系）的重要组件</p></blockquote><p>提供的功能：</p><ul><li>配置维护</li><li>域名维护</li><li>分布式的同步</li><li>组服务</li></ul><p>Zookeeper→提供通用分布式锁服务，用以协调分布式应用</p><p>Keepalived→实现节点健康检查，采用优先级监控，没有协同工作，功能单一，可扩展性差。</p><h2 id="2、Zookeep的角色"><a href="#2、Zookeep的角色" class="headerlink" title="2、Zookeep的角色"></a>2、Zookeep的角色</h2><p> <img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzd81ntj7tj30fd06pgn1.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzd828tp44j30fo07lwgl.jpg"></p><p>（一般很少配置Observer，因为用的少，而且配置的节点一般为奇数）</p><blockquote><p>Zookeeper需保证高可用和强一致性；</p><p>​    为了支持更多的客户端，需要增加更多Server；</p><p>​    Server增多，投票阶段延迟增大，影响性能；</p><p>​    权衡伸缩性和高吞吐率，引入Observer</p><p>​    Observer不参与投票；</p><p>​    Observers接受客户端的连接，并将写请求转发给leader节点；</p><p>​    加入更多Observer节点，提高伸缩性，同时不影响吞吐率。</p></blockquote><h2 id="3、Zookeeper特点"><a href="#3、Zookeeper特点" class="headerlink" title="3、Zookeeper特点"></a>3、Zookeeper特点</h2><table><thead><tr><th align="center"><strong>特点</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center"><strong><em>最终</em>一致性</strong></td><td>为客户端展示同一个视图，这是zookeeper里面一个非常重要的功能（与强一致性相对）</td></tr><tr><td align="center"><strong>可靠性</strong></td><td>如果消息被到一台服务器接受，那么它将被所有的服务器接受.</td></tr><tr><td align="center"><strong>实时性</strong></td><td>Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。</td></tr><tr><td align="center"><strong>独立性</strong></td><td>各个Client之间互不干预</td></tr><tr><td align="center"><strong>原子性</strong></td><td>更新只能成功或者失败，没有中间状态。</td></tr><tr><td align="center"><strong>顺序性</strong></td><td>所有Server，同一消息发布顺序一致。</td></tr></tbody></table><h3 id="4、安装部署："><a href="#4、安装部署：" class="headerlink" title="4、安装部署："></a>4、安装部署：</h3><p><a href="https://zookeeper.apache.org/">官网：</a></p><p><a href="https://archive.apache.org/dist/zookeeper/">下载：</a></p><p>（1）<code>修改</code>配置文件：</p><p>在Zokeeper的安装目录中的conf目录下，将zoo_sample.cfg文件改名为zoo.cfg</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">mv zoo_sample.cfg zoo.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><code>编辑：</code></p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">vim /usr/soft/zookeeper-3.4.13/conf/zoo.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#发送心跳的间隔时间，单位：毫秒 ; 2秒</span><span class="token attr-name">tickTime</span><span class="token punctuation">=</span><span class="token attr-value">2000  </span><span class="token attr-name">dataDir</span><span class="token punctuation">=</span><span class="token attr-value">/usr/soft/zookeeper-3.4.13/data</span><span class="token attr-name">dataLogDir</span><span class="token punctuation">=</span><span class="token attr-value">/usr/soft/zookeeper-3.4.13/logs</span><span class="token comment" spellcheck="true">#客户端连接 Zookeeper 服务器的端口，</span><span class="token attr-name">clientPort</span><span class="token punctuation">=</span><span class="token attr-value">2181    </span><span class="token comment" spellcheck="true">#Zookeeper 会监听这个端口，接受客户端的访问请求。</span><span class="token attr-name">initLimit</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token attr-name">syncLimit</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span class="token attr-name">server.1</span><span class="token punctuation">=</span><span class="token attr-value">node1:2888:3888</span><span class="token attr-name">server.2</span><span class="token punctuation">=</span><span class="token attr-value">node2:2888:3888</span><span class="token attr-name">server.3</span><span class="token punctuation">=</span><span class="token attr-value">node3:2888:3888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：千万不要有多余的空格：</p><blockquote><p>由于在配置server.3=node3:2888:3888 这个参数时后面由于打字习惯多敲了一个空格，于是启动报错：Address unresolved: node3:3888 </p></blockquote><p><code>配置解释:</code></p><blockquote><p><code>initLimit</code>： 这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 5 个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 5*2000=10 秒</p><p>syncLimit：这个配置项标识 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的心跳时间长度，总的时间长度就是 2*2000=4 秒</p><p>server.A=B：C：D：其 中 A 是一个数字，表示这个是第几号服务器；B 是这个服务器的 ip 地址；C 表示的是这个服务器与集群中的 Leader 服务器交换信息的端口；D 表示的是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同的端口号</p></blockquote><p>(2)<strong>创建myid文件</strong>（在上面配置文件中配置dataDir  的目录下）</p><pre><code>server1机器的内容为：1，server2机器的内容为：2，server3机器的内容为：3</code></pre><p>（3）将zookeeper包发到各个节点上</p><h1 id="Paxo算法"><a href="#Paxo算法" class="headerlink" title="Paxo算法"></a>Paxo算法</h1><p><a href="http://zh.wikipedia.org/zh-cn/Paxos">官网</a></p><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p>一种基于消息传递且具有高度容错特性的一致性算法，广泛应用于分布式计算中，是到目前为止唯一的分布式一致性算法。</p><p><code>前提：</code></p><p>Paxos 有一个前提：没有拜占庭将军问题。就是说 Paxos只有在一个可信的计算环境中才能成立，这个环境是不会被入侵所破坏的。</p><h2 id="2、结合故事的对应理解"><a href="#2、结合故事的对应理解" class="headerlink" title="2、结合故事的对应理解"></a>2、结合故事的对应理解</h2><blockquote><p>小岛(Island)——ZK Server Cluster<br>议员(Senator)——ZK Server<br>提议(Proposal)——ZNode Change(Create/Delete/SetData…)<br>提议编号(PID)——Zxid(ZooKeeper Transaction Id)<br>正式法令——所有 ZNode 及其数据</p><p>总统——ZK Server Leader</p></blockquote><h1 id="zookeeper的节点及工作原理"><a href="#zookeeper的节点及工作原理" class="headerlink" title="zookeeper的节点及工作原理"></a>zookeeper的节点及工作原理</h1><h2 id="1、工作原理"><a href="#1、工作原理" class="headerlink" title="1、工作原理"></a>1、<strong>工作原理</strong></h2><blockquote><p>1.每个Server在内存中存储了一份数据；</p><p>2.Zookeeper启动时，将从实例中选举一个leader（Paxos协议）</p><p>3.Leader负责处理数据更新等操作</p><p>4.一个更新操作成功，当且仅当大多数Server在内存中成功修改数据。</p></blockquote><p>Zookeeper的核心是<strong>原子广播</strong>，这个机制保证了各个server之间的同步。实现这个机制的协议叫做<strong>Zab协议</strong>。</p><p>Zab协议有两种模式，它们分别是<strong>恢复模式</strong>和<strong>广播模式</strong>。</p><blockquote><p>当服务启动或者在领导者崩溃后，Zab就进入了<strong>恢复模式</strong>，当领导者被选举出来，且大多数server的完成了和leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和server具有相同的系统状态。一旦leader已经和多数的follower进行了状态同步后，他就可以开始广播消息了，即进入<strong>广播状态</strong>。这时候当一个server加入zookeeper服务中，它会在恢复模式下启动，发现leader，并和leader进行状态同步。待到同步结束，它也参与消息广播。Zookeeper服务一直维持在Broadcast状态，直到leader崩溃了或者leader失去了大部分的followers支持.</p><p>广播模式需要保证proposal被按顺序处理，因此zk采用了**递增的事务id号(zxid)**来保证。所有的提议(proposal)都在被提出的时候加上了zxid。实现中zxid是一个64位的数字，它高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch。低32位是个递增计数。</p><p>当leader崩溃或者leader失去大多数的follower，这时候zk进入恢复模式，恢复模式需要重新选举出一个新的leader，让所有的server都恢复到一个正确的状态。</p></blockquote><h2 id="2、Znode节点"><a href="#2、Znode节点" class="headerlink" title="2、Znode节点"></a>2、Znode节点</h2><p>（1）Znode有两种类型，<strong>短暂的（ephemeral）和持久的（persistent）</strong></p><p> Znode的类型在创建时确定并且之后不能再修改。</p><ul><li><p>短暂znode的客户端会话结束时，zookeeper会将该短暂znode删除，<strong>短暂znode不可以有子节点</strong></p></li><li><p>持久znode不依赖于客户端会话，只有当客户端明确要删除该持久znode时才会被删除</p></li></ul><p>（2）Znode有四种形式的目录节点</p><ul><li><p>PERSISTENT、持久的</p></li><li><p>EPHEMERAL、短暂的</p></li><li><p>PERSISTENT_SEQUENTIAL、持久且有序的</p></li><li><p>EPHEMERAL_SEQUENTIAL   短暂且有序的</p></li></ul><h2 id="3、shell操作"><a href="#3、shell操作" class="headerlink" title="3、shell操作"></a>3、shell操作</h2><p>启动服务端：</p><pre class="line-numbers language-shell"><code class="language-shell">./zkServer.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>停止服务：</p><pre class="line-numbers language-shell"><code class="language-shell">./zkServer.sh stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动客户端：</p><pre class="line-numbers language-shell"><code class="language-shell">./zkCli.sh -server 127.0.0.1 : 2081<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​                                             （localhost | node01）</p><p>​                                             （也可连接其他节点）</p><p>​                      (port默认2081,可省；ip也可省)</p><p>退出客户端：</p><pre class="line-numbers language-shell"><code class="language-shell">quit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>操作指南：</p><pre class="line-numbers language-shell"><code class="language-shell">help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看根目录：</p><pre class="line-numbers language-shell"><code class="language-shell">ll /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​     （ll  +路径） </p><p>获取具体服务内容：</p><pre class="line-numbers language-shell"><code class="language-shell">get /(get +路径+服务)可查看注册zookeeper服务的节点信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（如果作为leader的namenode挂了，最新文件会相应的更换数据信息，如果没有nn，那么就没有相应的最新文件，只会有记录上一个阶段数据的文件）</p><p>创建服务：</p><pre><code>create /sun aabbcc</code></pre><p>​               (create +路径 + 数据内容) </p><p>在其他节点也可启动客户端，创建服务</p><p>删除服务：</p><pre class="line-numbers language-shell"><code class="language-shell">rmr /sun<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g18fy424pbj30fd091wg3.jpg"></p><h2 id="4、API操作"><a href="#4、API操作" class="headerlink" title="4、API操作"></a>4、API操作</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzdcgvx18uj30fe0akwie.jpg"></p><p><code>见代码testzookeeper</code></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>Zookeeper 作为 Hadoop 项目中的一个子项目，是Hadoop 集群管理的一个必不可少的模块，它<strong>主要用来控制集群中的数据</strong>，如它管理 Hadoop 集群中的NameNode，还有 Hbase 中 Master、 Server 之间状态同步等。</p><p>​    Zoopkeeper 提供了一套很好的分布式集群管理的机制，就是它这种基于层次型的目录树的数据结构，并对树中的节点进行有效管理，从而可以设计出多种多样的分布式的数据管理模型。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YARN的入门学习</title>
      <link href="/2019/01/04/Yarn%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/04/Yarn%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="yarn（资源管理器）"><a href="#yarn（资源管理器）" class="headerlink" title="yarn（资源管理器）"></a>yarn（资源管理器）</h2><h3 id="（1）存在背景："><a href="#（1）存在背景：" class="headerlink" title="（1）存在背景："></a>（1）存在背景：</h3><p>MR1.0存在缺陷：</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzczt4wiysj30x90ftq5v.jpg"></p><ul><li>单点故障：</li></ul><p>仅有一个JobTracker负责整个作业的调度、管理、监控、资源调度</p><p>（一个作业拿到后会分解多个任务去执行mapduce，JobTracker把任务分配给TaskTracker来具体负责执行相关map或reduce任务）</p><ul><li>JobTracker‘大包大揽’，管理事项过多</li></ul><p>（上限4000个节点）</p><ul><li><p>容易出现内存溢出</p></li><li><p>资源划分不合理</p><p>（强行划分slot，map资源和reduce资源不能互用，导致忙的忙死，闲的闲死）</p></li></ul><pre><code>既是一个计算框架，也是一个资源管理框架</code></pre><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzczujcfrmj30n50ee75d.jpg"></p><h3 id="（2）yarn产生"><a href="#（2）yarn产生" class="headerlink" title="（2）yarn产生"></a>（2）yarn产生</h3><ul><li>对JobTracker进行功能分解，将资源管理功能分给ResourceManager，将任务调度和任务监控分给ApplicationMaster，将TaskTracker的任务交给NodeManager</li></ul><pre><code>纯粹的资源管理框架被剥离资源管理调度功能的MapReduce就变成了MR2.0，他就是一个运行在YARN上的一个纯粹的计算框架，由YARN为其提供资源管理调度服务</code></pre><p><code>什么叫纯粹的计算框架？？</code></p><p>它提供一些计算基类，使用时，编写map类和reduce类的子类，去继承它。然后计算框架去做后台自动分片，shuffle过程。</p><p><code>资源管理框架？？</code></p><p>它专门管理CPU内存资源的分配</p><h1 id="二、YARN设计思路"><a href="#二、YARN设计思路" class="headerlink" title="二、YARN设计思路"></a>二、YARN设计思路</h1><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzczzrit8qj30wm0e6wie.jpg"></p><p>YARN资源管理，任务调度流程：</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g18ecu679nj30cj088jso.jpg"></p><p>流程大致如下：</p><p>·         client客户端向yarn集群(resourcemanager)提交任务</p><p>·         resourcemanager选择一个node创建appmaster</p><p>·         appmaster根据任务向rm申请资源</p><p>·         rm返回资源申请的结果</p><p>·         appmaster去对应的node上创建任务需要的资源（container形式，包括内存和CPU）</p><p>·         appmaster负责与nodemanager进行沟通，监控任务运行</p><p>·         最后任务运行成功，汇总结果。</p><p>其中Resourcemanager里面一个很重要的东西，就是调度器Scheduler，调度规则可以使用官方提供的，也可以自定义。</p><h1 id="三、YARN体系结构"><a href="#三、YARN体系结构" class="headerlink" title="三、YARN体系结构"></a>三、YARN体系结构</h1><p>三大核心：</p><h2 id="1、RecourceManager（RM）"><a href="#1、RecourceManager（RM）" class="headerlink" title="1、RecourceManager（RM）"></a>1、RecourceManager（RM）</h2><blockquote><ul><li><p>ResourceManager（RM）是一个全局的资源管理器，负责整个系统的资源管理和分配，主<br>要包括两个组件，即调度器（Scheduler）和应用程序管理器（Applications Manager）</p></li><li><p>调度器接收来自ApplicationMaster的应用程序资源请求，把集群中的资源以“容器”的形式<br>分配给提出申请的应用程序，容器的选择通常会考虑应用程序所要处理的数据的位置，进行<br>就近选择，从而实现“计算向数据靠拢”</p></li><li><p>容器（Container）作为动态资源分配单位，每个容器中都封装了一定数量的CPU、内存、<br>磁盘等资源，从而限定每个应用程序可以使用的资源量</p></li><li><p>调度器被设计成是一个可插拔的组件，YARN不仅自身提供了许多种直接可用的调度器，也<br>允许用户根据自己的需求重新设计调度器</p></li><li><p>应用程序管理器（Applications Manager）负责系统中所有应用程序的管理工作，主要包括<br>应用程序提交、与调度器协商资源以启动ApplicationMaster、监控ApplicationMaster运行状<br>态并在失败时重新启动等</p></li></ul></blockquote><h2 id="2、ApplicationMaster"><a href="#2、ApplicationMaster" class="headerlink" title="2、ApplicationMaster"></a>2、ApplicationMaster</h2><blockquote><p>ResourceManager接收用户提交的作业，按照作业的上下文信息以及从NodeManager收集<br>来的容器状态信息，启动调度过程，为用户作业启动一个ApplicationMaster<br>ApplicationMaster的主要功能是：<br>（1）当用户作业提交时，ApplicationMaster与ResourceManager协商获取资源，<br>ResourceManager会以容器的形式为ApplicationMaster分配资源；</p><p>（2）把获得的资源进一步分配给内部的各个任务（Map任务或Reduce任务），实现资源<br>的“二次分配”；</p><p>（3）与NodeManager保持交互通信进行应用程序的启动、运行、监控和停止，监控申请<br>到的资源的使用情况，对所有任务的执行进度和状态进行监控，并在任务发生失败时执行<br>失败恢复（即重新申请资源重启任务）；</p><p>（4）定时向ResourceManager发送“心跳”消息，报告资源的使用情况和应用的进度信<br>息；</p><p>（5）当作业完成时，ApplicationMaster向ResourceManager注销容器，执行周期完成。</p></blockquote><h2 id="3、NodeManager"><a href="#3、NodeManager" class="headerlink" title="3、NodeManager"></a>3、NodeManager</h2><blockquote><p>NodeManager是驻留在一个YARN集群中的每个节点上的代理，有所需数据的节点，主要负责：</p><ul><li><p>容器生命周期管理</p></li><li><p>监控每个容器的资源（CPU、内存等）使用情况</p></li><li><p>跟踪节点健康状况</p></li><li><p>以“心跳”的方式与ResourceManager保持通信</p></li><li><p>向ResourceManager汇报作业的资源使用情况和每个容器的运行状态</p></li><li><p>接收来自ApplicationMaster的启动/停止容器的各种请求</p></li></ul><p>需要说明的是，NodeManager主要负责管理抽象的容器，只处理与容器相关的事<br>情，而不具体负责每个任务（Map任务或Reduce任务）自身状态的管理，因为这<br>些管理工作是由ApplicationMaster完成的，ApplicationMaster会通过不断与<br>NodeManager通信来掌握各个任务的执行状态</p></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzd1ueqsbmj30xm0fjwgg.jpg"></p><h1 id="四、YARN-工作流程"><a href="#四、YARN-工作流程" class="headerlink" title="四、YARN 工作流程"></a>四、YARN 工作流程</h1><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzd1x7ksg6j30yl0fqjxh.jpg"></p><h1 id="五、YARN框架与MapReduce1-0框架"><a href="#五、YARN框架与MapReduce1-0框架" class="headerlink" title="五、YARN框架与MapReduce1.0框架"></a>五、YARN框架与MapReduce1.0框架</h1><h2 id="1、对比分析"><a href="#1、对比分析" class="headerlink" title="1、对比分析"></a>1、对比分析</h2><blockquote><ul><li>从MapReduce1.0框架发展到YARN框架，客户端并没有发生变化，其大部分调用API及<br>接口都保持兼容，因此，原来针对Hadoop1.0开发的代码不用做大的改动，就可以直接放<br>到Hadoop2.0平台上运行</li></ul></blockquote><blockquote><ul><li><p>总体而言，YARN相对于MapReduce1.0来说具有以下优势：</p><p>大大减少了承担中心服务功能的ResourceManager的资源消耗</p><ul><li>ApplicationMaster来完成需要大量资源消耗的任务调度和监控</li><li>多个作业对应多个ApplicationMaster，实现了监控分布化</li></ul></li></ul></blockquote><blockquote><ul><li>MapReduce1.0既是一个计算框架，又是一个资源管理调度框架，但是，只能支持<br>MapReduce编程模型。而YARN则是一个纯粹的资源调度管理框架，在它上面可以运行包<br>括MapReduce在内的不同类型的计算框架，只要编程实现相应的ApplicationMaster</li></ul></blockquote><blockquote><ul><li>YARN中的资源管理比MapReduce1.0更加高效<ul><li>以容器为单位，而不是以slot为单位</li></ul></li></ul></blockquote><h2 id="2、-MapReduce-On-YARN：MRv2"><a href="#2、-MapReduce-On-YARN：MRv2" class="headerlink" title="2、 MapReduce On YARN：MRv2"></a>2、 MapReduce On YARN：MRv2</h2><ul><li><p>将MapReduce作业直接运行在YARN上，而不是由JobTracker和TaskTracker构建的MRv1系统中</p></li><li><p>基本功能模块</p></li></ul><p>​    YARN：负责资源管理和调度</p><p>​    MRAppMaster：负责任务切分、任务调度、任务监控和容错等</p><p>​    MapTask/ReduceTask：任务驱动引擎，与MRv1一致</p><ul><li>每个MapRduce作业对应一个MRAppMaster任务调度</li></ul><p>​    YARN将资源分配给MRAppMaster</p><p>​    MRAppMaster进一步将资源分配给内部的任务</p><ul><li>MRAppMaster容错</li></ul><p>​    失败后，由YARN重新启动</p><p>​    任务失败后，MRAppMaster重新申请资源</p><h1 id="六、YARN-的发展目标"><a href="#六、YARN-的发展目标" class="headerlink" title="六、YARN 的发展目标"></a>六、YARN 的发展目标</h1><p><strong>YARN 的目标就是实现“一个集群多个框架”？ ，为什么？</strong></p><ul><li><p>一个企业当中同时存在各种不同的业务应用场景，需要采用不同的计算框架</p><ul><li><p>MapReduce实现离线批处理</p></li><li><p>使用Impala实现实时交互式查询分析</p></li><li><p>使用Storm实现流式数据实时分析</p></li><li><p>使用Spark实现迭代计算</p></li></ul></li></ul><ul><li><p>这些产品通常来自不同的开发团队，具有各自的资源调度管理机制</p></li><li><p>为了避免不同类型应用之间互相干扰，企业就需要把内部的服务器拆分成多个集群，分<br>别安装运行不同的计算框架，即“一个框架一个集群”</p></li></ul><ul><li><p>导致问题</p><ul><li><p>集群资源利用率低</p></li><li><p>数据无法共享</p></li><li><p>维护代价高</p></li></ul></li></ul><ul><li><p>YARN的目标就是实现“一个集群多个框架”，即在一个集群上部署一个统一的资源<br>调度管理框架YARN，在YARN之上可以部署其他各种计算框架</p></li><li><p>由YARN为这些计算框架提供统一的资源调度管理服务，并且能够根据各种计算框架<br>的负载需求，调整各自占用的资源，实现集群资源共享和资源弹性收缩</p></li><li><p>可以实现一个集群上的不同应用负载混搭，有效提高了集群的利用率</p></li><li><p>不同计算框架可以共享底层存储，避免了数据集跨集群移动</p></li></ul><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fzd5qv2p73j30r808tdgv.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop2.X</title>
      <link href="/2019/01/03/Hadoop2.X/"/>
      <url>/2019/01/03/Hadoop2.X/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Hadoop-2-x产生背景"><a href="#一、Hadoop-2-x产生背景" class="headerlink" title="一、Hadoop 2.x产生背景"></a>一、Hadoop 2.x产生背景</h2><h3 id="1、Hadoop-1-0存在的问题"><a href="#1、Hadoop-1-0存在的问题" class="headerlink" title="1、Hadoop 1.0存在的问题"></a>1、Hadoop 1.0存在的问题</h3><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g18dlu5j8uj30fe08mq6t.jpg"></p><h4 id="（1）HDFS存在的问题"><a href="#（1）HDFS存在的问题" class="headerlink" title="（1）HDFS存在的问题"></a>（1）HDFS存在的问题</h4><ul><li>NameNode单点故障，难以应用于在线场景</li><li>NameNode（一个）压力过大，内存受限，影响系统扩展性</li></ul><h4 id="（2）MapReduce存在的问题"><a href="#（2）MapReduce存在的问题" class="headerlink" title="（2）MapReduce存在的问题"></a>（2）MapReduce存在的问题</h4><ul><li>JobTracker访问压力大，影响系统扩展性</li><li>难以支持MapReduce以外的计算框架，比如Spark、Storm</li></ul><h3 id="2、Hadoop-2-0分支"><a href="#2、Hadoop-2-0分支" class="headerlink" title="2、Hadoop 2.0分支"></a>2、Hadoop 2.0分支</h3><p>包括：</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g18dmrv448j30ft05i76r.jpg"></p><p>1、HDFS：分布式文件存储系统</p><p>2、MapReduce：计算框架</p><p>3、YARN：资源管理系统</p><h3 id="3、特点"><a href="#3、特点" class="headerlink" title="3、特点"></a>3、特点</h3><p> 1）. 解决单点故障：HDFS HA（高可用）</p><blockquote><p>  通过主备NameNode解决，如果主NameNode发生故障，就切换到备NameNode上   |</p></blockquote><p> 2).解决内存受限问题：HDFS Federation（联邦制）、HA</p><blockquote><p> HA：两个NameNode<br> (3.0就实现了一组多从：水平扩展，支持多个NameNode；每个NameNode分管一部分目录；所有NameNode共享所有DataNode资源)</p></blockquote><p> 3).仅架构上发生变化使用方式不变</p><h2 id="二、HDFS-HA-联邦-结构及功能"><a href="#二、HDFS-HA-联邦-结构及功能" class="headerlink" title="二、HDFS HA(联邦)结构及功能"></a>二、HDFS HA(联邦)结构及功能</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g18dn0946qj30hp09rdjp.jpg"></p><h3 id="HA"><a href="#HA" class="headerlink" title="HA"></a>HA</h3><p>DN：DataNode（数据节点）</p><blockquote><p>存放数据block块；遵循心跳机制向NN Active和NN Standby汇报block块信息，但只执行active的命令         </p></blockquote><p>主备NN：NameNode Active 和 NameNode Standby （主备名称节点）</p><blockquote><p>主NN对外提供读写服务，备NN同步主NN元数据，以待切换，所有的DN同时向两个NN汇报数据块信息</p><p>元数据信息加载到主NN，并写入JN（至少写两台：过半原则）；</p><p>备NN可以从JN中同步元数据信息；</p><p>解决单点故障；</p><p>———两种切换方式：</p><p>手动：通过命令实现主备切换</p><pre class="line-numbers language-shell"><code class="language-shell">hdfs haadmin -transitionToActive nn2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​           这时nn1如果还存活则变成不可写状态，需要重启，重启后自动成为standby nn</p><p>自动：基于Zookeeper实现（详情见搭建步骤）</p></blockquote><p>JN：JournalNode（至少3台）</p><blockquote><p>存储主NN元数据信息，实现主备NN间数据共享；</p><p>（遵循过半原则：至少有过半的数量参与投票）</p></blockquote><p>ZKFC：FailoverController（竞争锁）</p><blockquote><p>谁拿到了这个所，谁就是active NN</p><p>心跳机制监控主备NN状态，一旦出现一台挂机，就会释放锁，另一个NN就会立即启动竞争锁，成为active NN</p></blockquote><p>ZK：Zookeeper（至少3台）</p><blockquote><p>（实现主备NN切换）</p></blockquote><h3 id="联邦"><a href="#联邦" class="headerlink" title="联邦"></a>联邦</h3><blockquote><p>通过多个namenode/namespace把元数据的存储和管理分散到多个节点中，使到namenode/namespace可以通过增加机器来进行水平扩展</p></blockquote><blockquote><p>通过多个namespace来隔离不同类型的应用，把不同类型应用的HDFS元数据的存储和管理分派到不同的namenode中。</p></blockquote><h2 id="三、-！！YARN-资源管理-！！"><a href="#三、-！！YARN-资源管理-！！" class="headerlink" title="三、==！！YARN(资源管理)！！=="></a>三、==！！YARN(资源管理)！！==</h2><p><code>详见Yarn学习.md</code></p><p>1、核心思想：ResourceManager（资源管理）+ApplicationMaster（任务调度）</p><p>2、yarn的引入使得多个计算框架可以应用到一个集群中</p><p>ResourceManager：  负责整个集群的资源管理和`调度。</p><p>ApplicationMaster：  负责应用程序相关的事务，比如任务调度、任务监控和容错等。</p><p>​                                      每个应用程序对应一个ApplicationMaster（应用程序控制-主人）</p><p>  目前多个计算框架可以运行在YARN上，比如MapReduce、Spark、Storm等。</p><h2 id="四、-！！Zookeeper工作原理！！"><a href="#四、-！！Zookeeper工作原理！！" class="headerlink" title="四、==！！Zookeeper工作原理！！=="></a>四、==！！Zookeeper工作原理！！==</h2><p><code>详见Zookeeper学习.md</code></p><h2 id="五、Hadoop2-X-集群搭建"><a href="#五、Hadoop2-X-集群搭建" class="headerlink" title="五、Hadoop2.X 集群搭建"></a>五、Hadoop2.X 集群搭建</h2><h3 id="1、linux环境下搭建"><a href="#1、linux环境下搭建" class="headerlink" title="1、linux环境下搭建"></a>1、linux环境下搭建</h3><table><thead><tr><th></th><th align="center">NN</th><th align="center">DN</th><th align="center">JN</th><th align="center">ZKFC</th><th align="center">ZK</th><th align="center">RM</th><th align="center">NM</th></tr></thead><tbody><tr><td>node1</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center">√</td></tr><tr><td>node2</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td>node3</td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center"></td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><p>Zookeeper Failover Controller：</p><blockquote><p> <code>Failover</code> ：失效备援（为系统备援能力的一种，当系统中其中一项设备失效而无法运作时，另一项设备即可自动接手原失效系统所执行的工作）</p></blockquote><p>监控NameNode健康状态，并向Zookeeper注册NameNode，NameNode挂掉后，ZKFC为NameNode竞争锁，获得ZKFC锁的NameNode变为active。</p><h4 id="0-gt-在搭建环境之前的准备"><a href="#0-gt-在搭建环境之前的准备" class="headerlink" title="0&gt;在搭建环境之前的准备"></a>0&gt;在搭建环境之前的准备</h4><p>三台虚拟机：</p><pre><code>关闭防火墙安装jdk编辑/etc/hosts/给各个节点服务器起别名时间服务器：ntpdate     安装：yum install ntpdate -y     生成：ntpdate cn.ntp.org.cn免密登录环境准备</code></pre><p>在hadoop安装目录下hadoop-2.6.5/etc/hadoop/</p><h4 id="1-gt-编辑hadoop-env-sh"><a href="#1-gt-编辑hadoop-env-sh" class="headerlink" title="1&gt;编辑hadoop-env.sh"></a>1&gt;编辑hadoop-env.sh</h4><pre class="line-numbers language-xml"><code class="language-xml">export JAVA_HOME=/usr/soft/jdk1.8.0_191<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-gt-编辑core-site-xml"><a href="#2-gt-编辑core-site-xml" class="headerlink" title="2&gt;编辑core-site.xml"></a>2&gt;编辑core-site.xml</h4><p><code>注意：</code></p><blockquote><p>fs.defaultFS 默认的服务端口是 NameNode URI</p><p>hadoop.tmp.dir是hadoop文件系统依赖的基础配置，很多路径都依赖它。如果在hdfs-site.xml中没有配置namenode 和datanode的存放位置，默认及存放在这个路径中。</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://Sukie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置集群的名字--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ha.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node1:2181,node2:2181,node3:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置zookeeper：三个节点--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--配置hadoop基础配置存放的路径--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-gt-编辑hdfs-site-xml"><a href="#3-gt-编辑hdfs-site-xml" class="headerlink" title="3&gt;编辑hdfs-site.xml"></a>3&gt;编辑hdfs-site.xml</h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.nameservices<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>Sukie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.namenodes.Sukie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>nn1,nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.Sukie.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node1:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.Sukie.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node2:8020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.Sukie.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node1:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.Sukie.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node2:50070<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 指定namenode元数据存储在journalnode中的路径 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.shared.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>qjournal://node1:8485;node2:8485;node3:8485/Sukie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 指定HDFS客户端连接active namenode的java类 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.client.failover.proxy.provider.Sukie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 配置隔离机制为ssh 防止脑裂：保证activeNN仅有一台--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.methods<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>sshfence<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 指定秘钥的位置 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.ssh.private-key-files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/.ssh/id_dsa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--免密登录是生成的文件，有的是id_rsa，配置错误会影响NN的主从切换--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 指定journalnode日志文件存储的路径 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.journalnode.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 开启自动故障转移 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.automatic-failover.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-gt-配置hadoop中的slaves"><a href="#4-gt-配置hadoop中的slaves" class="headerlink" title="4&gt;配置hadoop中的slaves"></a>4&gt;配置hadoop中的slaves</h4><p>（主从架构：datanode）</p><pre class="line-numbers language-txt"><code class="language-txt">node1node2node3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-gt-准备zookeeper"><a href="#5-gt-准备zookeeper" class="headerlink" title="5&gt;准备zookeeper"></a>5&gt;准备zookeeper</h4><ul><li><p>三台zookeeper：node1，node2，node3</p></li><li><p>编辑zookeeper-3.4.13/conf/zoo.cfg</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">tickTime</span><span class="token punctuation">=</span><span class="token attr-value">2000</span><span class="token attr-name">initLimit</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span class="token attr-name">syncLimit</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token attr-name">dataDir</span><span class="token punctuation">=</span><span class="token attr-value">/root/usr/zookeeper-3.5.7/data</span><span class="token attr-name">dataLogDir</span><span class="token punctuation">=</span><span class="token attr-value">/root/usr/zookeeper-3.5.7/logs</span><span class="token attr-name">clientPort</span><span class="token punctuation">=</span><span class="token attr-value">2181</span><span class="token comment" spellcheck="true">#用于投票选举</span><span class="token attr-name">server.1</span><span class="token punctuation">=</span><span class="token attr-value">node1:2888:3888</span><span class="token attr-name">server.2</span><span class="token punctuation">=</span><span class="token attr-value">node2:2888:3888</span><span class="token attr-name">server.3</span><span class="token punctuation">=</span><span class="token attr-value">node3:2888:3888 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在dataDir目录中创建文件myid，三台节点的文件内容分别为1，2，3</p></li></ul><h4 id="6-gt-配置环境变量"><a href="#6-gt-配置环境变量" class="headerlink" title="6&gt;配置环境变量"></a>6&gt;配置环境变量</h4><pre class="line-numbers language-shell"><code class="language-shell">vim ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑内容：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">JAVA_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/soft/jdk1.8.0_191</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$JAVA_HOME/bin</span><span class="token attr-name">HADOOP_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/soft/hadoop-2.6.5</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><span class="token attr-name">ZOOKEEPER_HOME</span><span class="token punctuation">=</span><span class="token attr-value">/usr/soft/zookeeper-3.4.13</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$ZOOKEEPER_HOME/bin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><pre class="line-numbers language-shell"><code class="language-shell">source ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使其成为资源文件，发送到其他节点后，也需要此操作</p></blockquote><h4 id="7-gt-将以上配置文件远程发送至其他节点服务器"><a href="#7-gt-将以上配置文件远程发送至其他节点服务器" class="headerlink" title="7&gt;将以上配置文件远程发送至其他节点服务器"></a>7&gt;将以上配置文件远程发送至其他节点服务器</h4><blockquote><pre class="line-numbers language-shell"><code class="language-shell">scp -r filename nodename:`pwd`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="8-gt-命令操作："><a href="#8-gt-命令操作：" class="headerlink" title="8&gt;命令操作："></a>8&gt;命令操作：</h4><pre><code>1. 启动三个zookeeper：./zkServer.sh start2. 启动三个JournalNode：./hadoop-daemon.sh start journalnode3. （生成fsimage文件）在其中一个namenode上格式化：    hdfs namenode -format4. 把刚刚格式化之后的元数据拷贝到另外一个namenode上   a)    启动刚刚格式化的namenode :         hadoop-daemon.sh start namenode   b)    （同步fsimage文件）在另一个（没有格式化的）namenode上执行：        hdfs namenode -bootstrapStandby   c)    启动没格式化的namenode：           hadoop-daemon.sh start namenode5. （初始化竞争锁zookeeper）在其中一个namenode上初始化zkfc：    hdfs zkfc -formatZK6. 停止上面节点：    stop-dfs.sh7. 全面启动（三个节点）：    start-dfs.sh8. 启动yarn资源管理器   yarn-daemon.sh start resourcemanager    (yarn resourcemanager  )</code></pre><h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><p>（启动步骤）</p><pre><code>(1)关闭防火墙：service iptables stop        （3台）(2)启动zookeeper:zkServer.sh start          （3台）(3)启动集群：start-dfs.sh |（start-all.sh   :  同时启动hdfs和yarn 的nodemanager)(4)启动yarn：yarn-daemon.sh start resourcemanager （2台）</code></pre><p>（关闭步骤）</p><pre><code>(1)关闭yarn：yarn-daemon.sh stop resourcemanager  （开几台关几台）(2)关闭集群：stop-dfs.sh   |（stop-all.sh    :同时关闭hdfs和yarn） （3台）(3)关闭zookeeper：zkServer.sh stop                 （3台）</code></pre><pre><code>有可能会出错的地方1，    确认每台机器防火墙均关掉2，    确认每台机器的时间是一致的3，    确认配置文件无误，并且确认每台机器上面的配置文件一样4，    如果还有问题想重新格式化，那么先把所有节点的进程关掉5，    删除之前格式化的数据目录hadoop.tmp.dir属性对应的目录，所有节点同步都删掉，别单删掉之前的一个，删掉三台JN节点中dfs.journalnode.edits.dir属性所对应的目录6，    接上面的第6步又可以重新格式化已经启动了7，    最终Active Namenode停掉的时候，StandBy可以自动接管！</code></pre><h3 id="3、关于脑裂"><a href="#3、关于脑裂" class="headerlink" title="3、关于脑裂"></a>3、关于脑裂</h3><p><a href="http://en.wikipedia.org/wiki/Split-brain_(computing)">脑裂（brain-split）</a></p><p>1&gt;定义：</p><p>是指在主备切换时，由于切换不彻底或其他原因，导致客户端和slave误以为出现两个active master，最终使得整个集群处于混乱状态。</p><p>2&gt;解决脑裂问题：</p><p>通常采用<a href="http://en.wikipedia.org/wiki/Fencing_(computing)">隔离(Fencing)</a>机制</p><p>包括三个方面：</p><ul><li><p>共享fencing ： 确保只有一个Master 往共享存储中写数据；</p></li><li><p>客户端fencing ：确保只有一个Master可以响应客户端的请求；</p></li><li><p>Slave fencing ： 确保只有一个Master可以向Slave下发命令</p></li></ul><blockquote><p>​      Hadoop公共库中对外提供了两种fenching实现，分别是sshfence和shellfence（缺省实现），其中sshfence是指通过ssh登陆目标Master节点上，使用命令fuser将进程杀死（通过tcp端口号定位进程pid，该方法比jps命令更准确），shellfence是指执行一个用户事先定义的shell命令（脚本）完成隔离。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS学习</title>
      <link href="/2019/01/03/HDFS%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/01/03/HDFS%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>== hadoop理解==</p><p>狭义：</p><p>hadoop1 = hdfs1 + MR1</p><p>hadoop2 = hdfs2 + MR2 + YARN</p><p>广义：</p><p>Hadoop生态</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g16vvlbzawj30ex09nq6e.jpg"></p><p>用于解决海量数据的处理和数据存储，数据级别为GB，TB，PB。</p><h2 id="一、分布式文件存储系统HDFS"><a href="#一、分布式文件存储系统HDFS" class="headerlink" title="一、分布式文件存储系统HDFS"></a>一、分布式文件存储系统HDFS</h2><h3 id="1、什么是分布式？"><a href="#1、什么是分布式？" class="headerlink" title="1、什么是分布式？"></a>1、什么是分布式？</h3><blockquote><p>定义：将海量的数据，复杂的业务分发到不同的计算机节点和服务器上分开处理和计算。</p><p>特点：</p><ul><li>多副本，提高服务的容错率、安全性、高可靠性</li><li>适合批处理，提高服务的效率和速度，</li><li>减轻单台服务器的压力</li><li>具有很好的可扩展性</li><li>计算向数据靠拢，安全，高效</li></ul></blockquote><p><code>大数据三驾马车：GFS、MapReduce、Bigtable</code>====HDFS、MR、HBASE</p><h3 id="2、什么是HDFS？"><a href="#2、什么是HDFS？" class="headerlink" title="2、什么是HDFS？"></a>2、什么是HDFS？</h3><h4 id="（1）HDFS为什么会出现？"><a href="#（1）HDFS为什么会出现？" class="headerlink" title="（1）HDFS为什么会出现？"></a>（1）HDFS为什么会出现？</h4><blockquote><p>主要解决大量【pb级以上】的大数据的分布式存储问题</p></blockquote><h4 id="（2）-HDFS的特点"><a href="#（2）-HDFS的特点" class="headerlink" title="（2）==HDFS的特点=="></a>（2）==HDFS的特点==</h4><blockquote><p>$$ 分布式特性：</p><ul><li>适合大数据处理：GB、TB、PB以上的数据</li><li>百万规模以上的文件数量:10K+ 节点</li><li>适合批处理：移动计算而非数据(MR),数据位置暴露给计算框架</li></ul><p>$$ 自身特性：</p><ul><li>可构建在廉价机器上</li><li>高可靠性：通过多副本实现</li><li>高容错性：数据自动保存多个副本；副本丢失后，自动恢复,提供了恢复机制</li></ul><p>$$ 缺点：</p><p>—–低延迟高数据吞吐访问问题（不适合低延迟数据访问，Hbase适合）</p><ul><li>不支持毫秒级</li><li>吞吐量大但有限制于其延迟（瓶颈：低延迟无法突破）</li></ul><p>—–小文件存取占用NameNode大量内存(寻道时间超过读取时间,约占99%)</p><p>——-不支持多用户写入及任意修改文件</p><ul><li>不支持文件修改：一个文件只能有一个写者</li><li>文件仅支持append不支持修改</li><li>（其实本身是支持的，主要为了用空间换时间，节约成本）</li></ul><p>$$ 实现目标：</p><ul><li>兼容廉价的硬件设施</li><li>实现流数据读写</li><li>支持大数据集</li><li>支持简单的文件模型</li><li>强大的跨平台兼容性</li></ul></blockquote><h4 id="（3）-HDFS架构图"><a href="#（3）-HDFS架构图" class="headerlink" title="（3）==HDFS架构图=="></a>（3）==HDFS架构图==</h4><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz0lg96gkqj30hz0dsgmf.jpg" alt="HDFS架构图"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz0lq2gmmtj30f009vwfj.jpg" alt="HDFS架构图"></p><blockquote><p><code>关系型数据库：</code>安全，存储在磁盘中；如MySql、Oracle、SQlServer</p><p><code>非关系型数据库：</code>不安全，存储在内存中；如Redis、MemcacheDB、mongoDB、Hbase</p></blockquote><h3 id="3、-HDFS的功能模块及原理详解"><a href="#3、-HDFS的功能模块及原理详解" class="headerlink" title="3、==HDFS的功能模块及原理详解=="></a>3、==HDFS的功能模块及原理详解==</h3><h4 id="lt-1-gt-HDFS数据存储模型（block）"><a href="#lt-1-gt-HDFS数据存储模型（block）" class="headerlink" title="&lt;1&gt; HDFS数据存储模型（block）"></a>&lt;1&gt; HDFS数据存储模型（block）</h4><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz0n3j6xvnj30fe09vdh0.jpg" alt="block"></p><h5 id="（1）文件被线性切分固定大小的数据块：block"><a href="#（1）文件被线性切分固定大小的数据块：block" class="headerlink" title="（1）文件被线性切分固定大小的数据块：block"></a>（1）文件被<code>线性切分</code>固定大小的数据块：block</h5><ul><li><p>通过偏移量offset（单位：byte）标记</p></li><li><p>默认数据块大小为64MB (hadoop1.x，hadoop2.x默认为128M）)，可自定义配置</p></li><li><p>若文件大小不到64MB ，则单独存成一个block</p></li></ul><h5 id="（2）一个文件存储方式"><a href="#（2）一个文件存储方式" class="headerlink" title="（2）一个文件存储方式"></a>（2）一个文件存储方式</h5><ul><li><p>按大小被切分成若干个block ，存储到<code>不同节点上</code></p></li><li><p>默认情况下每个block共有3个副本</p></li><li><p>副本数不大于节点数</p></li></ul><h5 id="（3）Block大小和副本数通过Client端上传文件时设置，"><a href="#（3）Block大小和副本数通过Client端上传文件时设置，" class="headerlink" title="（3）Block大小和副本数通过Client端上传文件时设置，"></a>（3）Block大小和副本数通过Client端上传文件时设置，</h5><blockquote><p> 文件上传成功后副本数可以变更，Block Size大小不可变更</p><p>块的大小远远大于普通文件系统，可以最小化寻址开销</p></blockquote><h4 id="lt-2-gt-NameNode（简称NN）"><a href="#lt-2-gt-NameNode（简称NN）" class="headerlink" title="&lt;2&gt;NameNode（简称NN）"></a>&lt;2&gt;NameNode（简称NN）</h4><blockquote><ul><li>存储<code>元数据</code>；</li><li>元数据保存在<code>内存中</code>；</li><li>保存<code>文件</code>、<code>block块</code>、<code>datanode</code>之间的映射关系</li></ul></blockquote><h5 id="1-gt-NN主要功能："><a href="#1-gt-NN主要功能：" class="headerlink" title="1&gt; NN主要功能："></a>1&gt; NN主要功能：</h5><blockquote><p>接收客户端的读写服务；接收DN汇报block位置关系</p></blockquote><h5 id="2-gt-NN保存metadate元信息"><a href="#2-gt-NN保存metadate元信息" class="headerlink" title="2&gt; NN保存metadate元信息"></a>2&gt; NN保存metadate元信息</h5><blockquote><p>基于<code>内存</code>存储，<code>不会</code>和磁盘发生交换</p></blockquote><p>​        <code>metadata</code>元数据信息包括以下</p><blockquote><ul><li><p>文件的归属（ownership）和权限（permission）</p></li><li><p>文件大小和写入时间</p></li><li><p>block列表【偏移量】：即一个完整文件有哪些block（b0+b1+b2+..=file）</p></li><li><p>位置信息（<code>动态 </code>的）：Block每个副本保存在哪个DataNode中</p><p><code>*注意*</code>：位置信息是由DN启动时上报给NN ，因为它会随时变化，所以不会保存在内存和磁盘中</p></li></ul></blockquote><h5 id="3-gt-NameNode的metadate信息在启动后会加载到内存"><a href="#3-gt-NameNode的metadate信息在启动后会加载到内存" class="headerlink" title="3&gt; NameNode的metadate信息在启动后会加载到内存"></a>3&gt; NameNode的metadate信息在启动后会加载到内存</h5><blockquote><p>同时：</p><p>metadata信息也会保存fsimage文件中（fsimage文件是位于磁盘上的镜像文件）</p><p>对metadata的操作日志也会记录在edits 文件中（edits文件是位于磁盘上的日志文件）</p></blockquote><h4 id="lt-3-gt-SecondaryNameNode（简称SNN）"><a href="#lt-3-gt-SecondaryNameNode（简称SNN）" class="headerlink" title="&lt;3&gt;SecondaryNameNode（简称SNN）"></a>&lt;3&gt;SecondaryNameNode（简称SNN）</h4><h5 id="1-gt-SNN主要功能"><a href="#1-gt-SNN主要功能" class="headerlink" title="1&gt;SNN主要功能"></a>1&gt;SNN主要功能</h5><blockquote><p>帮助NameNode合并edits和fsimage文件，减少NN启动时间；</p><p>SecondaryNameNode一般是单独运行在一台机器上；</p><p>它不是NN的备份（但可以做备份)。</p></blockquote><h5 id="2-gt-合并流程"><a href="#2-gt-合并流程" class="headerlink" title="2&gt;合并流程"></a>2&gt;合并流程</h5><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz0p1lys2zj30f009vwf2.jpg" alt="SNN合并"></p><pre class="line-numbers language-txt"><code class="language-txt">SecondaryNameNode的工作情况：（1）SecondaryNameNode会定期和NameNode通信，请求其停止使用EditLog文件，     暂时将新的写操作写到一个新的文件edit.new上来，这个操作是瞬间完成，     上层写日志的函数完全感觉不到差别；（2）SecondaryNameNode通过HTTP GET方式从NameNode上获取到FsImage和EditLog文    件，并下载到本地的相应目录下；（3）SecondaryNameNode将下载下来的FsImage载入到内存，然后一条一条地执行EditLog文件中的各项更新操作，使得内存中的FsImage保持最新；    这个过程就是EditLog和FsImage文件合并；（4）SecondaryNameNode执行完（3）操作之后，     会通过post方式将新的FsImage文件发送到NameNode节点上（5）NameNode将从SecondaryNameNode接收到的新的FsImage替换旧的FsImage文件，     同时将edit.new替换EditLog文件，通过这个过程EditLog就变小了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-gt-合并机制"><a href="#3-gt-合并机制" class="headerlink" title="3&gt;合并机制"></a>3&gt;合并机制</h5><blockquote><p> ——-SNN执行合并时间和机制</p><ul><li>A、根据配置文件设置指定连续两次检查点的最大时间间隔 <code>fs.checkpoint.period</code> 默认3600秒（1小时）</li><li>B、根据配置文件设置edits log文件大小 <code>fs.checkpoint.size</code> 默认最大值64M</li><li>配置文件：core-site.xml</li></ul></blockquote><h4 id="lt-4-gt-DataNode（简称DN）"><a href="#lt-4-gt-DataNode（简称DN）" class="headerlink" title="&lt;4&gt;DataNode（简称DN）"></a>&lt;4&gt;DataNode（简称DN）</h4><h5 id="1-gt-DN主要功能"><a href="#1-gt-DN主要功能" class="headerlink" title="1&gt;  DN主要功能"></a>1&gt;  DN主要功能</h5><blockquote><ul><li>存储<code>文件内容</code>（block）；</li><li>文件内容保存在<code>磁盘</code>；</li><li>维护了<code>block id</code> 到<code>datanode本地文件</code>的映射关系</li><li>启动DN线程的时候会向NameNode汇报block位置信息</li></ul></blockquote><h5 id="2-gt-DN工作机制"><a href="#2-gt-DN工作机制" class="headerlink" title="2&gt;   DN工作机制"></a>2&gt;   DN工作机制</h5><pre><code>•    数据节点是分布式文件系统HDFS的工作节点，负责数据的存储和读取，•    会根据客户端或者是名称节点的调度来进行数据的存储和检索，•    并且通过心跳机制向名称节点定期发送自己所存储的块的列表，保持与其联系（3秒一次）    （如果NN 10分钟没有收到DN的心跳，则认为其已经lost，并copy其上的block到其它DN）•    每个数据节点中的数据会被保存在各自节点的本地Linux文件系统中</code></pre><h5 id="3-gt-block的副本放置策略"><a href="#3-gt-block的副本放置策略" class="headerlink" title="3&gt; block的副本放置策略"></a>3&gt; block的副本放置策略</h5><blockquote><p>–  第一个副本：放置在上传文件的DN（集群内提交）；</p><p>​                           如果是集群外提交，则随机挑选一台磁盘不太满，CPU不太忙的节点。</p><p>–  第二个副本：放置在于第一个副本不同的机架的节点上。</p><p>–  第三个副本：与第二个副本相同机架的不同节点。</p><p>–  更多副本：随机节点</p></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz1ny1tfrjj30f00akaaf.jpg" alt="block块存放位置"></p><h3 id="4、HDFS读写流程"><a href="#4、HDFS读写流程" class="headerlink" title="4、HDFS读写流程"></a>4、HDFS读写流程</h3><h4 id="lt-1-gt-读文件过程"><a href="#lt-1-gt-读文件过程" class="headerlink" title="&lt;1&gt; 读文件过程"></a>&lt;1&gt; 读文件过程</h4><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz1o4z4nmwj30gm09vgmg.jpg" alt="read"></p><blockquote><p>1、首先<code>client端</code>调用DistributedFileSystem对象（<code>DFS</code>）的<code>open方法</code>，（DFS：一个DistributedFileSystem的实例）。<br>2、DistributedFileSystem通过<code>rpc</code>协议从NameNode（<code>NN</code>）获得文件的第一批block的<code>locations</code>，（同一个block按副本数会返回多个locations，因为同一文件的block<code>分布式存储</code>在不同节点上），这些locations按照hadoop拓扑结构排序，距离客户端近的排在前面（<code>就近选择</code>）。</p><p>3、前两步会返回一个FSDataInputStream对象，该对象会被封装DFSInputStream对象，DFSInputStream可以方便的管理DN和NN的数据流。客户端调用<code>read方法</code>，DFSInputStream会连接离客户端最近的DN，数据从DN源源不断的流向客户端（对客户端是透明的，只能看到一个读入的Input流）。</p><p>4、如果第一批block都读完了， DFSInputStream就会去NN拿下一批block的locations，然后继续读，如果所有的块都读完，这时就会关闭掉所有的流</p></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz1ptkw9krj30q40gegpp.jpg" alt="读"></p><p><code>注意：</code></p><pre><code>   如果在读数据的时候,DFSInputStream和DN的通讯发生异常，就会尝试连接正在读的block的排序第二近的DN,并且会记录哪个DN发生错误，剩余的blocks读的时候就会直接跳过该DN。   DFSInputStream也会检查block数据校验和，如果发现一个坏的block,就会先报告到NN，然后DFSInputStream在其他的DN上读该block的镜像。   该设计就是客户端直接连接DN来检索数据，并且NN来负责为每一个block提供最优的DN，NN仅仅处理block location的请求，这些信息都加载在NN的内存中，hdfs通过DN集群可以承受大量客户端的并发访问。   * RPC *（Remote Procedure Call Protocol）——远程过程调用协议，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。RPC协议假定某些传输协议的存在，如TCP或UDP，为通信程序之间携带信息数据。在OSI网络通信模型中，RPC跨越了传输层和应用层。RPC使得开发包括网络分布式多程序在内的应用程序更加容易。RPC采用客户机/服务器模式。请求程序就是一个客户机，而服务提供程序就是一个服务器。首先，客户机调用进程发送一个有进程参数的调用信息到服务进程，然后等待应答信息。在服务器端，进程保持睡眠状态直到调用信息到达为止。当一个调用信息到达，服务器获得进程参数，计算结果，发送答复信息，然后等待下一个调用信息，最后，客户端调用进程接收答复信息，获得进程结果，然后调用执行继续进行。</code></pre><h4 id="lt-2-gt-写文件过程"><a href="#lt-2-gt-写文件过程" class="headerlink" title="&lt;2&gt;写文件过程"></a>&lt;2&gt;写文件过程</h4><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz1o6wamv3j30ga0aawfd.jpg" alt="write">3</p><blockquote><p>**1.**客户端通过调用DistributedFileSystem的<code>create方法</code>创建新文件。</p><p>**2.**DistributedFileSystem通过<code>RPC</code>调用NN去创建一个没有blocks关联的新文件，创建前，NN会做各种校验，比如文件是否存在，客户端有无权限去创建等。如果校验通过，NN就会记录下新文件，否则就会抛出IO异常。</p><p>**3.**前两步结束后，会返回FSDataOutputStream的对象，封装在DFSOutputStream，客户端开始写数据到DFSOutputStream，DFSOutputStream会把数据切成一个个小的<code>packet</code>，然后排成队列dataQuene。</p><p>**4.**NN会给这个新的block分配最适合存储的几个datanode，DFSOutputStream把packet包排成一个<code>管道pipeline</code>输出。先按队列输出到管道的第一个datanode中，并将该Packet从dataQueue队列中移到ackQueue队列中，第一个datanode又把packet输出到第二个datanode中，以此类推。</p><p>**5.**DFSOutputStream中的<code>ackQuene</code>，也是由packet组成，等待DN的收到响应，当pipeline中的DN都表示已经收到数据的时候，这时ackQuene才会把对应的packet包移除掉。 如果在写的过程中某个DN发生错误，会采取以下几步：</p><p>​      1) pipeline被关闭掉；  </p><p>​      2)为了防止丢包，ackQuene里的packet会<code>同步</code>到dataQuene里;新建pipeline管道接到其他正常DN上</p><p>​     4)剩下的部分被写到剩下的正常的datanode中； </p><p>​     5)NN找到另外的DN去创建这个块的复制。（对客户端透明）</p><p>**6.**客户端完成写数据后调用<code>close方法</code>关闭写入流</p></blockquote><p><code>注意：</code>客户端执行write操作后，写完的block才是可见的，正在写的block对客户端是不可见的</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz1ptp2xlej30on0gf78r.jpg" alt="写"></p><h3 id="5-HDFS文件权限和安全模式"><a href="#5-HDFS文件权限和安全模式" class="headerlink" title="5.HDFS文件权限和安全模式"></a>5.HDFS文件权限和安全模式</h3><h4 id="lt-1-gt-？？HDFS文件权限？？"><a href="#lt-1-gt-？？HDFS文件权限？？" class="headerlink" title="&lt;1&gt;？？HDFS文件权限？？"></a>&lt;1&gt;？？HDFS文件权限？？</h4><p>– 与Linux文件权限类似 </p><blockquote><p>   • r: read;    w:write;    x:execute，权限x对于文件忽略，对于文件夹表示是否允许访问其内容 </p></blockquote><p>– 如果Linux系统用户zs使用hadoop命令创建一个文件，那么这个 文件在HDFS中owner就是zs。 </p><p>– HDFS的权限目的：阻止好人做错事，而不是阻止坏人做坏事。</p><h4 id="lt-2-gt-？？安全模式？？"><a href="#lt-2-gt-？？安全模式？？" class="headerlink" title="&lt;2&gt;？？安全模式？？"></a>&lt;2&gt;？？安全模式？？</h4><blockquote><ul><li>NN启动的时候，首先将映像文件(fsimage)载入内存，并执行编辑日志(edits)中的各项操作。 </li></ul></blockquote><blockquote><ul><li>一旦在内存中成功建立文件系统元数据的映射，则创建一个新的fsimage文件(这个操作不需要SecondaryNameNode)和一个空的编辑日志。 </li></ul></blockquote><blockquote><ul><li>此刻namenode运行在安全模式。即namenode的文件系统对于客服端来说是只读的。(显示目录，显示文件内容等。写、删除、重命名都会失败)。 </li></ul></blockquote><blockquote><ul><li>在此阶段Namenode收集各个datanode的报告，当数据块达到最小副本数以上时，会被认为是“安全”的， 在一定比例（可设置）的数据块被确定为“安全”后，再过若干时间，安全模式结束 </li></ul></blockquote><blockquote><ul><li>当检测到副本数不足的数据块时，该块会被复制直到达到最小副本数，系统中数据块的位置并不是由namenode维护的，而是以块列表形式存储在datanode中。</li></ul></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz1s32tmr2j30hj04ggmr.jpg" alt="异常"></p><p>手动退出安全模式：</p><pre class="line-numbers language-shell"><code class="language-shell">hdfs namenode -safemode leave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、完全分布式搭建及eclipse插件"><a href="#二、完全分布式搭建及eclipse插件" class="headerlink" title="二、完全分布式搭建及eclipse插件"></a>二、完全分布式搭建及eclipse插件</h2><h3 id="1、-完全分布式搭建（必备）"><a href="#1、-完全分布式搭建（必备）" class="headerlink" title="1、==完全分布式搭建（必备）=="></a>1、==完全分布式搭建（必备）==</h3><h4 id="（1）环境的准备"><a href="#（1）环境的准备" class="headerlink" title="（1）环境的准备"></a>（1）环境的准备</h4><blockquote><ul><li>Linux (前面已经安装好了)</li></ul><ul><li><p>JDK（前面已经安装好了）</p></li><li><p>准备至少3台机器（通过克隆虚拟机；)</p></li><li><p>(网络配置、JDK搭建、hosts配置，保证节点间能互ping通）</p></li><li><p>时间同步</p><p>（推荐）ntpdate cn.ntp.org.cn </p><p> (ntpdate time.nist.gov)</p></li><li><p>ssh免秘钥登录   (两两互通免秘钥)</p></li></ul></blockquote><h4 id="（2）完全分布式搭建步骤"><a href="#（2）完全分布式搭建步骤" class="headerlink" title="（2）完全分布式搭建步骤"></a>（2）完全分布式搭建步骤</h4><h5 id="Hadoop-1-X"><a href="#Hadoop-1-X" class="headerlink" title="Hadoop 1.X"></a><strong>Hadoop 1.X</strong></h5><h6 id="1、下载解压缩Hadoop"><a href="#1、下载解压缩Hadoop" class="headerlink" title="1、下载解压缩Hadoop"></a>1、下载解压缩Hadoop</h6><h6 id="2、配置hadoop-hadoop-env-sh"><a href="#2、配置hadoop-hadoop-env-sh" class="headerlink" title="2、配置hadoop/hadoop-env.sh"></a>2、配置hadoop/hadoop-env.sh</h6><pre class="line-numbers language-sh"><code class="language-sh">export JAVA_HOME=/usr/java/latest <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="3、配置core-site-xml"><a href="#3、配置core-site-xml" class="headerlink" title="3、配置core-site.xml:"></a>3、配置core-site.xml:</h6><blockquote><p>fs.defaultFS 默认的服务端口NameNode URI</p><p>hadoop.tmp.dir 是hadoop文件系统依赖的基础配置，很多路径都依赖它。如果hdfs-site.xml中不配 置namenode和datanode的存放位置，默认就放在这个路径中</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://node01:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/hadoop-2.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4、配置hdfs-site-xml"><a href="#4、配置hdfs-site-xml" class="headerlink" title="4、配置hdfs-site.xml:"></a>4、配置hdfs-site.xml:</h6><p>dfs.datanode.https.address   https服务的端口，浏览器访问端口</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--默认为3个副本，若指定，则以指定的为准--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--http访问：SecondaryNameNode的服务器的ip地址别名,端口号50090--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node02:50090<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--https访问：SecondaryNameNode的服务器的ip地址别名,端口号50090--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.https-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>node02:50091<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="5、Masters-master-可以做主备的SNN"><a href="#5、Masters-master-可以做主备的SNN" class="headerlink" title="5、Masters:master 可以做主备的SNN"></a>5、Masters:<strong>master</strong> 可以做主备的SNN</h6><p>在/home/hadoop-2.6.5/etc/hadoop/新建masters文件 写上<strong>SNN</strong>节点名： node02（IP地址别名） </p><h6 id="6、Slaves-slave-奴隶-苦干；拼命工作"><a href="#6、Slaves-slave-奴隶-苦干；拼命工作" class="headerlink" title="6、Slaves: slave 奴隶 苦干；拼命工作"></a>6、Slaves: <strong>slave</strong> 奴隶 苦干；拼命工作</h6><p>在/home/hadoop-2.5.1/etc/hadoop/slaves文件中填写<strong>DN</strong> 节点名：node02 node03 [注意：每行写一个 写成3行]</p><h6 id="7、最后将配置好的Hadoop通过SCP命令发送都其他节点"><a href="#7、最后将配置好的Hadoop通过SCP命令发送都其他节点" class="headerlink" title="7、最后将配置好的Hadoop通过SCP命令发送都其他节点"></a>7、最后将配置好的Hadoop通过SCP命令发送都其他节点</h6><p>   配置Hadoop的环境变量</p><p>8、vim ~/.bash_profile  (最好手敲输入 粘贴有时候会出错)</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">export</span> <span class="token attr-value">HADOOP_HOME/home/hadoop-2.6.5</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 9、记得一定要  source ~/.bash_profile<br>10、回到跟目录下对NN进行格式化  hdfs namenode -format</p><p>11、启动HDFS： start-dfs.sh</p><p>12、关闭防火墙：service iptables stop<br>在浏览器输入 node01:50070 </p><h5 id="Hadoop-2-X"><a href="#Hadoop-2-X" class="headerlink" title="==!!Hadoop 2.X!!=="></a>==!!<strong>Hadoop 2.X</strong>!!==</h5><p><code>详情见Hadoop2.X.md文件</code></p><h3 id="2、HDFS命令"><a href="#2、HDFS命令" class="headerlink" title="2、HDFS命令"></a>2、HDFS命令</h3><h4 id="0-命令-：hdfs-dfs"><a href="#0-命令-：hdfs-dfs" class="headerlink" title="(0)  命令 ：hdfs dfs"></a>(0)  命令 ：hdfs dfs</h4><h4 id="1-上传文件到HDFS："><a href="#1-上传文件到HDFS：" class="headerlink" title="(1)上传文件到HDFS："></a>(1)上传文件到HDFS：</h4><blockquote><p> **hdfs dfs -put 本地路径/fileName **PATH [hdfs的文件路径]</p></blockquote><blockquote><p>上传本地文件/root/install.log到/myhdfs目录下</p><pre class="line-numbers language-shell"><code class="language-shell">hdfs dfs -put /root/install.log /myhdfs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​                                      （文件路径)                (上传目录）    </p></blockquote><h4 id="2-创建文件夹"><a href="#2-创建文件夹" class="headerlink" title="(2)创建文件夹"></a>(2)创建文件夹</h4><blockquote><pre class="line-numbers language-shell"><code class="language-shell">hdfs dfs -mkdir[-p] <paths><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>-p</strong>   穿透，用于创建多级文件夹</p></blockquote><h4 id="3-删除文件或文件夹"><a href="#3-删除文件或文件夹" class="headerlink" title="(3)删除文件或文件夹"></a>(3)<strong>删除文件或文件夹</strong></h4><blockquote><pre class="line-numbers language-shell"><code class="language-shell">hdfs dfs -rm -r /myhadoop1.0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除多个文件夹</p><pre class="line-numbers language-shell"><code class="language-shell">hdfs dfs -rm -r /input /logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>-r</strong>   递归，用于删除文件夹以及下级文件和文件夹</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">hdfs dfs -du [-s] [-h] URI[URI ...] 显示文件(夹)大小. hdfs dfs -cp [-f] [-p] URI[URI...]<dest>    复制文件(夹)，可以覆盖，可以保留原有权限信息hdfs dfs -count [-q] [-h] <paths>列出文件夹数量、文件数量、内容大小.hdfs dfs -chown [-R] [OWNER] [:[GROUP]] URI[URI] 修改所有者.hdfs dfs -chmod [-R]<MODE[,MODE]...|OCTALMODE> URI[URI ...] 修改权限.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（4）指定block大小"><a href="#（4）指定block大小" class="headerlink" title="（4）指定block大小"></a>（4）指定block大小</h4><p>其中副本数是在在配置文件中配置</p><pre class="line-numbers language-shell"><code class="language-shell">产生100000条数据：for i in `seq 100000`;do  echo "hello sxt $i" >> test.txt;done上传文件test.txt到指定的Java22目录下，并指定block块的大小1M：hdfs dfs -D dfs.blocksize=1048576 -put test.txt /java22-D   ----设置属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、eclipse插件安装配置"><a href="#3、eclipse插件安装配置" class="headerlink" title="3、eclipse插件安装配置"></a>3、eclipse插件安装配置</h3><h4 id="（1）、导入插件"><a href="#（1）、导入插件" class="headerlink" title="（1）、导入插件"></a>（1）、导入插件</h4><blockquote><p>将以下jar包放入eclipse的plugins文件夹中</p><p>​         hadoop-eclipse-plugin-2.6.0.jar</p></blockquote><p>启动eclipse：出现界面如下：</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz1uhqzg9oj30fe09nt9c.jpg" alt="插件应用"></p><h4 id="（2）配置环境变量"><a href="#（2）配置环境变量" class="headerlink" title="（2）配置环境变量"></a>（2）配置环境变量</h4><p><strong>Eclipse</strong>插件安装完后修改windows下的用户名，然后重启Eclipse：</p><p><strong>【注意：改成Windows下用户的用户名root（重启生效）或改Linux文件的用户】</strong></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz1uk49nbrj30fe0770tj.jpg" alt="环境变量"></p><h4 id="（3）新建Java项目"><a href="#（3）新建Java项目" class="headerlink" title="（3）新建Java项目"></a>（3）新建Java项目</h4><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz1ut3z3r2j30et0ah0tw.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g182idgjuuj30fe0a6my9.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz1utb5r5tj30fe0brgmt.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz1uw9a82yj30g508qmxh.jpg"></p><h2 id="三、网盘"><a href="#三、网盘" class="headerlink" title="三、网盘"></a>三、网盘</h2><p><strong>1、代码编写</strong></p><p><strong>新建Java项目，导入所需要的jar包</strong></p><pre><code>     hadoop中的share\hadoop\hdfs     hadoop中的share\hadoop\hdfs\lib     hadoop中的share\hadoop\common     hadoop中的share\hadoop\common\lib下的jar包。</code></pre><p><strong>block</strong>底层—offset偏移量来读取字节数组</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">blk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Path ifile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileStatus file <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">getFileStatus</span><span class="token punctuation">(</span>ifile <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      获取block的location信息HDFS分布式文件存储系统根据其偏移量的位置信息来读取其内容</span>        BlockLocation<span class="token punctuation">[</span><span class="token punctuation">]</span> blk <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">getFileBlockLocations</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getLen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BlockLocation bb <span class="token operator">:</span> blk<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        FSDataInputStream input <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>ifile<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//        指定从哪个offset的位置偏移量来读</span>        input<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">1048576</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        input<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token number">1048576</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>HDFS读取合并的小文件</strong></p>]]></content>
      
      
      <categories>
          
          <category> HDFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx入门学习（二）</title>
      <link href="/2019/01/02/Nginx%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A02/"/>
      <url>/2019/01/02/Nginx%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h2 id="一、虚拟主机"><a href="#一、虚拟主机" class="headerlink" title="一、虚拟主机"></a>一、虚拟主机</h2><h3 id="1、什么是虚拟主机？"><a href="#1、什么是虚拟主机？" class="headerlink" title="1、什么是虚拟主机？"></a>1、什么是虚拟主机？</h3><p>（1）是指在网络服务器上分出一定的磁盘空间，租给用户以放置站点以及应用空间，并提供必要的存储和传输功能。</p><p>（2）是被虚拟化的逻辑主机，也可理解为就是把一台物理服务器划分成多个“虚拟“的服务器，各个虚拟主机之间完全独立，对外界呈现的状态也同单独物理主机表现完全相同。</p><h3 id="2、虚拟主有啥特点？"><a href="#2、虚拟主有啥特点？" class="headerlink" title="2、虚拟主有啥特点？"></a>2、虚拟主有啥特点？</h3><p>（1）多台虚拟主机共享一台真实主机资源，大幅度降低了硬件、网络维护、通信线路等的费用</p><p>（2）也大大简化了服务器管理的复杂性；</p><h3 id="3、虚拟主机有哪些类别？"><a href="#3、虚拟主机有哪些类别？" class="headerlink" title="3、虚拟主机有哪些类别？"></a>3、虚拟主机有哪些类别？</h3><p>（1）基于域名</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">http</span> <span class="token attr-value">&amp;#123; </span><span class="token attr-name">    upstream</span> <span class="token attr-value">shsxt&amp;#123; </span><span class="token attr-name">        server</span> <span class="token attr-value">node01; </span><span class="token attr-name">        server</span> <span class="token attr-value">node02; </span><span class="token attr-name">     &amp;#125;</span> <span class="token attr-name">    upstream</span> <span class="token attr-value">bjsxt&amp;#123; </span><span class="token attr-name">        server</span> <span class="token attr-value">node03; </span><span class="token attr-name">     &amp;#125;</span> <span class="token attr-name">     server</span> <span class="token attr-value">&amp;#123;    </span><span class="token attr-name">            listen</span> <span class="token attr-value">80; </span>            //访问sxt2.com的时候，会把请求导到bjsxt的服务器组里<span class="token attr-name">            server_name</span> <span class="token attr-value"> sxt2.com;</span><span class="token attr-name">            location</span> <span class="token attr-value">/ &amp;#123;</span><span class="token attr-name">                proxy_pass</span> <span class="token attr-value">http://bjsxt;</span>            &amp;#125;<span class="token attr-name">      &amp;#125;</span> <span class="token attr-name">      server</span> <span class="token attr-value">&amp;#123; </span><span class="token attr-name">            listen</span> <span class="token attr-value">80; </span>           //访问sxt1.com的时候，会把请求导到shsxt的服务器组里<span class="token attr-name">            server_name</span> <span class="token attr-value"> sxt1.com; </span><span class="token attr-name">            location</span> <span class="token attr-value">/ &amp;#123;</span><span class="token attr-name">                proxy_pass</span> <span class="token attr-value">http://shsxt;</span>            &amp;#125;<span class="token attr-name">      &amp;#125;</span> &amp;#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p></blockquote><blockquote><p>（1）基于域名的虚拟机主机 在模拟应用场景时，需要在windows系统的hosts文件里配置域名映射。</p><p>（C:\Windows\System32\drivers\etc\hosts     给IP取别名）</p><p>如：192.168.198.130   sxt1.com</p></blockquote><blockquote><p>（2）每台服务器的Tomcat的端口不与配置的listen一致，那么windows系统浏览器访问时，需要加上TOmcat的端口，（192.168.198.128：8080）</p><p>​         如果一致，那么就可以不加Tomcat的端口因为Nginx服务器默认端口为80</p></blockquote><p>（2）基于端口</p><pre><code>http &amp;#123;     upstream shsxt&amp;#123;         server node01;         server node02;      &amp;#125;     upstream bjsxt&amp;#123;         server node03    &amp;#125;  server &amp;#123;        //当访问nginx的80端口时，将请求导给bjsxt组        listen 8080;         server_name 192.168.198.128;        location / &amp;#123;            proxy_pass http://bjsxt;        &amp;#125;&amp;#125;   server &amp;#123;            //当访问nginx的81端口时，将请求导给shsxt组            listen 81;             server_name 192.168.198.128;  //nginx服务器的IP            location / &amp;#123;                proxy_pass http://shsxt;            &amp;#125;    &amp;#125; &amp;#125;</code></pre><p>（3）基于IP  ：（不常用）</p><h2 id="二、正向代理和反向代理"><a href="#二、正向代理和反向代理" class="headerlink" title="二、正向代理和反向代理"></a>二、正向代理和反向代理</h2><h3 id="1、正向代理"><a href="#1、正向代理" class="headerlink" title="1、正向代理"></a>1、正向代理</h3><p>理解：</p><blockquote><p>代理客户端，如通过VPN ，隐藏客户端，访问目标服务器（服务端可见）</p></blockquote><p>举例：</p><blockquote><p>国内不能直接访问谷歌，但是可以访问代理服务器，通过代理服务器可以访问谷歌。（就是翻墙）</p><p>但是，需要客户端必须设置正向代理服务器，并且要知道正向代理服务器的IP地址和端口</p></blockquote><h3 id="2、反向代理"><a href="#2、反向代理" class="headerlink" title="2、反向代理"></a>2、反向代理</h3><p>理解：</p><blockquote><p>代理服务端，通过负载均衡服务器（如Nginx），隐藏服务端，分发客户端的不同请求（客户端可见）到内部网络上的服务器</p></blockquote><p>举例：</p><blockquote><p>如我们访问<a href="http://www.baidu.com的时候,它背后有很多台服务器,客户端并不知道具体是哪一台服务器给你提供的服务,只要知道反向代理服务器是谁就好了,反向代理服务器就会把我们的请求转发到真实服务器上./">www.baidu.com的时候，它背后有很多台服务器，客户端并不知道具体是哪一台服务器给你提供的服务，只要知道反向代理服务器是谁就好了，反向代理服务器就会把我们的请求转发到真实服务器上。</a></p></blockquote><p>Nginx就是性能很好的反向代理服务器，用来作负载均衡。</p><h2 id="三、Nginx的session一致性问题"><a href="#三、Nginx的session一致性问题" class="headerlink" title="三、Nginx的session一致性问题"></a>三、Nginx的session一致性问题</h2><h3 id="1、背景："><a href="#1、背景：" class="headerlink" title="1、背景："></a>1、背景：</h3><p>http协议是无状态的，多次访问如果是不同服务器响应请求，就会出现上次访问留下的session或cookie失效。这就引发了session共享的问题。</p><h3 id="2、Session一致性解决方案"><a href="#2、Session一致性解决方案" class="headerlink" title="2、Session一致性解决方案"></a>2、Session一致性解决方案</h3><p>（1）–session复制<br>   tomcat 本身带有复制session的功能。</p><p>（2）-共享session</p><p>  需要专门管理session的软件，<br>   memcached 缓存服务，可以和tomcat整合，帮助tomcat共享管理session。</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz0gr7u5zoj31740hb42u.jpg"></p><h3 id="3、搭建memcached"><a href="#3、搭建memcached" class="headerlink" title="3、搭建memcached"></a>3、搭建memcached</h3><p>memcached （同redis一样）是基于<code>内存</code>的数据库</p><h4 id="1、安装memcached"><a href="#1、安装memcached" class="headerlink" title="1、安装memcached"></a>1、安装memcached</h4><blockquote><pre class="line-numbers language-shell"><code class="language-shell">yum –y install memcache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>验证本机11211端口是否可用:</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">telnet localhost 11211<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="2、启动memcached"><a href="#2、启动memcached" class="headerlink" title="2、启动memcached"></a>2、启动memcached</h4><p>(IP地址为memcached安装的节点的IP地址)</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">memcached -d -m 128m -p 11211 -l 192.168.198.128 -u root -P /tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>3、拷贝memcached所需jar包</p><p>将web服务器连接memcached的jar包拷贝到tomcat的lib目录下</p><p><code>访问Tomcat服务器期间产生的session通过相关jar包，才能写入到memcached数据库中 </code></p><blockquote><p>asm-3.2.jar</p><p>kryo-1.04.jar</p><p>kryo-serializers-0.11.jar</p><p>memcached-session-manager-1.7.0.jar</p><p>memcached-session-manager-tc7-1.8.1.jar</p><p>minlog-1.2.jar</p><p>msm-kryo-serializer-1.7.0.jar</p><p>reflectasm-1.01.jar</p><p>spymemcached-2.7.3.jar</p></blockquote><p>4、配置tomcat的conf目录下的context.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Manager</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>de.javakaffee.web.msm.MemcachedBackupSessionManager<span class="token punctuation">"</span></span>    <span class="token attr-name">memcachedNodes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>n1:192.168.198.128:11211<span class="token punctuation">"</span></span>    <span class="token attr-name">sticky</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name">lockingMode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span>    <span class="token attr-name">sessionBackupAsync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>   <span class="token attr-name">requestUriIgnorePattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.*\.(ico|png|gif|jpg|css|js)$<span class="token punctuation">"</span></span><span class="token attr-name">sessionBackupTimeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token attr-name">transcoderFactoryClass</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置memcachedNodes属性，</p><blockquote><p>配置memcached数据库的ip和端口，默认11211，多个的话用逗号隔开.</p><p>目的是为了让tomcat服务器从memcached缓存里面拿session或者是放session</p></blockquote><p>5、将配置完成的context.xml发送到其他虚拟机器上</p><blockquote><p>scp -r context.xml root@node01:<code>pwd</code></p><p>或</p><p>scp -r context.xml node01:<code>pwd</code></p><p>或</p><p>scp -r context.xml <a href="mailto:&#114;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#49;&#57;&#56;&#46;&#49;&#51;&#48;">&#114;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#x38;&#x2e;&#49;&#57;&#56;&#46;&#49;&#51;&#48;</a>:<code>pwd</code></p></blockquote><p>6、修改tomcat安装目录中的webapps/ROOT下的 index.jsp，取sessionid看一看</p><pre class="line-numbers language-jsp"><code class="language-jsp"><%@ page language="java" contentType="text/html; charset=UTF-8"  pageEncoding="UTF-8"%><html lang="en">SessionID:<%=session.getId()%></br>SessionIP:<%=request.getServerName()%></br><h1>tomcat1</h1></html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、在浏览器段访问服务器，默认端口 ： 80 ，对此测验，就会发现sessionID不会改变</p>]]></content>
      
      
      <categories>
          
          <category> 负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx入门学习（一）</title>
      <link href="/2019/01/02/Nginx%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A01/"/>
      <url>/2019/01/02/Nginx%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h1 id="大型网站高并发运行处理"><a href="#大型网站高并发运行处理" class="headerlink" title="大型网站高并发运行处理"></a>大型网站高并发运行处理</h1><h2 id="一、Nginx使用背景"><a href="#一、Nginx使用背景" class="headerlink" title="一、Nginx使用背景"></a>一、Nginx使用背景</h2><p>[^ 开发者]: 由俄罗斯的程序设计师Igor Sysoev所开发</p><h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p>1）高并发（海量数据，复杂业务，大量线程）集中访问服务器</p><p>2)单台服务器资源和能力有限</p><p>引发服务器宕机，无法提供服务</p><h3 id="2、概念理解"><a href="#2、概念理解" class="headerlink" title="2、概念理解"></a>2、概念理解</h3><p>1)高并发</p><blockquote><p>海量数据请求访问（高），多个线程或者多个进程同时处理（并发）不同操作</p></blockquote><p>2）负载均衡（Load Balance）</p><blockquote><p>均匀分配请求|数据到不同操作单元上</p><p>其中，【均匀】是分布式系统架构设计中必须考虑的关键因素之一</p></blockquote><p>3）常见互联网分布式架构</p><blockquote><p>客户端层→反向代理层→站点层→服务层→数据层</p><p>只需要实现“将请求/数据均匀分摊到多个操作单元上执行”，就能实现负载均衡</p></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fz0gr7u5zoj31740hb42u.jpg"></p><h2 id="二、Nginx入门"><a href="#二、Nginx入门" class="headerlink" title="二、Nginx入门"></a>二、Nginx入门</h2><h3 id="1、了解nginx是什么"><a href="#1、了解nginx是什么" class="headerlink" title="1、了解nginx是什么"></a>1、了解nginx是什么</h3><blockquote><p>nginx是一款轻量级（开发方便，配置简捷）的Web 服务器/<strong>反向代理</strong>服务器及电子邮件（IMAP/POP3）代理服务器</p></blockquote><h3 id="2、Nginx特点"><a href="#2、Nginx特点" class="headerlink" title="2、Nginx特点"></a>2、Nginx特点</h3><blockquote><ul><li>占有内存少，CPU、内存等资源消耗也少；</li><li>运行稳定，并发能力强，nginx的并发能力确实在同类型的网页服务器中表现非常好。</li></ul><p>（底层使用C语言编写）</p><p>Tomcat的最高并发量为250个</p></blockquote><h3 id="3、Nginx-VS-Apache"><a href="#3、Nginx-VS-Apache" class="headerlink" title="3、Nginx   ==VS==  Apache"></a>3、Nginx   ==VS==  Apache</h3><h4 id="（1）nginx相对于apache的优点："><a href="#（1）nginx相对于apache的优点：" class="headerlink" title="（1）nginx相对于apache的优点："></a>（1）nginx相对于apache的优点：</h4><blockquote><ul><li>轻量级，同样起web 服务，比apache 占用更少的内存及资源</li><li>nginx 处理请求是异步非阻塞（如前端ajax）的，而apache 则是阻塞型的</li><li>在高并发下nginx能保持低资源低消耗高性能高度模块化的设计，编写模块相对简单</li><li>Nginx 配置简洁, Apache 复杂</li></ul></blockquote><h4 id="（2）apache-相对于nginx-的优点："><a href="#（2）apache-相对于nginx-的优点：" class="headerlink" title="（2）apache 相对于nginx 的优点："></a>（2）apache 相对于nginx 的优点：</h4><blockquote><ul><li>Rewrite重写 ，比nginx 的rewrite 强大模块超多，基本想到的都可以找到</li><li>少bug ，nginx 的bug 相对较多。（出身好起步高）</li></ul></blockquote><h3 id="4、配置搭建Nginx"><a href="#4、配置搭建Nginx" class="headerlink" title="4、配置搭建Nginx"></a>4、配置搭建Nginx</h3><p>（Linux系统环境下）</p><p><code>资源</code>：</p><p>Tengine（推荐）：<a href="http://tengine.taobao.org/download/tengine-2.2.3.tar.gz">Tengine-2.2.3.tar.gz</a> </p><p>​                                 <a href="http://tengine.taobao.org/download.html">其他版本</a></p><p>nginx：<a href="http://nginx.org/download/nginx-1.8.1.zip">nginx/Windows-1.8.1</a></p><h4 id="1）安装依赖"><a href="#1）安装依赖" class="headerlink" title="1）安装依赖"></a>1）安装依赖</h4><blockquote><p>命令：</p><pre class="line-numbers language-shell"><code class="language-shell">yum -y install gcc openssl-devel pcre-devel zlib-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="2）解压tar包"><a href="#2）解压tar包" class="headerlink" title="2）解压tar包"></a>2）解压tar包</h4><blockquote><p>命令：</p><pre class="line-numbers language-shell"><code class="language-shell">tar -zxvf Tengine-2.2.3.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="3）configure配置："><a href="#3）configure配置：" class="headerlink" title="3）configure配置："></a>3）configure配置：</h4><p>在解压后的源码目录中</p><p>两种方案：</p><blockquote><ul><li><p>命令：</p><pre class="line-numbers language-shell"><code class="language-shell"> ./configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>默认配置/usr/soft/nginx</p></blockquote><blockquote><ul><li><p>命令 :</p><pre class="line-numbers language-shell"><code class="language-shell"> ./configure –profix==/usr/soft/nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>配置在指定路径</p></blockquote><h4 id="4）编译并安装"><a href="#4）编译并安装" class="headerlink" title="4）编译并安装"></a>4）编译并安装</h4><p>(默认会在/usr/local下生成nginx目录)</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">make && make install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="5）配置nginx服务"><a href="#5）配置nginx服务" class="headerlink" title="5）配置nginx服务"></a>5）配置nginx服务</h4><p>在/etc/rc.d/init.d/目录中建立文本文件nginx</p><p>在文件中粘贴下面的内容：</p><pre class="line-numbers language-txt"><code class="language-txt">#!/bin/sh## nginx - this script starts and stops the nginx daemon## chkconfig:   - 85 15 # description:  Nginx is an HTTP(S) server, HTTP(S) reverse \#               proxy and IMAP/POP3 proxy server# processname: nginx# config:      /etc/nginx/nginx.conf# config:      /etc/sysconfig/nginx# pidfile:     /var/run/nginx.pid# Source function library.. /etc/rc.d/init.d/functions# Source networking configuration.. /etc/sysconfig/network# Check that networking is up.[ "$NETWORKING" = "no" ] && exit 0nginx="/usr/local/nginx/sbin/nginx"prog=$(basename $nginx)NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginxlockfile=/var/lock/subsys/nginxmake_dirs() &#123;   # make required directories   user=`nginx -V 2>&1 | grep "configure arguments:" | sed 's/[^*]*--user=\([^ ]*\).*/\1/g' -`   options=`$nginx -V 2>&1 | grep 'configure arguments:'`   for opt in $options; do       if [ `echo $opt | grep '.*-temp-path'` ]; then           value=`echo $opt | cut -d "=" -f 2`           if [ ! -d "$value" ]; then               # echo "creating" $value               mkdir -p $value && chown -R $user $value           fi       fi   done&#125;start() &#123;    [ -x $nginx ] || exit 5    [ -f $NGINX_CONF_FILE ] || exit 6    make_dirs    echo -n $"Starting $prog: "    daemon $nginx -c $NGINX_CONF_FILE    retval=$?    echo    [ $retval -eq 0 ] && touch $lockfile    return $retval&#125;stop() &#123;    echo -n $"Stopping $prog: "    killproc $prog -QUIT    retval=$?    echo    [ $retval -eq 0 ] && rm -f $lockfile    return $retval&#125;restart() &#123;    configtest || return $?    stop    sleep 1    start&#125;reload() &#123;    configtest || return $?    echo -n $"Reloading $prog: "    killproc $nginx -HUP    RETVAL=$?    echo&#125;force_reload() &#123;    restart&#125;configtest() &#123;  $nginx -t -c $NGINX_CONF_FILE&#125;rh_status() &#123;    status $prog&#125;rh_status_q() &#123;    rh_status >/dev/null 2>&1&#125;case "$1" in    start)        rh_status_q && exit 0        $1        ;;    stop)        rh_status_q || exit 0        $1        ;;    restart|configtest)        $1        ;;    reload)        rh_status_q || exit 7        $1        ;;    force-reload)        force_reload        ;;    status)        rh_status        ;;    condrestart|try-restart)        rh_status_q || exit 0            ;;    *)        echo $"Usage: $0 &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"        exit 2esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6）修改nginx文件的执行权限"><a href="#6）修改nginx文件的执行权限" class="headerlink" title="6）修改nginx文件的执行权限"></a>6）修改nginx文件的执行权限</h4><blockquote><p>命令 ：</p><pre class="line-numbers language-shell"><code class="language-shell"> chmod +x nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="7）添加该文件到系统服务中去"><a href="#7）添加该文件到系统服务中去" class="headerlink" title="7）添加该文件到系统服务中去"></a>7）添加该文件到系统服务中去</h4><blockquote><pre class="line-numbers language-shell"><code class="language-shell">chkconfig --add nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="8-查看是否添加成功"><a href="#8-查看是否添加成功" class="headerlink" title="8)查看是否添加成功"></a>8)查看是否添加成功</h4><blockquote><pre class="line-numbers language-shell"><code class="language-shell">chkconfig --list nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="9-启动，停止，重新装载"><a href="#9-启动，停止，重新装载" class="headerlink" title="9)启动，停止，重新装载"></a>9)启动，停止，重新装载</h4><blockquote><pre class="line-numbers language-shell"><code class="language-shell">service nginx start|stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="三、Nginx配置"><a href="#三、Nginx配置" class="headerlink" title="三、Nginx配置"></a>三、Nginx配置</h2><h3 id="1、查看配置"><a href="#1、查看配置" class="headerlink" title="1、查看配置"></a>1、查看配置</h3><blockquote><pre class="line-numbers language-shell"><code class="language-shell">cd   /usr/local/nginx/confvim   nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="2、配置解析"><a href="#2、配置解析" class="headerlink" title="2、配置解析"></a>2、配置解析</h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#进程数，建议设置和CPU个数一样或2倍</span><span class="token attr-name">worker_processes</span> <span class="token attr-value"> 2;</span><span class="token comment" spellcheck="true">#日志级别</span><span class="token attr-name">error_log</span> <span class="token attr-value"> logs/error.log  warning;(默认error级别)</span><span class="token comment" spellcheck="true"># nginx 启动后的pid 存放位置</span><span class="token comment" spellcheck="true">#pid        logs/nginx.pid;</span><span class="token attr-name">events</span> <span class="token attr-value">&amp;#123;</span><span class="token comment" spellcheck="true">    #配置每个进程的连接数，总的连接数= worker_processes * worker_connections</span><span class="token comment" spellcheck="true">    #默认1024</span><span class="token attr-name">    worker_connections</span> <span class="token attr-value"> 10240;</span>&amp;#125;<span class="token attr-name">http</span> <span class="token attr-value">&amp;#123;</span><span class="token attr-name">    include</span> <span class="token attr-value">      mime.types;</span><span class="token attr-name">    default_type</span> <span class="token attr-value"> application/octet-stream;</span><span class="token attr-name">    sendfile</span> <span class="token attr-value">       on;</span><span class="token comment" spellcheck="true">#连接超时时间，单位秒</span><span class="token attr-name">keepalive_timeout</span> <span class="token attr-value"> 65;</span><span class="token attr-name">    server</span> <span class="token attr-value">&amp;#123;</span><span class="token attr-name">        listen</span> <span class="token attr-value">      80;</span><span class="token attr-name">        server_name</span> <span class="token attr-value"> localhost                 </span><span class="token comment" spellcheck="true">        #默认请求</span>          location / &amp;#123;                     root  html;   #定义服务器的默认网站根目录位置                     index  index.php index.html index.htm;  #定义首页索引文件的名称        &amp;#125;<span class="token comment" spellcheck="true">        #定义错误提示页面</span><span class="token attr-name">        error_page</span> <span class="token attr-value">  500 502 503 504  /50x.html;</span><span class="token attr-name">        location</span> <span class="token punctuation">=</span> <span class="token attr-value">/50x.html &amp;#123;</span><span class="token attr-name">            root</span> <span class="token attr-value">  html;</span>        &amp;#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、负载均衡配置"><a href="#3、负载均衡配置" class="headerlink" title="3、负载均衡配置"></a>3、负载均衡配置</h3><p>1）安装Tomcat，参考 <code>Tomcat配置</code></p><h4 id="2）多负载均执行一下操作："><a href="#2）多负载均执行一下操作：" class="headerlink" title="2）多负载均执行一下操作："></a>2）多负载均执行一下操作：</h4><p> 多负载的情况下，打开指定虚拟机器</p><blockquote><p>open  node01    </p><p>node01  为指定虚拟机器的别名，在hosts文件中配置的</p></blockquote><p>启动Tomcat</p><blockquote><p>在Tomcat解压的目录下       ./startup.sh  </p></blockquote><p>注意： 记得关闭虚拟机器的防火墙</p><blockquote><p>service  iptables  stop</p></blockquote><p>浏览器访问</p><blockquote><p>虚拟机器IP地址：8080</p></blockquote><p><strong>默认负载均衡配置</strong>（轮询）</p><blockquote><pre><code>http &amp;#123;    upstream shsxt&amp;#123;       # 以下均为实际执行服务的服务器    #只有当hosts文件中给ip地址配置了别名，这里server后面才能用别名，    #否则跟IP地址        server node01;         server node02;     &amp;#125;     server &amp;#123;     #指定访问端口为80 ，那么Tomcat服务器端的port也要改为80        listen 80;           server_name  localhost;        location / &amp;#123;            proxy_pass http://shsxt;                # shsxt  是指定的代理服务器        &amp;#125;    &amp;#125; &amp;#125;</code></pre></blockquote><p>查看使用 80端口的程序</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">netstat -anp |grep 80<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>配置文件编辑结束后，启动nginx服务</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">service  nginx  start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="（1）轮询负载均衡（默认）"><a href="#（1）轮询负载均衡（默认）" class="headerlink" title="（1）轮询负载均衡（默认）"></a>（1）轮询负载均衡（默认）</h4><pre><code> - 对应用程序服务器的请求以循环方式分发</code></pre><h4 id="（2）加权负载均衡"><a href="#（2）加权负载均衡" class="headerlink" title="（2）加权负载均衡"></a>（2）加权负载均衡</h4><blockquote><p>通过使用服务器权重，还可以进一步影响nginx负载均衡算法，</p><p>谁的权重越大，分发到的请求就越多。</p><p>权重总数：10</p></blockquote><p>在nginx.conf文件中修改：</p><pre><code> upstream shsxt &amp;#123;        server node01 weight=3;//域名为在/etc/hosts文件中取的别名        server node02;        server node03;  &amp;#125;</code></pre><p>配置修改之后，重启</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">service  nginx  restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="（3）最少连接负载平衡"><a href="#（3）最少连接负载平衡" class="headerlink" title="（3）最少连接负载平衡"></a>（3）最少连接负载平衡</h4><blockquote><p>在连接负载最少的情况下，nginx会尽量避免将过多的请求分发给繁忙的应用程序服务器，</p><p>而是将新请求分发给不太繁忙的服务器，避免服务器过载。</p></blockquote><p>在nginx.conf文件中修改：</p><pre><code>upstream shsxt &amp;#123;        least_conn;        server node00;        server node01;        server node02;    &amp;#125;</code></pre><h4 id="（4）保持会话持久性——ip-hash负载平衡机制"><a href="#（4）保持会话持久性——ip-hash负载平衡机制" class="headerlink" title="（4）保持会话持久性——ip-hash负载平衡机制"></a>（4）保持会话持久性——ip-hash负载平衡机制</h4><p><code>特点</code>：保证相同的客户端总是定向到相同的服务;</p><p>(此方法可确保来自同一客户端的请求将始终定向到同一台服务器，除非此服务器不可用。)</p><p>在nginx.conf文件中修改：</p><pre><code>upstream shsxt&amp;#123;    ip_hash;    server （IP地址|别名）;    server （IP地址|别名）;    server （IP地址|别名）;&amp;#125;</code></pre><h4 id="（5）Nginx的访问控制"><a href="#（5）Nginx的访问控制" class="headerlink" title="（5）Nginx的访问控制"></a>（5）Nginx的访问控制</h4><blockquote><p>Nginx还可以对IP的访问进行控制，allow代表允许，deny代表禁止.</p></blockquote><pre><code>location / &amp;#123;deny 192.168.2.180;allow 192.168.78.0/24;allow 10.1.1.0/16;allow 192.168.1.0/32;deny all;proxy_pass http://shsxt;&amp;#125;</code></pre><pre><code>从上到下的顺序，匹配到了便跳出。如上的例子先禁止了1个，接下来允许了3个网段，其中包含了一个ipv6，最后未匹配的IP全部禁止访问</code></pre>]]></content>
      
      
      <categories>
          
          <category> 负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据思想</title>
      <link href="/2018/12/30/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%80%9D%E6%83%B3/"/>
      <url>/2018/12/30/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="1、大数据核心问题："><a href="#1、大数据核心问题：" class="headerlink" title="1、大数据核心问题："></a>1、大数据核心问题：</h3><p>==海量数据、工业技术落后、硬件损坏常态化（Ctrl+M）==</p><h3 id="2、大数据思维"><a href="#2、大数据思维" class="headerlink" title="2、大数据思维"></a>2、大数据思维</h3><p><strong>分而治之</strong></p><blockquote><p>把一个复杂的问题按一定的“分解”方法分为等价的规模较小的若干部分，然后逐个解决，然后分别找出各部分的中间结果，最后将各个部分的中间结果组成整个问题的最终结果（Ctrl+Q）</p></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fyw9d7pkpij30pr0eut99.jpg" alt="enter description here"></p><h3 id="3、业务场景"><a href="#3、业务场景" class="headerlink" title="3、业务场景"></a>3、业务场景</h3><p>仓储、数牌</p><h4 id="业务一：找-重复行-chongfuhang"><a href="#业务一：找-重复行-chongfuhang" class="headerlink" title="业务一：找{重复行}(chongfuhang)"></a><strong>业务一：找{重复行}(chongfuhang)</strong></h4><p><em>++现有1TB的TXT文件 ;<br>格式：数字+字符 ；<br>网速：500M/s ；<br>服务器内存大小：128M ；<br>条件：仅有两行重复 ，内存不能放下全量数据（OM：out of memery）；++</em></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fyw9cu9psdj30ht0a1wf1.jpg" alt="enter description here"></p><p><strong>==方法==</strong></p><p> 答：共需要2次IO：2*30min=1h</p><p>==第一次IO==：</p><ol><li>给*<code>每一行内容加上唯一标记（hashcode（内容），value（行号））</code>*。<br>对每一行内容进行hash运算，得到唯一标识hashcode，作为key，将行号作为value。然而，对于内容完全重复的两行，其hashcode值一定相同。</li><li>*<code>对每一行的hash值进行取模运算，并放置于归类分区的小文件中*</code>。<br>由于数据基数过大，就将每行的key值对取模，转化为小文件，如将hash值对100取模，则产生100个小文件分区，取模后相同的放在同一个分区中。</li></ol><p>==第二次IO==：<br> 3. 在每个分区中的小文件遍历，对每一行进行比较，因为重复行一定会在同一个分区中。这样工作量就会大大减小。</p><h4 id="业务二：快-排序-paixu"><a href="#业务二：快-排序-paixu" class="headerlink" title="业务二：快{排序}(paixu)"></a><strong>业务二：快{排序}(paixu)</strong></h4><p><em>++现有1TB的TXT文件 ;<br>格式：数字；<br>网速：500M/s ；<br>服务器内存大小：128M ；<br>条件：实现快排序，内存不能放下全量数据（OM：out of memery）；++</em></p><p>两次IO，2 * 30分钟 = 1小时</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fyw9dek3xtj30pr0eu758.jpg" alt="enter description here"></p><p><strong>==方法一：先全局有序后局部有序==</strong></p><p> 1.对全局按分区排序（由大到小）。<br>​    用if。。else方法对数据进行按范围分类，落到不同的分区中（0<del>1000、1001</del>2000、2001~3000··················）<br> 2.对局部进行排序（由大到小）。<br>​    对每个分区进行排序。</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1fyw9dj82b6j30pr0ewdgm.jpg" alt="enter description here"></p><p><strong>==方法二：先局部有序后全局有序==</strong></p><ol><li>先实现局部有序(小–&gt;大)。<br>将文件划分为N个分区，在每个分区内部进行排序</li><li>使用归并实现全局有序。<br>每个分区分别各自取出最小值，拿出来比较，最小值放在一旁，最小值所在的那个分区再拿出剩下数据中的最小值，再进行比较，比较出的最小值，排在上一次的最小值后，依次进行下去，这样就实现了全局有序。</li></ol><p><img src="./images/%E5%9D%9A%E6%8C%81_1.jpg" alt="知否"></p>]]></content>
      
      
      <categories>
          
          <category> 头脑风暴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分而治之 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Linux命令的学习（三）</title>
      <link href="/2018/12/29/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A03/"/>
      <url>/2018/12/29/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A03/</url>
      
        <content type="html"><![CDATA[<h2 id="一、服务操作"><a href="#一、服务操作" class="headerlink" title="一、服务操作"></a>一、服务操作</h2><table><thead><tr><th>列出  所有  服务</th><th>chkconfig   <br>查询操作系统在每一个执行等级中会执行哪些系统服务，其中包括各类常驻服务。</th></tr></thead><tbody><tr><td>服务  操作</td><td>仅适用于当前    ：service 服务名 start|stop|status|restart   <br>防火墙的服务名为：iptables   <br>service iptables  status|start|stop|restart   查看状态|开启|关闭|重启                                                                                                                                   永久关闭|打开  ：（重启后生效） chkconfig iptables on|off<br>注意：学习期间直接把防火墙关掉就是，工作期间也是运维人员来负责防火墙的。</td></tr><tr><td>添加  服务</td><td>1)    编辑脚本：vim myservice.sh                                                                                                                  编辑内容：                                                                                                                                                              （在最前面加一下两句）                                                                                                                              #chkconfig:   2345 80 90                                                                                                      #description:auto_run                                                                                                                                           (自己的服务脚本：开机时同步时间）                                                                                                           result=’ntpdate cn.ntp.org.cn’                                                                                                                                 退出编辑并保存：按esc键 按 ：wq                                                                                                                                                在ntpdate.log文件中输出打印：echo $result &gt; /usr/ntpdate.log                                                                                   2)    修改权限，使其拥有可执行权限:   chmod 700 myservice.sh                                                                3)    将脚本拷贝到/etc/init.d目录：                                                                                                                        4)    加入服务：chkconfig –add myservice.sh                                                                                                      5)    重启服务器，验证服务是否添加成功：date                                                                                          6）/usr目录下产生ntpdate.log</td></tr><tr><td>删除  服务</td><td>chkconfig –del name</td></tr><tr><td>更改  服务初   执行  等级</td><td>chkconfig –level 2345 服务名 off|on   <br><br>若不加级别，默认是2345级别                                                                                                   chkconfig 服务名 on|of f</td></tr></tbody></table><blockquote><p>各数字代表的系统初始化级别含义：</p><p>​    0：停机状态</p><p>　　1：单用户模式，root账户进行操作</p><p>　　2：多用户，不能使用net file system，一般很少用</p><p>　　3：完全多用户，一部分启动，一部分不启动，命令行界面</p><p>　　4：未使用、未定义的保留模式</p><p>　　5：图形化，3级别中启动的进程都启动，并且会启动一部分图形界面进程。</p><p>　　6：停止所有进程，卸载文件系统，重新启动(reboot)</p><p>　　这些级别中1、2、4很少用，相对而言0、3、5、6用的会较多。3级别和5级别除了桌面相关的进程外没有什么区别。为了减少资源占用，推荐都用3级别.</p><p>注意 ：linux默认级别为3，不要把/etc/inittab 中initdefault 设置为0 和 6 </p></blockquote><h2 id="二、定时调度"><a href="#二、定时调度" class="headerlink" title="二、定时调度"></a>二、定时调度</h2><table><thead><tr><th>编辑定时任务</th><th>crontab –e                                                                                                                                                           格式：minute hour day month dayofweek command</th></tr></thead><tbody><tr><td>举例</td><td>* * * * *  echo  “hello”                                                                                                                                       每分钟打印“hello”</td></tr><tr><td>时间  一到，                执行  操作  命令后</td><td>会出现：You have new mail in /var/spool/mail/root</td></tr><tr><td>查看任务执行情况</td><td>vim /var/spool/mail/root</td></tr><tr><td>查看所有用户的定时任务</td><td>ll /var/spool/cron</td></tr><tr><td>查看当前用户的定时任务</td><td>contab –l</td></tr><tr><td><em>注意</em></td><td>“*”代表任意的数字, “/”代表”每隔多久”,                                                                                                           “-”代表从某个数字到某个数字, “,”分开几个离散的数字                                                                                                                    如：                                                                                                                                                                           30-40 12 * * * echo “hello”                                                                                                                                         ——–每天12点30分至40分期间，每分钟执行一次命令                                                                                      30,40                                                                                                                                                                                     ——–每天12点30分和12点40分                                                                                                                            0/5                                                                                                                                                                                 ——–每天的12点整至12点55分期间，每隔5分钟执行一次命令</td></tr></tbody></table><h2 id="三、进程操作"><a href="#三、进程操作" class="headerlink" title="三、进程操作"></a>三、进程操作</h2><table><thead><tr><th>查看  进程</th><th>ps  -aux                                                                                                                                                                           -a 列出所有           -u 列出用户   -x 详细列出，如cpu、内存等                                                                                       -e 显示所有进程    -f 全格式                                                                                                                                     ps  - ef  | grep ssh   查看所有进程里CMD是ssh 的进程信息  ，进程号（PID）                                                                                  ps -aux –sort –pcpu   根据 CPU 使用来升序排序</th></tr></thead><tbody><tr><td>使程序   后台  运行</td><td>只需要在命令后添加  &amp; 符号                                                                                                                            echo “hello” &amp;   jobs –l      –列出当前连接的所有后台进程（jobs仅适用于当前端）                                                   ps  -ef | grep 进程名          —-（推荐）列出后台进程</td></tr><tr><td>杀死    进程</td><td>（强制）kill -9 pid   <br>ps 命令先查出对应程序的PID或PPID ，然后杀死掉进程</td></tr></tbody></table><h2 id="四、其他命令"><a href="#四、其他命令" class="headerlink" title="四、其他命令"></a>四、其他命令</h2><table><thead><tr><th>wget</th><th>1）   安装：yum install wget  –y                                                                                                        2）   用法：wget [option] 网址  -O  指定下载保存的路径                                                                                          3）   More Actions一个从网络上自动下载文件的自由工具；<br>支持通过 HTTP、HTTPS、FTP 三个最常见的 TCP/IP协议，可以使用 HTTP 代理；<br>也可用于做爬虫<br>4）举例：wget  <a href="http://www.baidu.com/">www.baidu.com</a>  -O baidu.html</th></tr></thead><tbody><tr><td>yum</td><td>1）   备份原镜像：                                                                                                                                                   cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOSBase.repo.backup                                                                                 2）   下载新镜像：                                                                                                                                         <strong>wget</strong> -O /etc/yum.repos.d/CentOS-Base.repo      <a href="http://mirrors.aliyun.com/repo/Centos-6.repo">http://mirrors.aliyun.com/repo/Centos-6.repo</a>                                                                                                                                                                             3）  查看文件内容：vim /etc/yum.repos.d/CentOS-Base.repo                                                                      4）  生成缓存：yum makecache<br>5）查看当前源:yum list |head -50</td></tr><tr><td>rpm</td><td>yum list | head -501）   安装 rpm –ivh rpm包                                                                                                                                       2）   查找已安装的rpm包：rpm –q ntp                                                                                                                  3）   卸载：rpm –e ntp-4.2.6p5-10.el6.centos.2.x86_64（全名）</td></tr><tr><td>tar</td><td>1）   解压：tar  -zvxf  xxxx.tar.gz                                                                                                                             2）   压缩：tar -zcf 压缩包命名 压缩目标                                                                                             3）   例子：tar -zcf tomcat.tar.gz apache-tomcat-7.0.61                                                                                4）   -z   gzip进行解压或压缩，带.gz需要加，压缩出来.gz也需要加                                                                                  *       -x  解压  -c  压缩   -f   目标文件，压缩文件新命名或解压文件名                                                                                       *       -v  解压缩过程信息打印</td></tr><tr><td>zip</td><td>1）  安装zip：yum install zip –y                                                                                                                          2）  压缩命令：zip   -r 包名 目标目录                                                                                                              3）  安装 ：unzip,yum   install unzip –y                                                                                                              4）  解压  ：unzip   filename</td></tr></tbody></table><h2 id="五、安装部署"><a href="#五、安装部署" class="headerlink" title="五、安装部署"></a>五、安装部署</h2><h3 id="JDK-部署"><a href="#JDK-部署" class="headerlink" title="JDK 部署"></a>JDK 部署</h3><pre class="line-numbers language-shell"><code class="language-shell"> 1)     解压: tar -zxf jdk-7u80-linux-x64.tar.gz                                        2)     配置环境变量                                                                            编辑配置文件：vim /etc/profile                                                          编辑内容 ：                                                                            JAVA_HOME= /usr/soft/jdk1.7.0_75                                                      PATH=$PATH:$JAVA_HOME/bin                                                     3)     重新加载环境变量：source  /etc/profile                                           4)     验证: java  -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="mysql部署"><a href="#mysql部署" class="headerlink" title="mysql部署"></a>mysql部署</h3><pre class="line-numbers language-shell"><code class="language-shell">yum安装 mysql                                                                         1)   yum install mysql-server -y                                                     2)   yum install mysql-devel -y                                                       3)   service mysqld start                                                             4)   mysql -uroot -p                                                                 5)   mysqladmin -u root  password 123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Tomcat部署"><a href="#Tomcat部署" class="headerlink" title="Tomcat部署"></a>Tomcat部署</h3><pre class="line-numbers language-shell"><code class="language-shell">1)下载tomcat:http://tomcat.apache.org/2)启动tomcat在tomcat的bin目录下有个startup.sh 脚本可以直接启动tomcat服务3)关闭tomcat服务，可以用shutdown.sh命令或者ps -ef | grep tomcat 查看出tomcat进程号后，用kill命令。4)jps查看系统当前运行在jvm上的进程情况jps是JDK1.5提供的一个显示当前所有java进程pid的命令，简单实用，非常适合在linux/unix平台上简单察看当前java进程的一些简单情况。Bootstrap是tomcat的进程名字，后面跟的是它的PID5）验证先把防火墙关了（service iptables stop），然后浏览器端访问虚拟机IP的8080端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><pre class="line-numbers language-shell"><code class="language-shell">修改配置：1)网卡ip     /etc/sysconfig/network-sr…/ifcfg-eth0 2)hostname   /etc/sysconfig/network3)删除网络规则 rm -rf /etc/udev/rules.d/70--….-net.rules4)重启生效 reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、免密登录"><a href="#六、免密登录" class="headerlink" title="六、免密登录"></a>六、免密登录</h2><h3 id="1、工作原理："><a href="#1、工作原理：" class="headerlink" title="1、工作原理："></a>1、工作原理：</h3><blockquote><p>1.Server A向Server B发送一个连接请求。<br> 2.Server B得到Server A的信息后，在本地的authorized_keys文件中查找A存放在B上的公钥，如果有相应的公钥，则随机生成一个字符串，并用Server A的公钥加密，接着发送给Server A。<br> 3.Server A得到Server B发来的消息后，使用私钥进行解密，然后将解密后的字符串发送给Server B。Server B用原来随机生成的字符串和A发过来的字符串进行对比，如果一致，则允许免登录。<br> 总结：A要免密码登录到B，B首先要拥有A的公钥，然后B要做一次加密验证。对于非对称加密，公钥加密的密文不能公钥解开，只能私钥解开。</p></blockquote><h3 id="2、方法一："><a href="#2、方法一：" class="headerlink" title="2、方法一："></a>2、方法一：</h3><p> 1）   生成公钥和密钥：</p><p>命令：</p><pre class="line-numbers language-shell"><code class="language-shell">ssh-keygen -t rsa <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且回车3次                                                                                                  </p><p>（在用户的root目录生成一个 “.ssh”的文件夹）                                                                                                                 2）   查看公钥和私钥：</p><pre class="line-numbers language-shell"><code class="language-shell">ll ~/.ssh        <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（目录中会有以下几个文件）                                                                                                                         <code>authorized_keys</code>:存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥                                                 <code>id_rsa</code> : 生成的私钥文件                                                                                                                              <code>id_rsa.pub</code> ： 生成的公钥文件                                                                                                                                        <code>know_hosts</code> : 已知的主机公钥清单                                                                                                                                                       *                        如果希望ssh公钥生效需满足至少下面两个条件：                                                                                                  *                        1&gt; .ssh目录的权限必须是700                                                                                                                                *                        2&gt; .ssh/authorized_keys文件权限必须是600     </p><p>3）   将A的.ssh目录下的公钥追加拷贝到B的authorized_keys文件里     </p><ul><li>法一：</li></ul><pre class="line-numbers language-shell"><code class="language-shell"> scp -p ~/.ssh/id_rsa.pub root@<remote_ip>:/root/.ssh/authorized_keys        <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@test .ssh]# scp -p ~/.ssh/id_rsa.pub root@192.168.91.135:/root/.ssh/authorized_keysroot@192.168.91.135's password: id_rsa.pub 100% 408 0.4KB/s 00:00 [root@test .ssh]# [root@test .ssh]# [root@test .ssh]# [root@test .ssh]# ssh root@192.168.91.135Last login: Mon Oct 10 01:27:02 2016 from 192.168.91.133[root@localhost ~]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>法二：　分为两步操作：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">$ scp ~/.ssh/id_rsa.pub root@<remote_ip>:pub_key //将文件拷贝至远程服务器$ cat ~/pub_key >>~/.ssh/authorized_keys //将内容追加到authorized_keys文件中， 不过要登录远程服务器来执行这条命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>法三：手动复制：如果有多台节点时：A  →  B</p><p> &lt; 1、拷贝A的.ssh目录下的公钥：</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">vim id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   &lt;2、将A的公钥复制好后，在主机B上的~/.ssh目录下，创建并编辑authorized_keys文件，接着黏贴进去。</p><pre class="line-numbers language-shell"><code class="language-shell">vim authorized_keys <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>验证：</li></ol><p>用Scp远程拷贝命令，在A主机上随便拷贝一份文件到B主机上，如果不需要密码，则说明免密码登录配置成功。</p><h3 id="3、方法二：-通过ssh-copy-id的方式"><a href="#3、方法二：-通过ssh-copy-id的方式" class="headerlink" title="3、方法二： 通过ssh-copy-id的方式"></a>3、方法二： <strong>通过ssh-copy-id的方式</strong></h3><p>前提：公钥和私钥已经生成</p><p>命令：</p><pre class="line-numbers language-shell"><code class="language-shell">ssh-copy-id -i ~/.ssh/id_rsa.pub <romte_ip><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">[root@test .ssh]# ssh-copy-id -i ~/.ssh/id_rsa.pub 192.168.91.135 root@192.168.91.135's password: Now try logging into the machine, with "ssh '192.168.91.135'", and check in:.ssh/authorized_keysto make sure we haven't added extra keys that you weren't expecting.[root@test .ssh]# ssh root@192.168.91.135Last login: Mon Oct 10 01:25:49 2016 from 192.168.91.133[root@localhost ~]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>常见错误：</p><blockquote><p>　[root@test ~]# ssh-copy-id -i ~/.ssh/id_rsa.pub 192.168.91.135</p><p>　-bash: ssh-copy-id: command not found //提示命令不存在</p><p>　解决办法：yum -y install openssh-clients</p></blockquote><h3 id="4、（此方法有待考究）法三："><a href="#4、（此方法有待考究）法三：" class="headerlink" title="4、（此方法有待考究）法三："></a>4、（<strong>此方法有待考究）</strong>法三：</h3><p>通过Ansible实现   批量   免密                                                                                                                   </p><p>   1）、 <strong>将需要做免密操作的机器hosts添加到/etc/ansible/hosts下：</strong>                                                                                             </p><pre><code>  [Avoid close]   192.168.91.132　　192.168.91.133　　192.168.91.134   </code></pre><p>​      2）、 <strong>执行命令进行免密操作</strong>  ：​                 </p><pre><code>ansible &lt;groupname&gt; -m authorized_key -a &quot;user=root key=&#39;&amp;#123;&amp;#123; lookup(&#39;file&#39;,&#39;/root/.ssh/id_rsa.pub&#39;) &amp;#125;&amp;#125;&#39;&quot; -k </code></pre><p>​                                                                                                                                                                                                                                                                                                                                             示例：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@test sshpass-1.05]# ansible test -m authorized_key -a "user=root key='&#123;&#123; lookup('file','/root/.ssh/id_rsa.pub') &#125;&#125;'" -k　　SSH password: ----->输入密码　　192.168.91.135 | success >> &#123;　　"changed": true, 　　"key": "ssh-rsa 　　 AAAAB3NzaC1yc2EAAAABIwAAAQEArZI4kxlYuw7j1nt5ueIpTPWfGBJoZ8Mb02OJHR8yGW7A3izwT3/uhkK7RkaGavBbAlprp5bxp3i0TyNxa/apBQG5NiqhYO8YCuiGYGsQAGwZCBlNLF3gq1/18B6FV5moE/8yTbFA4dBQahdtVP PejLlSAbb5ZoGK8AtLlcRq49IENoXB99tnFVn3gMM0aX24ido1ZF9RfRWzfYF7bVsLsrIiMPmVNe5KaGL9kZ0svzoZ708yjWQQCEYWp0m+sODbtGPC34HMGAHjFlsC/SJffLuT/ug/hhCJUYeExHIkJF8OyvfC6DeF7ArI6zdKER7D8M0SM　　WQmpKUltj2nltuv3w== root@localhost.localdomain", 　　"key_options": null, 　　"keyfile": "/root/.ssh/authorized_keys", 　　"manage_dir": true, 　　"path": null, 　　"state": "present", 　　"unique": false, 　　"user": "root"　　&#125;　　[root@test sshpass-1.05]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Linux命令的学习（二）</title>
      <link href="/2018/12/28/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A02/"/>
      <url>/2018/12/28/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h2 id="一、磁盘指令"><a href="#一、磁盘指令" class="headerlink" title="一、磁盘指令"></a>一、磁盘指令</h2><h3 id="1、查看硬盘信息"><a href="#1、查看硬盘信息" class="headerlink" title="1、查看硬盘信息"></a>1、查看硬盘信息</h3><!---more--><blockquote><p>命令：df</p></blockquote><p><code>（默认大小以kb显示） df -k（以kb为单位） df -m（ 以mb为单位） df –h （易于阅读） </code></p><h3 id="2、查看文件-目录的大小"><a href="#2、查看文件-目录的大小" class="headerlink" title="2、查看文件/目录的大小"></a>2、查看文件/目录的大小</h3><blockquote><p>命令：du filename|foldername</p></blockquote><p><code> （默认单位为kb）-k    kb单位 -m    mb单位 -a 所有文件和目录  -h 更易于阅读 ​    --max-depth=0    目录深度</code></p><h2 id="二、网络指令"><a href="#二、网络指令" class="headerlink" title="二、网络指令"></a>二、网络指令</h2><h3 id="1、查看网络配置信息"><a href="#1、查看网络配置信息" class="headerlink" title="1、查看网络配置信息"></a>1、查看网络配置信息</h3><blockquote><pre class="line-numbers language-shell"><code class="language-shell">命令:ifconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15t5lxs9oj30fe07fmzk.jpg"></p><blockquote><p>箭头1指向的是本机IP，箭头2为广播地址，箭头3位子网掩码。</p></blockquote><h3 id="2、测试与目标主机的连通性"><a href="#2、测试与目标主机的连通性" class="headerlink" title="2、测试与目标主机的连通性"></a>2、测试与目标主机的连通性</h3><blockquote><p>命令：ping remote_ip     </p></blockquote><p><code>ctrl + c :结束ping进程</code></p><p>可以ping通Windows系统的IP</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15t87brh1j30fe04675r.jpg"></p><p>输入ping 192.168.78.192代表测试本机和192主机的网络情况，</p><p>箭头1表示一共接收到了3个包，箭头2表示丢包率为0，表示两者之间的网络顺畅。</p><p>注意：linux系统的ping命令会一直发送数据包，进行测试，除非认为的按ctrl + c停止掉，</p><p>​           windows系统默认只会发4个包进行测试，以下为windows的dos命令。</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15t9ie02zj30fe07vq5g.jpg"></p><h3 id="3、显示各种网络相关信息"><a href="#3、显示各种网络相关信息" class="headerlink" title="3、显示各种网络相关信息"></a>3、显示各种网络相关信息</h3><blockquote><p>命令：</p><pre class="line-numbers language-shell"><code class="language-shell">netstat -anpt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre><code>-a (all)显示所有选项，默认不显示LISTEN相关-t (tcp)仅显示tcp相关选项-u (udp)仅显示udp相关选项-n 拒绝显示别名，能显示数字的全部转化成数字。-l 仅列出有在 Listen (监听) 的服務状态-p 显示建立相关链接的程序名-r 显示路由信息，路由表-e 显示扩展信息，例如uid等-s 按各个协议进行统计-c 每隔一个固定时间，执行该netstat命令。提示：LISTEN和LISTENING的状态只有用-a或者-l才能看到</code></pre><p><code>查看端口号（是否被占用） (1)、lsof -i:端口号  （需要先安装lsof） (2)、netstat -tunlp|grep 端口号</code></p><h3 id="4、测试远程主机的网络端口"><a href="#4、测试远程主机的网络端口" class="headerlink" title="4、测试远程主机的网络端口"></a>4、测试远程主机的网络端口</h3><p>安装telnet:</p><pre class="line-numbers language-shell"><code class="language-shell">yum install telnet -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看本机能否连上远程主机的端口号:</p><pre class="line-numbers language-shell"><code class="language-shell"> telnet ip  port   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15tfzb6xtj30dv02y74u.jpg"></p><p><code>测试成功后，按ctrl + ] 键，然后弹出telnet&gt;时，再按q退出</code></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15tgyzcthj30fa04m3zb.jpg"></p><h3 id="5、http请求模拟"><a href="#5、http请求模拟" class="headerlink" title="5、http请求模拟"></a>5、http请求模拟</h3><pre class="line-numbers language-shell"><code class="language-shell">命令: curl  [option]  [url]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例：</p><p> 模拟请求百度</p><pre class="line-numbers language-shell"><code class="language-shell">curl -X get www.baidu.com  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>用法解释：</p><p>-X/–request [GET|POST|PUT|DELETE|…]  使用指定的http method发出 http request</p><p>-H/–header               设定request里的header</p><p>-i/–include              显示response的header</p><p>-d/–data                  设定 http parameters </p><p>-v/–verbose               输出比较多的信息</p><p>-u/–user                  使用者账号，密码</p><p>-b/–cookie                cookie</p></blockquote><p>参数-X跟–request兩个功能是一样的 </p><p>举例：</p><pre class="line-numbers language-shell"><code class="language-shell">curl -X GET http://www.baidu.com/  curl --request GET http://www.baidu.com/ curl -X GET "http://www.rest.com/api/users"curl -X POST "http://www.rest.com/api/users"curl -X PUT "http://www.rest.com/api/users"curl -X DELETE "http://www.rest.com/api/users"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、系统管理指令"><a href="#三、系统管理指令" class="headerlink" title="三、系统管理指令"></a>三、系统管理指令</h2><h3 id="1、用户操作"><a href="#1、用户操作" class="headerlink" title="1、用户操作"></a>1、用户操作</h3><pre><code>     操作                命令    创建用户           useradd|adduser username    修改密码           passwd username    删除用户           userdel –r username    修改用户（已下线）：                         修改用户名: usermod –l new_name oldname                     锁定账户: usermod –L username                     解除账户： usermod –U username    查看当前登录用户    仅root 用户：whoami   | cat /etc/shadow                     普通用户：cat /etc/pqsswd</code></pre><h3 id="2、用户组操作"><a href="#2、用户组操作" class="headerlink" title="2、用户组操作"></a>2、用户组操作</h3><pre><code>      操作                命令      创建用户组             groupadd groupname      删除用户组             groupdel groupname      修改用户组             groupmod –n new_name old_name      查看用户组             groups  （查看的是当前用户所在的用户组）</code></pre><h3 id="3、用户-用户组"><a href="#3、用户-用户组" class="headerlink" title="3、用户+用户组"></a>3、用户+用户组</h3><pre><code>      操作                    命令    修改用户的主组             usermod –g groupname username    给用户追加附加组        usermod –G groupname username    查看用户组中用户数       cat /etc/group    注意：创建用户时，系统默认会创建一个和用户名字一样的主组</code></pre><h3 id="4、系统权限"><a href="#4、系统权限" class="headerlink" title="4、系统权限"></a>4、系统权限</h3><pre><code>     操作                         命令  查看/usr下所有权限       ll /usr                        权限类别    r（读取：4） w（写入：2） x（执行：1）                         三个为一组，无权限用 —代替                        UGO模型    U（User） G(Group)  O(其他)    权限修改                              修改所有者：chown username file|folder                      (递归)修改所有者和所属组： chown -r username：groupname file|folder                       修改所属组：chgrp groupname file|folder                      修改权限：chmod ugo+rwx file|folder</code></pre><h2 id="四、系统配置指令"><a href="#四、系统配置指令" class="headerlink" title="四、系统配置指令"></a>四、系统配置指令</h2><h3 id="0-1环境变量"><a href="#0-1环境变量" class="headerlink" title="0.1环境变量"></a>0.1环境变量</h3><p>全局变量、局部变量</p><p>首先考虑一个问题，为什么我们先前敲的yum, service,date,useradd等等，可以直接使用，系统怎么知道这些命令对应的程序是放在哪里的呢？</p><p>这是由于无论是windows系统还是linux系统，都有一个叫做path的系统环境变量，当我们在敲命令时，系统会到path对应的目录下寻找，找到的话就会执行，找不到就会报没有这个命令。如下图：</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15ufak65qj309u031wf0.jpg"></p><p>配置系统环境变量，使得某些命令在执行时，系统可以找到命令对应的执行程序，命令才能正常执行。</p><p>我们可以查看一下，系统一共在哪些目录里寻找命令对应的程序。</p><p>命令：</p><pre class="line-numbers language-shell"><code class="language-shell">echo $PATH<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15uidckb9j30fe01amxd.jpg"></p><p> 可以看到path里有很多路径，路径之间有冒号隔开。当用户敲命令时，系统会从左往右依次寻找对应的程序，有的话则运行该程序，没有的就报错，command not found.</p><p>配置全局环境变量：</p><blockquote><pre class="line-numbers language-shell"><code class="language-shell">vim  /etc/profile  #全局环境变量所在的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件中：</p><p>PATH=$PATH:(命令所在目录)</p><p>退出文件编辑后：</p><p>source  /etc/profile  </p><p> (重新加载资源，有的可能需要重启机器，这不适用于实际状况)</p></blockquote><p>配置局部环境变量：（推荐，限当前登录用户使用）</p><blockquote><p>查看所有文件(root目录下)</p><p>ls  -a    (发现隐藏文件    .bash.profile)</p><pre class="line-numbers language-shell"><code class="language-shell">vim  ~/ bash_profile   #局部变量所在的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件中：</p><p>export  PATH =$PATH:(命令所在目录)</p></blockquote><h3 id="0-2脚本运行"><a href="#0-2脚本运行" class="headerlink" title="0.2脚本运行"></a>0.2脚本运行</h3><p>编辑脚本：</p><pre class="line-numbers language-shell"><code class="language-shell">vim test.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>脚本内容：</p><pre class="line-numbers language-shell"><code class="language-shell">#！/bin/shecho " hello test sh"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>给脚本添加权限：</p><pre class="line-numbers language-shell"><code class="language-shell">chmod 700 test.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行：</p><pre class="line-numbers language-shell"><code class="language-shell">一种是到脚本的目录下执行：运行命令 ： ./test.sh  ,代表执行当前目录里的脚本test.sh一种是敲脚本的绝对路径：运行命令 ：/usr/test/test.sh第三种方式添加到环境变量中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上两种运行方式都不是很简便，因为先前我们执行yum service命令等，都是直接敲对应的命令的。所以我们也可以参照这样子做，只要我们配一个环境变量就好。</p><p>编辑环境变量：</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将test.sh 所在路径放到path后面即可</p><p>编辑完之后，执行命令，</p><pre class="line-numbers language-shell"><code class="language-shell">source /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新加载环境变量，此时会发现PATH路径多了一个/usr/test。</p><p>最后验证一下，直接执行test.sh</p><h3 id="1-修改主机名"><a href="#1-修改主机名" class="headerlink" title="1.修改主机名"></a>1.修改主机名</h3><pre class="line-numbers language-text"><code class="language-text">    编辑文件：      命令： vim /etc/sysconfig/network    文件内容：      HOSTNAME=node00  （重启生效)reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-DNS配置"><a href="#2-DNS配置" class="headerlink" title="2.DNS配置:"></a>2.DNS配置:</h3><p> /etc/resolv.conf 为DNS服务器的地址文件</p><pre><code>查看DNS服务器的地址：  cat /etc/resolv.conf修改DNS服务器地址：  法一：编辑文件：   vim  /etc/sysconfig/network.scripts/ifconfig-eth0在配置网关时，配置DNS1=114.114.114.114（不推荐，江苏南京的IP）法二：编辑文件：     vim /etc/resolv.conf文件内容：（用本地网关解析）     nameserver 192.168.198.0( 此为虚拟机中的网关地址)</code></pre><h3 id="3-sudo权限配置"><a href="#3-sudo权限配置" class="headerlink" title="3.sudo权限配置"></a>3.sudo权限配置</h3><pre><code>   操作             命令编辑权限配置文件：    vim /etc/sudoers格式：        授权用户 主机=[(切换到哪些用户或用户组)] [是否需要密码验证] 路径/命令举例：        test  ALL=(root)  /usr/bin/yum,/sbin/service解释：        test用户就可以用yum和servie命令，       但是，使用时需要在前面加上sudo再敲命令。       第一次使用需要输入用户密码,且每个十五分钟需要一次密码验证修改：       test ALL=(root) NOPASSWD: /usr/bin/yum,/sbin/service这样就不需要密码了将权限赋予某个组，%+组名%group ALL=(root) NOPASSWD: /usr/bin/yum,/sbin/service列出用户所有的sudo权限       sudo –l</code></pre><h3 id="4-系统时间"><a href="#4-系统时间" class="headerlink" title="4.系统时间"></a>4.系统时间</h3><pre><code>操作                 命令查看系统时间          date           ---查看当前时间详情                                                       cal            ---查看当前月日历                    cal 2018       ---查看2018年完整日历                    cal 12 2018    ---查看指定年月的日历       更新系统时间（推荐）   yum install ntpdate –y    ---安装ntp服务                    ntpdate cn.ntp.org.cn   ---到域名为cn.ntp.org.cn的时间服务器上同步时间</code></pre><p> 5.关于hosts配置</p><p>相当于给IP地址其别名，可以通过别名访问</p><table><thead><tr><th></th><th>路径：</th></tr></thead><tbody><tr><td>Windows系统</td><td><strong>C:/Windows/System32/drivers/etc/hosts</strong> <strong>文件</strong></td></tr><tr><td>Linux系统</td><td><strong>/etc/hosts</strong>文件：<strong>vim</strong>  +路径</td></tr><tr><td>统一 编辑格式</td><td><strong>IP</strong>地址  别名：192.168.198.128    node00</td></tr></tbody></table><h3 id="6-关于hostname配置"><a href="#6-关于hostname配置" class="headerlink" title="6.关于hostname配置"></a>6.关于hostname配置</h3><p>相当于给对应的虚拟机器起别名</p><table><thead><tr><th>Linux系统：</th><th><strong>vi /etc/sysconfig/network</strong></th></tr></thead><tbody><tr><td>编辑内容：</td><td><strong>HOSTNAME=node01</strong></td></tr></tbody></table><h2 id="五、重定向与管道符"><a href="#五、重定向与管道符" class="headerlink" title="五、重定向与管道符"></a>五、重定向与管道符</h2><table><thead><tr><th>输出  重定向</th><th>输出重定向到一个文件或设备：  <br>&gt;   覆盖原来的文件         &gt;&gt;   追加原来的文件                                                                                                              举例：<br> ls &gt; log                           — 在log文件中列出所有项，并覆盖原文件                                                         echo   “hello”&gt;&gt;log     —将hello追加到log文件中</th></tr></thead><tbody><tr><td>输入  重定向</td><td><strong>&lt;**         输入重定向到一个程序 <br> 举例：cat **&lt;</strong> log             —将log文件作为cat命令的输入，查看log文件的内容</td></tr><tr><td>标准   输出  重定向</td><td><strong>1 &gt;</strong> 或   <strong>&gt;</strong>                                                                                                                                                           含义：                                                                                                                                                                                 输出重定向时，只用正确的输出才会重定向到指的文件中                                                                                      错误的则会直接打印到屏幕上</td></tr><tr><td>错误   输出  重定向</td><td><strong>2 &gt;</strong>                                                                                                                                                                                     含义：                                                                                                                                                                                    错误的输出会重定向到指定文件里，正确的日志则直接打印到屏幕上。</td></tr><tr><td>结合  使用</td><td><strong>2&gt;&amp;1</strong>                                                                                                                                                                                 含义：                                                                                                                                                                                   将无论是正确的输出还是错误的输出都重定向到指定文件</td></tr><tr><td>管道</td><td><strong>|</strong>                                                                                                                                                                                        含义：                                                                                                                                                                                             把前一个输出当做后一个输入                                                                                                                                       grep 通过正则搜索文本，并将匹配的行打印出来                                                                                                   netstat -anp | grep 22   把netstat –anp 命令的输出 当做是grep 命令的输入</td></tr><tr><td>命令  执行  控制</td><td><strong>&amp;&amp;</strong>   前一个命令执行成功才会执行后一个命令                                                                                                                   <strong>||</strong>      前一个命令执行失败才会执行后一个命令</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Linux命令的学习（一）</title>
      <link href="/2018/12/27/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A01/"/>
      <url>/2018/12/27/%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4%E7%9A%84%E5%AD%A6%E4%B9%A01/</url>
      
        <content type="html"><![CDATA[<h2 id="一、命令指南（manual）：man"><a href="#一、命令指南（manual）：man" class="headerlink" title="一、命令指南（manual）：man"></a>一、命令指南（manual）：man</h2><a id="more"></a><p>安装 man：</p><pre class="line-numbers language-shell"><code class="language-shell">yum install man –y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>（-y 表示获得允许，无需确认）</p></blockquote><p>查看ls命令指南：</p><pre class="line-numbers language-shell"><code class="language-shell"> man ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、目录操作命令"><a href="#二、目录操作命令" class="headerlink" title="二、目录操作命令"></a>二、目录操作命令</h2><p><strong>切换</strong>目录：</p><pre class="line-numbers language-shell"><code class="language-shell">cd + 目录的路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看</strong>当前目录所在的完整路径：</p><pre class="line-numbers language-shell"><code class="language-shell">pwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>新建</strong>目录：</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir +目录名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查看</strong> —当前目录所用有的子目录和文件：</p><pre class="line-numbers language-shell"><code class="language-shell">ls   ，ll等价于  ls –l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        查看—目录下的所有东西（包括隐藏文件）：</p><pre class="line-numbers language-shell"><code class="language-shell">  ls –al   等价于 ll -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>拷贝</strong>目录或文件：</p><pre class="line-numbers language-shell"><code class="language-shell">cp –r install.log  install2.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>复制文件，-r 表示递归复制，此时，可用于复制整个目录</p></blockquote><p><strong>删除</strong>目录或文件：</p><pre class="line-numbers language-shell"><code class="language-shell">rm  -r install.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>此时需要手动输入y ，代表确认删除。可加 –f参数，直接删除，无需确认。</p><p>当需要一个目录下所有东西时，加-r参数，代表遍历删除。</p><p>(rmdir只能删除空目录)</p></blockquote><p><strong>移动</strong>目录或文件：</p><pre class="line-numbers language-shell"><code class="language-shell">mv + 目录/文件名字 + 其他路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​         将test目录移动到  根目录/ 下 : </p><pre class="line-numbers language-shell"><code class="language-shell">  mv test / <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>（如果移动到当前目录，用另外一个名称，则可以实现重命名的效果）</p></blockquote><p><strong>更改</strong>文件或目录的名字：</p><pre class="line-numbers language-shell"><code class="language-shell">mv + 旧目录名字 + 新目录名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>(     -r 用于递归的拷贝，删除，移动目录)</p></blockquote><h2 id="三、文件操作命令"><a href="#三、文件操作命令" class="headerlink" title="三、文件操作命令"></a>三、文件操作命令</h2><h3 id="1、一般文件操作"><a href="#1、一般文件操作" class="headerlink" title="1、一般文件操作"></a>1、一般文件操作</h3><p><code>在Linux中：一切皆文件</code></p><p><strong>新建</strong>文件：touch  install.log<br>​        (vim install.log   编辑文件，如果文件不存在，就会新建一个对应的文件，并进入文件的编辑模式，如果按 :wq 会保存文件并退出，如果按 :q 则不保存退出)<br>​<br><strong>查看</strong>文件内容：cat +（文件名）<br>（一次性显示整个文件的内容，文件内容过多时文本在屏幕上迅速闪过（滚屏），用,户体验不好）</p><p>一次命令显示一屏文本：</p><p>满屏后停下来，并且在屏幕的底部出现一个提示信息，给出至今己显示的该文件的百分比。</p><pre><code>             more +（文件名）             按键         效果             Space         显示下一屏文本内容           B             显示上一屏文本内容           Enter         显示下一行文本内容           Q             退出查看   </code></pre><pre><code>            less+（文件名）          按键                  效果           Q                 退出less 命令            h                 显示帮助界面           u                 向后滚动半页            d                 向前翻半页            e | Enter（回车）  向后翻一行文本           space(空格键)      滚动一页            b                 向后翻一页            [pagedown]：      向下翻动一页            [pageup]：        向上翻动一页            上下键，          向上一行，向下一行</code></pre><p>从<strong>头部</strong>打印文件内容：</p><pre class="line-numbers language-shell"><code class="language-shell">        head  -10 +（文件名）  打印文件1到10行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从<strong>尾部</strong>打印文件内容​  </p><pre class="line-numbers language-shell"><code class="language-shell">      tail -10 +（文件名）打印文件最后10行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>tail还可用来查看文件内容的更新变化</p><p>tail -f (文件名)  </p></blockquote><p><strong>查找</strong>文件或目录​    </p><pre class="line-numbers language-shell"><code class="language-shell">    find +（路径名） –name +（文件名）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        举例：</p><pre class="line-numbers language-shell"><code class="language-shell">find / -name profile   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    在/(根目录)目录下查找 名字为profile的文件或目录</p><p> 也可利用正则：<br>​             举例：</p><pre class="line-numbers language-shell"><code class="language-shell"> find /etc -name pro*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​         在/etc目录下查找以pro开头的文件或目录</p><blockquote><p>注意：</p><ul><li><p>路径越精确，查找的范围越小，速度越快 </p></li><li><p>查找的目录必须是文件所在目录的父级目录</p></li></ul></blockquote><h3 id="2、文件编辑"><a href="#2、文件编辑" class="headerlink" title="2、文件编辑"></a>2、文件编辑</h3><h4 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h4><p>（1） vi    进入编辑模式 —–&gt;按i   进入插入模式 ——-&gt;  按Esc 退出编辑模式</p><pre><code>vi  filename   :打开或新建文件，并将光标置于第一行首 vi +n filename ：打开文件，并将光标置于第n行首 vi + filename  ：打开文件，并将光标置于最后一行首 vi +/pattern filename：打开文件，并将光标置于第一个与 pattern匹配的字符串所在的行首 </code></pre><blockquote><p> filename  为文件名</p></blockquote><p>（2）在文件vi（文件编辑）模式下</p><ul><li><strong>命令行模式</strong> </li></ul><pre><code>:w      保存:q      退出:wq     保存并退出:q!     强制退出，不保存:set nu |ctrl+g    显示文本行数:set nonu          去除显示的行数:s/p1/p2/g         将当前行中所有p1均用p2替代 :n1,n2s/p1/p2/g    将第n1至n2行中所有p1均用p2替代 :g/p1/s//p2/g      将文件中所有p1均用p2替换</code></pre><ul><li><strong>一般模式</strong> </li></ul><pre><code>按键：yy    复制光标所在行(常用) nyy   复制光标所在行的向下n行，例如， 20yy则是复制20行(常用) p|P   p为复制的数据粘贴在光标下一行， P则为粘贴在光标上一行(常用)G     光标移至第最后一行nG    光标移动至第N行行首n+    光标下移n行 n-    光标上移n行 H     光标移至屏幕顶行 M     光标移至屏幕中间行 L     光标移至屏幕最后行 dd    删除所在行 x或X  删除一个字符，x删除光标后的，而X删除光标前的 u     撤销(常用)：N,Md    删除第N行到第M行：,$-1d   删除当前光标到倒数第一行数据按键：    i: 在当前光标所在字符的前面，转为输入模式；    a: 在当前光标所在字符的后面，转为输入模式；    o: 在当前光标所在行的下方，新建一行，并转为输入模式；    I：在当前光标所在行的行首，转换为输入模式    A：在当前光标所在行的行尾，转换为输入模式    O：在当前光标所在行的上方，新建一行，并转为输入模式；---逐字符移动：h: 左    l: 右j: 下    k: 上</code></pre><blockquote><p>（不同：在我的xshell中是 yyn实现复制所在行的向下n行）</p><p>（nB|nb:光标向上移动n行）</p></blockquote><h4 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h4><p>Vim是从 vi 发展出来的一个文本编辑器</p><p>安装vim 软件：</p><pre class="line-numbers language-shell"><code class="language-shell">yum install vim -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><em>用vim 打开/etc/profile 文件，</em></li><li><em>特点：编辑器对文本的内容进行了高亮，使整个文件的内容可读性大大加强</em> ，其他均与vi相同</li></ul><h3 id="3、文件上传下载"><a href="#3、文件上传下载" class="headerlink" title="3、文件上传下载"></a>3、文件上传下载</h3><p>安装上传下载命令：</p><pre class="line-numbers language-shell"><code class="language-shell">yum install lrzsz -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="上传文件：（windows—-gt-linux）"><a href="#上传文件：（windows—-gt-linux）" class="headerlink" title="上传文件：（windows—&gt;linux）"></a>上传文件：（windows—&gt;linux）</h4><blockquote><p>命令 ：rz  </p><p>弹出windows上传文件窗口</p></blockquote><h4 id="下载文件：-linux—-gt-windows"><a href="#下载文件：-linux—-gt-windows" class="headerlink" title="下载文件：(linux—&gt;windows)"></a>下载文件：(linux—&gt;windows)</h4><p><code>注意</code>：sz命令只能下载文件，不能下载目录，推荐将目录压缩成tar包或使用工具软件：Winscp【Xftp】</p><blockquote><p>命令：sz  （文件名）</p><p>弹出windows下载窗口,下载文件到指定文件目录,下载完之后，按ctrl+c结束。</p></blockquote><h3 id="4、文件传输"><a href="#4、文件传输" class="headerlink" title="4、文件传输"></a>4、文件传输</h3><h4 id="1）本地→远程"><a href="#1）本地→远程" class="headerlink" title="(1）本地→远程"></a>(1）本地→远程</h4><blockquote><p>文件  ：  scp local_file remote_username@remote_ip:remote_folder   </p><p>目录 ：  scp -r local_folder remote_username@remote_ip:remote_folder</p></blockquote><p>举例：</p><pre class="line-numbers language-shell"><code class="language-shell">方式一：  scp -rf /etc/profile root@192.168.198.128:/etc/方式二:  scp  -r /etc/profile root@node01 /etc/ 方式三：  scp -r /etc/profile node01:/etc/方式四：  scp -r /ec/profile node01:'pwd'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>scp</strong> ：远程传输文件命令</p><p><strong>-r</strong>  ：- 指的是后面跟的是参数    r  指的是遍历指定文件    <strong>f</strong>  指的是不用询问</p><p><strong>/etc/profile</strong>  : 是指定传输的文件</p><p><strong>root</strong>： 远程机器的账户名      <strong>@</strong>    远程机器的IP地址   <strong>：</strong>   <strong>/etc/</strong>    远程机器上指定的目录</p><p><strong>node01</strong>：远程机器的别名</p><p><strong>‘pwd’</strong>： 本地要远程传输文件所在的目录</p></blockquote><blockquote><p>第一次远程拷贝时，需要在箭头1初输入yes确认一下，验证一下远程主机。然后在箭头2处输入一下远程主机的密码。</p></blockquote><h4 id="2）远程→本地"><a href="#2）远程→本地" class="headerlink" title="(2）远程→本地"></a>(2）远程→本地</h4><blockquote><p>文件 ： scp remote_username@remote_ip:remote_file local_folder</p><p>目录 ： scp remote_username@remote_ip:remote_folder local_folder   </p></blockquote><h2 id="四、文件系统"><a href="#四、文件系统" class="headerlink" title="四、文件系统"></a>四、文件系统</h2><pre><code> Linux目录结构：  bin  存放二进制可执行文件(ls,cat,mkdir等)                                                            boot  存放用于系统引导时使用的各种文件  dev 用于存放设备文件  etc  存放系统配置文件  home 存放所有用户文件的根目录  lib  存放跟文件系统中的程序运行所需要的共享库及内核模块  mnt  系统管理员安装临时文件系统的安装点  opt  额外安装的可选应用程序包所放置的位置  proc  虚拟文件系统，存放当前内存的映射  root  超级用户目录  sbin  存放二进制可执行文件，只有root才能访问  tmp  用于存放各种临时文件  usr  用于存放系统应用程序，比较重要的目录/usr/local 本地管理员软件安装目录  var  用于存放运行时需要改变数据的文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统数据库MySQL安装</title>
      <link href="/2018/12/26/Linux%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E5%AE%89%E8%A3%85/"/>
      <url>/2018/12/26/Linux%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux系统数据库MySQL安装"><a href="#Linux系统数据库MySQL安装" class="headerlink" title="Linux系统数据库MySQL安装"></a>Linux系统数据库MySQL安装</h1><h2 id="一、第一次安装MySQL"><a href="#一、第一次安装MySQL" class="headerlink" title="一、第一次安装MySQL"></a>一、第一次安装MySQL</h2><h3 id="1、yum安装"><a href="#1、yum安装" class="headerlink" title="1、yum安装"></a>1、yum安装</h3><blockquote><p>命令 ： yum -y install mysql-server mysql-devel</p></blockquote><h3 id="2、登录"><a href="#2、登录" class="headerlink" title="2、登录"></a>2、登录</h3><blockquote><p>命令 ： mysql -u -p</p></blockquote><p><code>显示：</code></p><pre><code>mysql&gt;</code></pre><h3 id="3、查看数据库-注意用‘-’结束"><a href="#3、查看数据库-注意用‘-’结束" class="headerlink" title="3、查看数据库(注意用‘ ; ’结束 )"></a>3、查看数据库(注意用‘ ; ’结束 )</h3><blockquote><p>命令 ： show databases;</p></blockquote><h3 id="4、退出："><a href="#4、退出：" class="headerlink" title="4、退出："></a>4、退出：</h3><blockquote><p>命令： quit；</p></blockquote><h3 id="5、创建用户："><a href="#5、创建用户：" class="headerlink" title="5、创建用户："></a>5、创建用户：</h3><blockquote><p>命令 ： mysqladmin -uroot password 123456</p></blockquote><h3 id="6、再登录："><a href="#6、再登录：" class="headerlink" title="6、再登录："></a>6、再登录：</h3><blockquote><p>命令 ：mysql -u root -p</p></blockquote><p><code>显示：</code></p><pre><code>mysql&gt;</code></pre><p>说明成功了！</p><h3 id="7、数据库操作："><a href="#7、数据库操作：" class="headerlink" title="7、数据库操作："></a>7、数据库操作：</h3><blockquote><p>命令 ： use mysql;</p></blockquote><p><code>显示：</code></p><pre><code>Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changed</code></pre><h3 id="8、查看用户数据表："><a href="#8、查看用户数据表：" class="headerlink" title="8、查看用户数据表："></a>8、查看用户数据表：</h3><blockquote><p>命令 ： show tables;</p></blockquote><h3 id="9、查询user表部分字段："><a href="#9、查询user表部分字段：" class="headerlink" title="9、查询user表部分字段："></a>9、查询user表部分字段：</h3><blockquote><p>命令 ： select host,user,password from user;</p></blockquote><h3 id="10、通过修改user表的host字段，设置数据库访问权限，只要用户名和密码正确"><a href="#10、通过修改user表的host字段，设置数据库访问权限，只要用户名和密码正确" class="headerlink" title="10、通过修改user表的host字段，设置数据库访问权限，只要用户名和密码正确"></a>10、通过修改user表的host字段，设置数据库访问权限，只要用户名和密码正确</h3><h4 id="（1）推荐"><a href="#（1）推荐" class="headerlink" title="（1）推荐"></a>（1）推荐</h4><p>现将user表中其他无密码的记录删除</p><blockquote><p>命令 ： delete from user where password = ‘ ‘;</p></blockquote><h4 id="2-更新有密码的记录的host字段值"><a href="#2-更新有密码的记录的host字段值" class="headerlink" title="(2)更新有密码的记录的host字段值"></a>(2)更新有密码的记录的host字段值</h4><blockquote><p>命令 ： update user set host = “%”;</p></blockquote><h4 id="3-刷新权限"><a href="#3-刷新权限" class="headerlink" title="(3)刷新权限"></a>(3)刷新权限</h4><blockquote><p> 命令 ：flush privileges;</p></blockquote><h4 id="4-退出"><a href="#4-退出" class="headerlink" title="(4)退出"></a>(4)退出</h4><blockquote><p>命令 ：quit;</p></blockquote><h2 id="二、Linux系统登录数据库MySQL报错"><a href="#二、Linux系统登录数据库MySQL报错" class="headerlink" title="二、Linux系统登录数据库MySQL报错"></a>二、Linux系统登录数据库MySQL报错</h2><h3 id="报错一："><a href="#报错一：" class="headerlink" title="报错一："></a>报错一：</h3><p>1、登录 </p><blockquote><p>mysqld -uroot -p123456</p></blockquote><p><code>报错：</code></p><pre><code>Can&#39;t connect to local MySQL server through socket &#39;/var/lib/mysql/mysql.sock&#39; (111)</code></pre><p><code>解决：</code></p><p>1）、先删除mysql.sock</p><blockquote><p>cd /var/lib/mysql</p></blockquote><blockquote><p>mv  mysql.sock  mysql.sock.bak</p></blockquote><p>2）、再次登陆</p><blockquote><p>mysql -uroot -p123456</p></blockquote><p><code>报错：</code></p><pre><code> Can&#39;t connect to local MySQL server through socket &#39;/var/lib/mysql/mysql.sock&#39; (2)</code></pre><p> 3）、看看mysql的状态，</p><blockquote><p> /etc/rc.d/init.d/mysqld status</p></blockquote><p> <code>显示：</code></p><blockquote><p> mysqld is stopped</p></blockquote><p>4）、看看是不是mysql的权限问题<br>在/var/lib目录下：</p><blockquote><p>ls -lt|grep mysql</p></blockquote><p><code>显示：</code></p><blockquote><p>drwxr-xr-x. 4 mysql   mysql 4096 Jan  6 11:09 mysql</p></blockquote><p>5）、说明mysql服务没有启动</p><p>2、启动mysql服务</p><blockquote><p>/etc/init.d/mysqld start</p><p>或</p><p>service mysqld start</p></blockquote><p><code>显示：</code></p><pre><code>Starting mysqld:                                           [  OK  ]</code></pre><p>3、再次登录：</p><blockquote><p>mysql -uroot -p123456</p></blockquote><p><code>显示：</code></p><pre><code>Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 2Server version: 5.1.73 Source distributionCopyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.mysql&gt; </code></pre><p>4、退出</p><blockquote><p>quit</p></blockquote><p>5、解决出现mysql.sock的问题</p><blockquote><p>  （1）、vim /etc/mycnf</p></blockquote><p>  编辑内容：</p><pre><code>  [mysqld]  skip_name_resolve=on innodb_file_per_table=on</code></pre><p>  按esc :wq 保存并退出<br>  （2）使用命令：</p><blockquote><p>mysql_secure_installation</p></blockquote><p>  （3）直接[ enter ] 键，输入密码，</p><p>(另推荐：Jakie_ZHF老师的博客)</p><h3 id="报错二："><a href="#报错二：" class="headerlink" title="报错二："></a>报错二：</h3><pre><code>  ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: YES)</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习之CentOS 6系统安装</title>
      <link href="/2018/12/25/Linux%E7%B3%BB%E7%BB%9FCentOS%206%E5%AE%89%E8%A3%85/"/>
      <url>/2018/12/25/Linux%E7%B3%BB%E7%BB%9FCentOS%206%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p> 资源准备：</p><p>CentOS-6.6-x86_64-minimal.iso（简易迷你版） ：</p><p>CentOS-6.7-x86_64-bin-DVD1.iso（完整版）：</p><h2 id="1、点击新建虚拟机"><a href="#1、点击新建虚拟机" class="headerlink" title="1、点击新建虚拟机"></a>1、点击新建虚拟机</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rdoec2rj30fe050t9e.jpg" alt="img"> </p><h2 id="2、选择典型。（专业人士使用的话建议选择高级）"><a href="#2、选择典型。（专业人士使用的话建议选择高级）" class="headerlink" title="2、选择典型。（专业人士使用的话建议选择高级）"></a>2、选择典型。（专业人士使用的话建议选择高级）</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rf3k4e2j30g20ar40h.jpg" alt="img"> </p><h2 id="3-选择稍后安装操作系统"><a href="#3-选择稍后安装操作系统" class="headerlink" title="3. 选择稍后安装操作系统"></a>3. 选择稍后安装操作系统</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rfsol81j30fe0e4403.jpg" alt="img"> </p><h2 id="4-选择操作系统类型，选择linux-centos-64位"><a href="#4-选择操作系统类型，选择linux-centos-64位" class="headerlink" title="4. 选择操作系统类型，选择linux,centos 64位"></a>4. 选择操作系统类型，选择linux,centos 64位</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rgu0v2lj30fe0ehdh3.jpg" alt="img"> </p><h2 id="5-选择虚拟机安装位置和名称。"><a href="#5-选择虚拟机安装位置和名称。" class="headerlink" title="5. 选择虚拟机安装位置和名称。"></a>5. 选择虚拟机安装位置和名称。</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rhkj8yfj30fe0ef75d.jpg" alt="img"> </p><h2 id="6-指定磁盘容量，默认20GB。"><a href="#6-指定磁盘容量，默认20GB。" class="headerlink" title="6. 指定磁盘容量，默认20GB。"></a>6. 指定磁盘容量，默认20GB。</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15ri7ptbaj30fe0evjtf.jpg" alt="img"> </p><h2 id="7-选择自定义硬件"><a href="#7-选择自定义硬件" class="headerlink" title="7. 选择自定义硬件"></a>7. 选择自定义硬件</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rk4qtotj30fe0e8gna.jpg" alt="img"> </p><h2 id="8-点击CD-DVD-然后选择操作系统的ISO映像文件，选择完后，点击关闭。"><a href="#8-点击CD-DVD-然后选择操作系统的ISO映像文件，选择完后，点击关闭。" class="headerlink" title="8. 点击CD/DVD,然后选择操作系统的ISO映像文件，选择完后，点击关闭。"></a>8. 点击CD/DVD,然后选择操作系统的ISO映像文件，选择完后，点击关闭。</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rmsa9sjj30i40g5myh.jpg" alt="img">  </p><h2 id="9-点击完成。"><a href="#9-点击完成。" class="headerlink" title="9.点击完成。"></a>9.点击完成。</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rojtrexj30g30f6aab.jpg" alt="img"> </p><h1 id="二、配置虚拟机"><a href="#二、配置虚拟机" class="headerlink" title="二、配置虚拟机"></a>二、<strong>配置虚拟机</strong></h1><h2 id="1-启动虚拟机。"><a href="#1-启动虚拟机。" class="headerlink" title="1. 启动虚拟机。"></a>1. 启动虚拟机。</h2><p>指定虚拟机：点击 “开启此虚拟机”</p><p>注意：如果启动虚拟机时，发生以下问题，说明是你的电脑默认未开启虚拟化技术。</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rqc0xk7j30je0ekapy.jpg" alt="img"> </p><p>此时你应该把机器重启并进入bios界面（不同的机器进入bios界面的快捷键不同，一般为F1~F10键中的某个键，如果都不行，就得自己百度一下你的机器型号进入bios界面的快捷方式）。</p><p>​    当进入bios界面后，把虚拟机化选项（virtualization technology）打开,通过回车键，把disabled改成enabled,然后保存并重启机器。我这边是按F10，不同机器可能不一样，看右下角的提示信息。</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rqzwza8j30fe0ayak5.jpg" alt="img"> </p><h2 id="2-Test-Media-如果不需要的话，点Skip"><a href="#2-Test-Media-如果不需要的话，点Skip" class="headerlink" title="2.Test Media, 如果不需要的话，点Skip"></a>2.Test Media, 如果不需要的话，点Skip</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rrr9unej30fe06u0tt.jpg" alt="img"> </p><h2 id="3、单击Next按钮继续"><a href="#3、单击Next按钮继续" class="headerlink" title="3、单击Next按钮继续"></a>3、单击Next按钮继续</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rsck2rkj30ce08cmy0.jpg" alt="img"> </p><h2 id="4-选择安装期间显示的语言"><a href="#4-选择安装期间显示的语言" class="headerlink" title="4. 选择安装期间显示的语言"></a>4. 选择安装期间显示的语言</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rt1k6j2j30fe0afmyp.jpg" alt="img"> </p><h2 id="5、选择键盘语言"><a href="#5、选择键盘语言" class="headerlink" title="5、选择键盘语言"></a>5、选择键盘语言</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rtsr0fdj30fe09igm6.jpg" alt="img"> </p><h2 id="6、选择存储介质的类别。"><a href="#6、选择存储介质的类别。" class="headerlink" title="6、选择存储介质的类别。"></a>6、选择存储介质的类别。</h2><p>如果是将CentOS 6安装到本地硬盘上，选择 Basic Storage Devices，如果安装到网络存储介质如SANs上，选择 Specialized Storage Devices</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15run6jt7j30fe0an3zh.jpg" alt="img"> </p><h2 id="7-选择-yes-discard-any-data"><a href="#7-选择-yes-discard-any-data" class="headerlink" title="7.选择 yes,discard any data"></a>7.选择 yes,discard any data</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rvca0zlj30fe0admyi.jpg" alt="img"> </p><h2 id="8-设定主机名称（hostname）"><a href="#8-设定主机名称（hostname）" class="headerlink" title="8. 设定主机名称（hostname）"></a>8. 设定主机名称（hostname）</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rw3bi44j30fe0agq36.jpg" alt="img"> </p><h2 id="9-设定时区，"><a href="#9-设定时区，" class="headerlink" title="9. 设定时区，"></a>9. 设定时区，</h2><p>选择 Asia/Shanghai</p><h2 id="10-设定root帐户的密码"><a href="#10-设定root帐户的密码" class="headerlink" title="10. 设定root帐户的密码"></a>10. 设定root帐户的密码</h2><p>尽量使用较复杂的密码安装（根据实际情况，密码简单时，会有提示，点击user anyway 就行）</p><h2 id="11-选择安装类型，这里我选择-“Use-All-Space”"><a href="#11-选择安装类型，这里我选择-“Use-All-Space”" class="headerlink" title="11. 选择安装类型，这里我选择 “Use All Space”"></a>11. 选择安装类型，这里我选择 “Use All Space”</h2><p> <img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rxcagghj30f509gabh.jpg" alt="img"></p><h2 id="12-选择-“Write-changes-to-disk”，将分区数据写入硬盘"><a href="#12-选择-“Write-changes-to-disk”，将分区数据写入硬盘" class="headerlink" title="12. 选择 “Write changes to disk”，将分区数据写入硬盘"></a>12. 选择 “Write changes to disk”，将分区数据写入硬盘</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15ry9hsb2j30gt09x3z9.jpg" alt="img"> </p><h2 id="13-开始安装，此时只需等待即可"><a href="#13-开始安装，此时只需等待即可" class="headerlink" title="13. 开始安装，此时只需等待即可"></a>13. 开始安装，此时只需等待即可</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15rywwpq3j30fe0ae3zx.jpg" alt="img"> </p><h2 id="14-安装完结后，点击Reboot按钮"><a href="#14-安装完结后，点击Reboot按钮" class="headerlink" title="14. 安装完结后，点击Reboot按钮"></a>14. 安装完结后，点击Reboot按钮</h2><h1 id="三、网络配置"><a href="#三、网络配置" class="headerlink" title="三、网络配置"></a>三、网络配置</h1><h2 id="1、查看网关"><a href="#1、查看网关" class="headerlink" title="1、查看网关"></a>1、查看网关</h2><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15wt10f42j307903smxt.jpg"></p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15wu8o6t5j30fe09475w.jpg"></p><h2 id="2、配置静态IP-NAT模式"><a href="#2、配置静态IP-NAT模式" class="headerlink" title="2、配置静态IP(NAT模式)"></a>2、配置静态IP(NAT模式)</h2><p>1、编辑配置文件,添加修改以下内容</p><pre class="line-numbers language-shell"><code class="language-shell">vim  /etc/sysconfig/network-scripts/ifcfg-eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、按i 进入文本编辑模式，出现游标，左下角会出现INSERT,即可以编辑</p><pre class="line-numbers language-sh"><code class="language-sh">DEVICE=eth0       #网卡设备名,请勿修改名字TYPE=Ethernet       #网络类型，以太网BOOTPROTO=static   #启用静态IP地址ONBOOT=yes        #开启自动启用网络连接    IPADDR=192.168.198.128  #设置IP地址NETMASK=255.255.255.0  #设置子网掩码GATEWAY=192.168.198.2   #设置网关DNS1=114.114.114.114  #设置备DNS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按ESC退出编辑模式</p><pre class="line-numbers language-shell"><code class="language-shell">:wq  #保存退出<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、重启网络连接</p><pre class="line-numbers language-shell"><code class="language-shell">service network restartifconfig  #查看IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、单独配置DNS解析器</p><pre class="line-numbers language-shell"><code class="language-shell">vi /etc/resolv.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑内容：i</p><pre class="line-numbers language-shell"><code class="language-shell">nameserver 网关<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>:wq  #保存并退出</p><p>5、验证</p><pre class="line-numbers language-shell"><code class="language-shell">ping 虚拟网关 | 物理机（笔记本）IP | 外网ping www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6、注意</p><p>a.保证VMware的虚拟网卡没有被禁用</p><p><img src="https://wx1.sinaimg.cn/large/005zftzDgy1g15zvoprnfj30fe03fwet.jpg"></p><p>b.网关IP不能被占用</p><h2 id="3、桥接和NAT模式的区别"><a href="#3、桥接和NAT模式的区别" class="headerlink" title="3、桥接和NAT模式的区别"></a>3、桥接和NAT模式的区别</h2><h3 id="桥接："><a href="#桥接：" class="headerlink" title="桥接："></a>桥接：</h3><p>​      结构：网络与物理机同一个网段（会占用外部IP）</p><p>​      特点：</p><p>​           1.外网能够访问</p><p>​           2.能够访问外网   </p><p>注意：桥接模式下的虚拟机网关必须改为与物理机网关一致</p><h3 id="NAT模式："><a href="#NAT模式：" class="headerlink" title="NAT模式："></a>NAT模式：</h3><p>​      结构：构成一个以物理机为网关的子网</p><p>​      特点：</p><p>​           1.子网的所有的服务器对外不可见     </p><p>​           2.子网能够正常访问外网</p><p>​      安全！！！ </p><p>​      节省IP资源</p><h1 id="四、拍快照"><a href="#四、拍快照" class="headerlink" title="四、拍快照"></a>四、拍快照</h1><p>（保存当时计算机所出状态的各种配置和资源，适度使用）</p><blockquote><p>选中指定虚拟计算机——鼠标右击—–选中“快照” ——“拍摄快照‘—-在页面中找到”拍摄快照“，并添加名称和描述</p><p>也可以删除，找到页面中的删除按钮</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动安装maven坐标依赖</title>
      <link href="/2018/12/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85maven%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96/"/>
      <url>/2018/12/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85maven%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<h2 id="一、事件原因："><a href="#一、事件原因：" class="headerlink" title="一、事件原因："></a>一、事件原因：</h2><p>学习quartz框架时，在maven项目的pom.xml文件中添加quartz所需要的坐标依赖时，显示jar包不存在。</p><pre class="line-numbers language-xml"><code class="language-xml">提示："Dependency 'xxxx‘ not found"，    并且添加的如下两个坐标依赖均报红。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.quartz-scheduler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 工具 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.quartz-scheduler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>quartz-jobs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：</p><table><thead><tr><th>1、maven项目所需要的jar包均存放在maven的F:\m2\repository(项目所需的jar包仓库)文件夹中</th></tr></thead><tbody><tr><td>2、在F:\apache-maven-3.5.4\conf的settings.xml文件中有如下设置：（由于使用远程仓库太慢，阿里云给我们提供了一个镜像仓库，便于我们使用，且只包含central仓库中的jar）</td></tr></tbody></table><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--文件中原有的配置：远程仓库---></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>mirrorId<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>repositoryId<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Human Readable Name for this Mirror.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://my.repository.com/repo/path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--文件中自己手动配置：阿里镜像仓库---></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2018/12/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85maven%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96/Users\Administrator\Desktop\1.jpg"></p><table><thead><tr><th>3.可是我们在<a href="https://mvnrepository.com/%EF%BC%88maven%E4%BB%93%E5%BA%93%EF%BC%89%E4%B8%AD%E5%8F%91%E7%8E%B0%E6%9C%89%E6%88%91%E4%BB%AC%E8%A6%81%E7%9A%84jar%E5%8C%85%EF%BC%8C%E8%80%8C%E4%B8%94%E5%B0%B1%E5%9C%A8Central%E4%BB%93%E5%BA%93%E9%87%8C%EF%BC%8C%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E5%B0%B1%E5%BE%88%E5%A5%87%E6%80%AA%E4%BA%86%EF%BC%8C%E5%90%8E%E6%9D%A5%E5%B0%B1%E9%80%89%E6%8B%A9%E8%BF%98%E6%98%AF%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85jar%E5%8C%85%E5%90%A7">https://mvnrepository.com/（maven仓库）中发现有我们要的jar包，而且就在Central仓库里，这里我们就很奇怪了，后来就选择还是手动安装jar包吧</a></th></tr></thead><tbody><tr><td>（如果有小伙伴有别的解决方案，还请指点一二。）</td></tr></tbody></table><pre><code>&lt;!--more--&gt;</code></pre><h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><p>1、首先，我们需要从maven  Repository中下载我们需要的jar包（需要的两个jar包，下载原理相同）</p><p><img src="/2018/12/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85maven%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96/Users\Administrator\Desktop\2.jpg"></p><p>2、注意我们的maven安装，需要配置环境变量，才能在dos窗口，指令安装jar包</p><p><img src="/2018/12/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85maven%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96/Users\Administrator\Desktop\4.jpg"></p><p>因为我之前查资料时，有小伙伴说，java的环境变量配置也会影响，所以，我在这里也把java的环境变量配置也贴出来</p><p><img src="/2018/12/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85maven%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96/Users\Administrator\Desktop\5.jpg" alt="1"></p><p><img src="/2018/12/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85maven%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96/Users\ADMINI~1\AppData\Local\Temp\1544699916763.png" alt="1544699916763"></p><p><img src="/2018/12/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85maven%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96/Users\ADMINI~1\AppData\Local\Temp\1544699989775.png" alt="1544699989775"></p><table><thead><tr><th>JAVA_HOME</th></tr></thead><tbody><tr><td>F:\Java\jdk1.8.0_131（  根据自己的jdk安装目录）</td></tr><tr><td><strong>CLASSPATH</strong></td></tr><tr><td>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</td></tr><tr><td><strong>MAVEN_HOME</strong></td></tr><tr><td>F:\apache-maven-3.5.4（ 根据自己maven安装目录）</td></tr><tr><td><strong>Path</strong>（注意配置的时候，一定要和配置home时的变量名一致，如MAVEN_HOME,我配置成了%MVN_HOME%\bin;）</td></tr><tr><td>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0;%MYSQL_HOME%\bin;%MAVEN_HOME%\bin;</td></tr></tbody></table><p>配置这些环境变量，在dos窗口才能使java  ，mvn  之类的指令可以用；</p><p>否则会出现如下显示。</p><table><thead><tr><th>‘mvn’ 不是内部或外部命令，也不是可运行的程序</th></tr></thead><tbody><tr><td>(这就是环境变量没有配成功的结果)</td></tr></tbody></table><p>3.安装</p><table><thead><tr><th>C:\Users\Administrator&gt;mvn -v</th></tr></thead><tbody><tr><td><img src="/2018/12/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85maven%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96/Users\ADMINI~1\AppData\Local\Temp\1544701045091.png" alt="1544701045091"></td></tr><tr><td>C:\Users\Administrator&gt;mvn install:install-file -Dfile=F:/apache-maven-3.5.4/m2/quartz-2.3.0.jar（jar包所在路径） -DgroupId=org.quartz-scheduler -DartifactId=quartz -Dversion=2.3.0 -Dpackaging=jar</td></tr><tr><td>（根据下面所示的配置groupId、artifactId、version）</td></tr></tbody></table><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.quartz-scheduler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2018/12/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85maven%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96/Users\ADMINI~1\AppData\Local\Temp\1544702128551.png" alt="1544702128551"></p><p>如图所示，安装成功。</p><p><img src="/2018/12/24/%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85maven%E5%9D%90%E6%A0%87%E4%BE%9D%E8%B5%96/Users\ADMINI~1\AppData\Local\Temp\1544702179172.png" alt="1544702179172"></p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/2017/07/16/hexo/"/>
      <url>/2017/07/16/hexo/</url>
      
        <content type="html"><![CDATA[<p>🃏<code>请注意</code>:</p><p>博客搭建过程中会碰到两个同名的<code>_config.yml</code> 配置文件：一个是站点的全局配置（在全局文件夹根目录../hexo-blog/），一个是博客主题的配置（在主题文件夹根目录../hexo-blog/themes/yelee/）</p><h2 id="1、-Hexo博客插入【图片】"><a href="#1、-Hexo博客插入【图片】" class="headerlink" title="1、 Hexo博客插入【图片】"></a>1、 Hexo博客插入【图片】</h2><blockquote><p>1️⃣首先确认全局../hexo-blog/_config.yml中有</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p>2️⃣ 在全局../hexo-blog/下执行</p><pre class="line-numbers language-shell"><code class="language-shell">npm install https://github.com/CodeFalling/hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p>3️⃣.确保在全局../hexo-blog/source/_posts下创建和md文件同名的目录，在里面放该md需要的图片，然后在md中插入</p><pre><code>![](目录名/文件名.png)</code></pre></blockquote><blockquote><p>:arrow_up_small:  即可在hexo generate时正确生成插入图片。比如：</p><pre><code>    |- post1.md    |_ post1        |- pic1.png</code></pre></blockquote><blockquote><p>:arrow_up_small:  <strong>map</strong><br>将一个 RDD 中的每个数据项，通过 map 中的函数映射变为一个新的元素。<br>特点：输入一条，输出一条数据。</p><p>:black_joker:<strong>mapToPair</strong>   (Java)</p><p>将RDD（如lineRDD）转换成二元组</p><p>🃏 <strong>mapValues</strong></p><p>操作（K,V）RDD中的value     返回Tuple2&lt;&gt;</p><p>🃏:yellow_heart:</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人兴趣 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
